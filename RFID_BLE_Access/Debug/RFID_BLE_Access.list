
RFID_BLE_Access.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c960  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a68  0800caa0  0800caa0  0001caa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e508  0800e508  0001e508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e510  0800e510  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e514  0800e514  0001e514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000008  0800e518  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000009c  0800e5ac  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000d4  0800e5e1  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001648  200000e8  0800e5f2  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  0800e5f2  00021730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800e5f2  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002cf74  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006834  00000000  00000000  0004da4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000026c0  00000000  00000000  00054288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001d90  00000000  00000000  00056948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00028010  00000000  00000000  000586d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002dd18  00000000  00000000  000806e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d589e  00000000  00000000  000ae400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000a94c  00000000  00000000  00183ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000072  00000000  00000000  0018e5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e8 	.word	0x200000e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ca88 	.word	0x0800ca88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ec 	.word	0x200000ec
 800017c:	0800ca88 	.word	0x0800ca88

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b970 	b.w	8000af4 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	460f      	mov	r7, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4694      	mov	ip, r2
 8000840:	d965      	bls.n	800090e <__udivmoddi4+0xe2>
 8000842:	fab2 f382 	clz	r3, r2
 8000846:	b143      	cbz	r3, 800085a <__udivmoddi4+0x2e>
 8000848:	fa02 fc03 	lsl.w	ip, r2, r3
 800084c:	f1c3 0220 	rsb	r2, r3, #32
 8000850:	409f      	lsls	r7, r3
 8000852:	fa20 f202 	lsr.w	r2, r0, r2
 8000856:	4317      	orrs	r7, r2
 8000858:	409c      	lsls	r4, r3
 800085a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800085e:	fa1f f58c 	uxth.w	r5, ip
 8000862:	fbb7 f1fe 	udiv	r1, r7, lr
 8000866:	0c22      	lsrs	r2, r4, #16
 8000868:	fb0e 7711 	mls	r7, lr, r1, r7
 800086c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000870:	fb01 f005 	mul.w	r0, r1, r5
 8000874:	4290      	cmp	r0, r2
 8000876:	d90a      	bls.n	800088e <__udivmoddi4+0x62>
 8000878:	eb1c 0202 	adds.w	r2, ip, r2
 800087c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000880:	f080 811c 	bcs.w	8000abc <__udivmoddi4+0x290>
 8000884:	4290      	cmp	r0, r2
 8000886:	f240 8119 	bls.w	8000abc <__udivmoddi4+0x290>
 800088a:	3902      	subs	r1, #2
 800088c:	4462      	add	r2, ip
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	b2a4      	uxth	r4, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800089e:	fb00 f505 	mul.w	r5, r0, r5
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	d90a      	bls.n	80008bc <__udivmoddi4+0x90>
 80008a6:	eb1c 0404 	adds.w	r4, ip, r4
 80008aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ae:	f080 8107 	bcs.w	8000ac0 <__udivmoddi4+0x294>
 80008b2:	42a5      	cmp	r5, r4
 80008b4:	f240 8104 	bls.w	8000ac0 <__udivmoddi4+0x294>
 80008b8:	4464      	add	r4, ip
 80008ba:	3802      	subs	r0, #2
 80008bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008c0:	1b64      	subs	r4, r4, r5
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11e      	cbz	r6, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40dc      	lsrs	r4, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	e9c6 4300 	strd	r4, r3, [r6]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0xbc>
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	f000 80ed 	beq.w	8000ab6 <__udivmoddi4+0x28a>
 80008dc:	2100      	movs	r1, #0
 80008de:	e9c6 0500 	strd	r0, r5, [r6]
 80008e2:	4608      	mov	r0, r1
 80008e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e8:	fab3 f183 	clz	r1, r3
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d149      	bne.n	8000984 <__udivmoddi4+0x158>
 80008f0:	42ab      	cmp	r3, r5
 80008f2:	d302      	bcc.n	80008fa <__udivmoddi4+0xce>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	f200 80f8 	bhi.w	8000aea <__udivmoddi4+0x2be>
 80008fa:	1a84      	subs	r4, r0, r2
 80008fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000900:	2001      	movs	r0, #1
 8000902:	4617      	mov	r7, r2
 8000904:	2e00      	cmp	r6, #0
 8000906:	d0e2      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000908:	e9c6 4700 	strd	r4, r7, [r6]
 800090c:	e7df      	b.n	80008ce <__udivmoddi4+0xa2>
 800090e:	b902      	cbnz	r2, 8000912 <__udivmoddi4+0xe6>
 8000910:	deff      	udf	#255	; 0xff
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8090 	bne.w	8000a3c <__udivmoddi4+0x210>
 800091c:	1a8a      	subs	r2, r1, r2
 800091e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	2101      	movs	r1, #1
 8000928:	fbb2 f5f7 	udiv	r5, r2, r7
 800092c:	fb07 2015 	mls	r0, r7, r5, r2
 8000930:	0c22      	lsrs	r2, r4, #16
 8000932:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000936:	fb0e f005 	mul.w	r0, lr, r5
 800093a:	4290      	cmp	r0, r2
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x124>
 800093e:	eb1c 0202 	adds.w	r2, ip, r2
 8000942:	f105 38ff 	add.w	r8, r5, #4294967295
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x122>
 8000948:	4290      	cmp	r0, r2
 800094a:	f200 80cb 	bhi.w	8000ae4 <__udivmoddi4+0x2b8>
 800094e:	4645      	mov	r5, r8
 8000950:	1a12      	subs	r2, r2, r0
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb2 f0f7 	udiv	r0, r2, r7
 8000958:	fb07 2210 	mls	r2, r7, r0, r2
 800095c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000960:	fb0e fe00 	mul.w	lr, lr, r0
 8000964:	45a6      	cmp	lr, r4
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x14e>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x14c>
 8000972:	45a6      	cmp	lr, r4
 8000974:	f200 80bb 	bhi.w	8000aee <__udivmoddi4+0x2c2>
 8000978:	4610      	mov	r0, r2
 800097a:	eba4 040e 	sub.w	r4, r4, lr
 800097e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000982:	e79f      	b.n	80008c4 <__udivmoddi4+0x98>
 8000984:	f1c1 0720 	rsb	r7, r1, #32
 8000988:	408b      	lsls	r3, r1
 800098a:	fa22 fc07 	lsr.w	ip, r2, r7
 800098e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000992:	fa05 f401 	lsl.w	r4, r5, r1
 8000996:	fa20 f307 	lsr.w	r3, r0, r7
 800099a:	40fd      	lsrs	r5, r7
 800099c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009a0:	4323      	orrs	r3, r4
 80009a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009a6:	fa1f fe8c 	uxth.w	lr, ip
 80009aa:	fb09 5518 	mls	r5, r9, r8, r5
 80009ae:	0c1c      	lsrs	r4, r3, #16
 80009b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009b4:	fb08 f50e 	mul.w	r5, r8, lr
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	fa02 f201 	lsl.w	r2, r2, r1
 80009be:	fa00 f001 	lsl.w	r0, r0, r1
 80009c2:	d90b      	bls.n	80009dc <__udivmoddi4+0x1b0>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009cc:	f080 8088 	bcs.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d0:	42a5      	cmp	r5, r4
 80009d2:	f240 8085 	bls.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d6:	f1a8 0802 	sub.w	r8, r8, #2
 80009da:	4464      	add	r4, ip
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	b29d      	uxth	r5, r3
 80009e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009e4:	fb09 4413 	mls	r4, r9, r3, r4
 80009e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x1da>
 80009f4:	eb1c 0404 	adds.w	r4, ip, r4
 80009f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009fc:	d26c      	bcs.n	8000ad8 <__udivmoddi4+0x2ac>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	d96a      	bls.n	8000ad8 <__udivmoddi4+0x2ac>
 8000a02:	3b02      	subs	r3, #2
 8000a04:	4464      	add	r4, ip
 8000a06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a0e:	eba4 040e 	sub.w	r4, r4, lr
 8000a12:	42ac      	cmp	r4, r5
 8000a14:	46c8      	mov	r8, r9
 8000a16:	46ae      	mov	lr, r5
 8000a18:	d356      	bcc.n	8000ac8 <__udivmoddi4+0x29c>
 8000a1a:	d053      	beq.n	8000ac4 <__udivmoddi4+0x298>
 8000a1c:	b156      	cbz	r6, 8000a34 <__udivmoddi4+0x208>
 8000a1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a22:	eb64 040e 	sbc.w	r4, r4, lr
 8000a26:	fa04 f707 	lsl.w	r7, r4, r7
 8000a2a:	40ca      	lsrs	r2, r1
 8000a2c:	40cc      	lsrs	r4, r1
 8000a2e:	4317      	orrs	r7, r2
 8000a30:	e9c6 7400 	strd	r7, r4, [r6]
 8000a34:	4618      	mov	r0, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3c:	f1c3 0120 	rsb	r1, r3, #32
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	fa20 f201 	lsr.w	r2, r0, r1
 8000a48:	fa25 f101 	lsr.w	r1, r5, r1
 8000a4c:	409d      	lsls	r5, r3
 8000a4e:	432a      	orrs	r2, r5
 8000a50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a60:	0c11      	lsrs	r1, r2, #16
 8000a62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a66:	fb00 f50e 	mul.w	r5, r0, lr
 8000a6a:	428d      	cmp	r5, r1
 8000a6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x258>
 8000a72:	eb1c 0101 	adds.w	r1, ip, r1
 8000a76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a7a:	d22f      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000a7c:	428d      	cmp	r5, r1
 8000a7e:	d92d      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000a80:	3802      	subs	r0, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1b49      	subs	r1, r1, r5
 8000a86:	b292      	uxth	r2, r2
 8000a88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a94:	fb05 f10e 	mul.w	r1, r5, lr
 8000a98:	4291      	cmp	r1, r2
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x282>
 8000a9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa4:	d216      	bcs.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aa6:	4291      	cmp	r1, r2
 8000aa8:	d914      	bls.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aaa:	3d02      	subs	r5, #2
 8000aac:	4462      	add	r2, ip
 8000aae:	1a52      	subs	r2, r2, r1
 8000ab0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ab4:	e738      	b.n	8000928 <__udivmoddi4+0xfc>
 8000ab6:	4631      	mov	r1, r6
 8000ab8:	4630      	mov	r0, r6
 8000aba:	e708      	b.n	80008ce <__udivmoddi4+0xa2>
 8000abc:	4639      	mov	r1, r7
 8000abe:	e6e6      	b.n	800088e <__udivmoddi4+0x62>
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	e6fb      	b.n	80008bc <__udivmoddi4+0x90>
 8000ac4:	4548      	cmp	r0, r9
 8000ac6:	d2a9      	bcs.n	8000a1c <__udivmoddi4+0x1f0>
 8000ac8:	ebb9 0802 	subs.w	r8, r9, r2
 8000acc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	e7a3      	b.n	8000a1c <__udivmoddi4+0x1f0>
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	e7ea      	b.n	8000aae <__udivmoddi4+0x282>
 8000ad8:	462b      	mov	r3, r5
 8000ada:	e794      	b.n	8000a06 <__udivmoddi4+0x1da>
 8000adc:	4640      	mov	r0, r8
 8000ade:	e7d1      	b.n	8000a84 <__udivmoddi4+0x258>
 8000ae0:	46d0      	mov	r8, sl
 8000ae2:	e77b      	b.n	80009dc <__udivmoddi4+0x1b0>
 8000ae4:	3d02      	subs	r5, #2
 8000ae6:	4462      	add	r2, ip
 8000ae8:	e732      	b.n	8000950 <__udivmoddi4+0x124>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e70a      	b.n	8000904 <__udivmoddi4+0xd8>
 8000aee:	4464      	add	r4, ip
 8000af0:	3802      	subs	r0, #2
 8000af2:	e742      	b.n	800097a <__udivmoddi4+0x14e>

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b06:	4905      	ldr	r1, [pc, #20]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58000800 	.word	0x58000800

08000b20 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b44:	68fb      	ldr	r3, [r7, #12]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b72:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b8e:	f002 f96f 	bl	8002e70 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b92:	f002 f973 	bl	8002e7c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b9a:	f7ff ffad 	bl	8000af8 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b9e:	f008 f8b3 	bl	8008d08 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000ba2:	f000 f841 	bl	8000c28 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000ba6:	f000 f8ff 	bl	8000da8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000baa:	bf00      	nop
}
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <APPD_EnableCPU2+0x5c>)
 8000bb8:	881a      	ldrh	r2, [r3, #0]
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <APPD_EnableCPU2+0x60>)
 8000bbc:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <APPD_EnableCPU2+0x64>)
 8000bc0:	881a      	ldrh	r2, [r3, #0]
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <APPD_EnableCPU2+0x60>)
 8000bc4:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <APPD_EnableCPU2+0x68>)
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <APPD_EnableCPU2+0x60>)
 8000bcc:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <APPD_EnableCPU2+0x6c>)
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <APPD_EnableCPU2+0x60>)
 8000bd4:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <APPD_EnableCPU2+0x70>)
 8000bd8:	881a      	ldrh	r2, [r3, #0]
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <APPD_EnableCPU2+0x60>)
 8000bdc:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <APPD_EnableCPU2+0x74>)
 8000be0:	1d3c      	adds	r4, r7, #4
 8000be2:	461d      	mov	r5, r3
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bec:	c403      	stmia	r4!, {r0, r1}
 8000bee:	8022      	strh	r2, [r4, #0]
 8000bf0:	3402      	adds	r4, #2
 8000bf2:	0c13      	lsrs	r3, r2, #16
 8000bf4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bf6:	f007 ff9b 	bl	8008b30 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 fa2c 	bl	800805a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000c02:	bf00      	nop
}
 8000c04:	3720      	adds	r7, #32
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	200301e8 	.word	0x200301e8
 8000c14:	2000000a 	.word	0x2000000a
 8000c18:	2000000c 	.word	0x2000000c
 8000c1c:	2000000e 	.word	0x2000000e
 8000c20:	20000010 	.word	0x20000010
 8000c24:	0800caa0 	.word	0x0800caa0

08000c28 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = STBY_DebugGpioaPinList;
 8000c3c:	4b54      	ldr	r3, [pc, #336]	; (8000d90 <APPD_SetCPU2GpioConfig+0x168>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = STBY_DebugGpiobPinList;
 8000c42:	4b54      	ldr	r3, [pc, #336]	; (8000d94 <APPD_SetCPU2GpioConfig+0x16c>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = STBY_DebugGpiocPinList;
 8000c48:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <APPD_SetCPU2GpioConfig+0x170>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	833b      	strh	r3, [r7, #24]

  if(gpioa_pin_list == UINT16_MAX)
 8000c4e:	8bbb      	ldrh	r3, [r7, #28]
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d14b      	bne.n	8000cf0 <APPD_SetCPU2GpioConfig+0xc8>
  {
    gpioa_pin_list = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	83bb      	strh	r3, [r7, #28]
    gpiob_pin_list = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	837b      	strh	r3, [r7, #26]
    gpioc_pin_list = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	833b      	strh	r3, [r7, #24]

    for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	77fb      	strb	r3, [r7, #31]
 8000c68:	e036      	b.n	8000cd8 <APPD_SetCPU2GpioConfig+0xb0>
    {
      if( aGpioConfigList[local_loop].enable != 0)
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	4a4b      	ldr	r2, [pc, #300]	; (8000d9c <APPD_SetCPU2GpioConfig+0x174>)
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	799b      	ldrb	r3, [r3, #6]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d02c      	beq.n	8000cd2 <APPD_SetCPU2GpioConfig+0xaa>
      {
        switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c78:	7ffb      	ldrb	r3, [r7, #31]
 8000c7a:	4a48      	ldr	r2, [pc, #288]	; (8000d9c <APPD_SetCPU2GpioConfig+0x174>)
 8000c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c80:	4a47      	ldr	r2, [pc, #284]	; (8000da0 <APPD_SetCPU2GpioConfig+0x178>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d01b      	beq.n	8000cbe <APPD_SetCPU2GpioConfig+0x96>
 8000c86:	4a46      	ldr	r2, [pc, #280]	; (8000da0 <APPD_SetCPU2GpioConfig+0x178>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d821      	bhi.n	8000cd0 <APPD_SetCPU2GpioConfig+0xa8>
 8000c8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c90:	d003      	beq.n	8000c9a <APPD_SetCPU2GpioConfig+0x72>
 8000c92:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <APPD_SetCPU2GpioConfig+0x17c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d009      	beq.n	8000cac <APPD_SetCPU2GpioConfig+0x84>
            break;
          case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
            break;
          default:
            break;
 8000c98:	e01a      	b.n	8000cd0 <APPD_SetCPU2GpioConfig+0xa8>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c9a:	7ffb      	ldrb	r3, [r7, #31]
 8000c9c:	4a3f      	ldr	r2, [pc, #252]	; (8000d9c <APPD_SetCPU2GpioConfig+0x174>)
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	889a      	ldrh	r2, [r3, #4]
 8000ca4:	8bbb      	ldrh	r3, [r7, #28]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	83bb      	strh	r3, [r7, #28]
            break;
 8000caa:	e012      	b.n	8000cd2 <APPD_SetCPU2GpioConfig+0xaa>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000cac:	7ffb      	ldrb	r3, [r7, #31]
 8000cae:	4a3b      	ldr	r2, [pc, #236]	; (8000d9c <APPD_SetCPU2GpioConfig+0x174>)
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	889a      	ldrh	r2, [r3, #4]
 8000cb6:	8b7b      	ldrh	r3, [r7, #26]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	837b      	strh	r3, [r7, #26]
            break;
 8000cbc:	e009      	b.n	8000cd2 <APPD_SetCPU2GpioConfig+0xaa>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000cbe:	7ffb      	ldrb	r3, [r7, #31]
 8000cc0:	4a36      	ldr	r2, [pc, #216]	; (8000d9c <APPD_SetCPU2GpioConfig+0x174>)
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	889a      	ldrh	r2, [r3, #4]
 8000cc8:	8b3b      	ldrh	r3, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	833b      	strh	r3, [r7, #24]
            break;
 8000cce:	e000      	b.n	8000cd2 <APPD_SetCPU2GpioConfig+0xaa>
            break;
 8000cd0:	bf00      	nop
    for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000cd2:	7ffb      	ldrb	r3, [r7, #31]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	77fb      	strb	r3, [r7, #31]
 8000cd8:	7ffb      	ldrb	r3, [r7, #31]
 8000cda:	2b25      	cmp	r3, #37	; 0x25
 8000cdc:	d9c5      	bls.n	8000c6a <APPD_SetCPU2GpioConfig+0x42>
        }
      }
    }

    STBY_DebugGpioaPinList = gpioa_pin_list;
 8000cde:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <APPD_SetCPU2GpioConfig+0x168>)
 8000ce0:	8bbb      	ldrh	r3, [r7, #28]
 8000ce2:	8013      	strh	r3, [r2, #0]
    STBY_DebugGpiobPinList = gpiob_pin_list;
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <APPD_SetCPU2GpioConfig+0x16c>)
 8000ce6:	8b7b      	ldrh	r3, [r7, #26]
 8000ce8:	8013      	strh	r3, [r2, #0]
    STBY_DebugGpiocPinList = gpioc_pin_list;
 8000cea:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <APPD_SetCPU2GpioConfig+0x170>)
 8000cec:	8b3b      	ldrh	r3, [r7, #24]
 8000cee:	8013      	strh	r3, [r2, #0]
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000cfc:	8bbb      	ldrh	r3, [r7, #28]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d014      	beq.n	8000d2c <APPD_SetCPU2GpioConfig+0x104>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000d02:	8bbb      	ldrh	r3, [r7, #28]
 8000d04:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff ff0a 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff ff20 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f002 fd53 	bl	80037c4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000d1e:	8bbb      	ldrh	r3, [r7, #28]
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f002 feb4 	bl	8003a94 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000d2c:	8b7b      	ldrh	r3, [r7, #26]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d012      	beq.n	8000d58 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000d32:	8b7b      	ldrh	r3, [r7, #26]
 8000d34:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff fef2 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff ff08 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4619      	mov	r1, r3
 8000d46:	4817      	ldr	r0, [pc, #92]	; (8000da4 <APPD_SetCPU2GpioConfig+0x17c>)
 8000d48:	f002 fd3c 	bl	80037c4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000d4c:	8b7b      	ldrh	r3, [r7, #26]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <APPD_SetCPU2GpioConfig+0x17c>)
 8000d54:	f002 fe9e 	bl	8003a94 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000d58:	8b3b      	ldrh	r3, [r7, #24]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d013      	beq.n	8000d86 <APPD_SetCPU2GpioConfig+0x15e>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000d5e:	8b3b      	ldrh	r3, [r7, #24]
 8000d60:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	2004      	movs	r0, #4
 8000d64:	f7ff fedc 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d68:	2004      	movs	r0, #4
 8000d6a:	f7ff fef2 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <APPD_SetCPU2GpioConfig+0x178>)
 8000d74:	f002 fd26 	bl	80037c4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d78:	8b3b      	ldrh	r3, [r7, #24]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <APPD_SetCPU2GpioConfig+0x178>)
 8000d80:	f002 fe88 	bl	8003a94 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
}
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	2000000a 	.word	0x2000000a
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	0800e1b8 	.word	0x0800e1b8
 8000da0:	48000800 	.word	0x48000800
 8000da4:	48000400 	.word	0x48000400

08000da8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#else
  STBY_DtbGpioaPinList = 0;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <APPD_BleDtbCfg+0x1c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	801a      	strh	r2, [r3, #0]
  STBY_DtbGpiobPinList = 0;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <APPD_BleDtbCfg+0x20>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	801a      	strh	r2, [r3, #0]
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000db8:	bf00      	nop
}
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	2000000e 	.word	0x2000000e
 8000dc8:	20000010 	.word	0x20000010

08000dcc <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
#ifdef CFG_DEBUG_TRACE_UART
if (CFG_DEBUG_TRACE_UART == hw_lpuart1)
{
#if(CFG_HW_LPUART1_ENABLED == 1)
    MX_LPUART1_UART_Init();
 8000dd0:	f001 fbf0 	bl	80025b4 <MX_LPUART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000dd4:	bf00      	nop
}
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	460b      	mov	r3, r1
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000de6:	897a      	ldrh	r2, [r7, #10]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	2002      	movs	r0, #2
 8000dee:	f001 fa99 	bl	8002324 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000df2:	bf00      	nop
}
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <LL_C2_PWR_SetPowerMode+0x28>)
 8000e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e0a:	f023 0207 	bic.w	r2, r3, #7
 8000e0e:	4905      	ldr	r1, [pc, #20]	; (8000e24 <LL_C2_PWR_SetPowerMode+0x28>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	58000400 	.word	0x58000400

08000e28 <LL_EXTI_EnableIT_32_63>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <LL_EXTI_EnableIT_32_63+0x24>)
 8000e32:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e36:	4905      	ldr	r1, [pc, #20]	; (8000e4c <LL_EXTI_EnableIT_32_63+0x24>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	58000800 	.word	0x58000800

08000e50 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000e5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e6a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e76:	4313      	orrs	r3, r2
 8000e78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	cafecafe 	.word	0xcafecafe

08000e8c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	608b      	str	r3, [r1, #8]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f0c:	d101      	bne.n	8000f12 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f32:	d101      	bne.n	8000f38 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_AHB3_GRP1_EnableClock>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f68:	68fb      	ldr	r3, [r7, #12]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <LL_DBGMCU_GetDeviceID+0x18>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e0042000 	.word	0xe0042000

08000f94 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <LL_DBGMCU_GetRevisionID+0x18>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	0c1b      	lsrs	r3, r3, #16
 8000f9e:	b29b      	uxth	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e0042000 	.word	0xe0042000

08000fb0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	605a      	str	r2, [r3, #4]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	041b      	lsls	r3, r3, #16
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	615a      	str	r2, [r3, #20]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	695a      	ldr	r2, [r3, #20]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	615a      	str	r2, [r3, #20]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	609a      	str	r2, [r3, #8]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	619a      	str	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	22ca      	movs	r2, #202	; 0xca
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2253      	movs	r2, #83	; 0x53
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f023 0207 	bic.w	r2, r3, #7
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <MX_APPE_Config+0x18>)
 80010da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010de:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80010e0:	f000 f826 	bl	8001130 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80010e4:	f000 f866 	bl	80011b4 <Config_HSE>

  return;
 80010e8:	bf00      	nop
}
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58004000 	.word	0x58004000

080010f0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80010f4:	f000 f872 	bl	80011dc <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010f8:	f000 f88a 	bl	8001210 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <MX_APPE_Init+0x20>)
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 ff1e 	bl	8001f40 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001104:	f7ff fd41 	bl	8000b8a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001108:	f000 f892 	bl	8001230 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800110c:	bf00      	nop
}
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200002d8 	.word	0x200002d8

08001114 <Init_Smps>:

void Init_Smps(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001118:	bf00      	nop
}
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <Init_Exti>:

void Init_Exti(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001126:	2050      	movs	r0, #80	; 0x50
 8001128:	f7ff fe7e 	bl	8000e28 <LL_EXTI_EnableIT_32_63>

  return;
 800112c:	bf00      	nop
}
 800112e:	bd80      	pop	{r7, pc}

08001130 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001134:	f000 f804 	bl	8001140 <Reset_BackupDomain>

  Reset_IPCC();
 8001138:	f000 f81a 	bl	8001170 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800113c:	bf00      	nop
}
 800113e:	bd80      	pop	{r7, pc}

08001140 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001144:	f7ff fed8 	bl	8000ef8 <LL_RCC_IsActiveFlag_PINRST>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00d      	beq.n	800116a <Reset_BackupDomain+0x2a>
 800114e:	f7ff fee6 	bl	8000f1e <LL_RCC_IsActiveFlag_SFTRST>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d108      	bne.n	800116a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001158:	f002 fd90 	bl	8003c7c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800115c:	f002 fd8e 	bl	8003c7c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001160:	f7ff fea8 	bl	8000eb4 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001164:	f7ff feb7 	bl	8000ed6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001168:	bf00      	nop
 800116a:	bf00      	nop
}
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001174:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001178:	f7ff fee4 	bl	8000f44 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800117c:	213f      	movs	r1, #63	; 0x3f
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <Reset_IPCC+0x40>)
 8001180:	f7ff ff5c 	bl	800103c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001184:	213f      	movs	r1, #63	; 0x3f
 8001186:	480a      	ldr	r0, [pc, #40]	; (80011b0 <Reset_IPCC+0x40>)
 8001188:	f7ff ff66 	bl	8001058 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800118c:	213f      	movs	r1, #63	; 0x3f
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <Reset_IPCC+0x40>)
 8001190:	f7ff ff0e 	bl	8000fb0 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001194:	213f      	movs	r1, #63	; 0x3f
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <Reset_IPCC+0x40>)
 8001198:	f7ff ff2d 	bl	8000ff6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800119c:	213f      	movs	r1, #63	; 0x3f
 800119e:	4804      	ldr	r0, [pc, #16]	; (80011b0 <Reset_IPCC+0x40>)
 80011a0:	f7ff ff18 	bl	8000fd4 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80011a4:	213f      	movs	r1, #63	; 0x3f
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <Reset_IPCC+0x40>)
 80011a8:	f7ff ff37 	bl	800101a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80011ac:	bf00      	nop
}
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	58000c00 	.word	0x58000c00

080011b4 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f007 fe22 	bl	8008e04 <OTP_Read>
 80011c0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe3f 	bl	8000e50 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
}
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <System_Init>:

static void System_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  Init_Smps();
 80011e0:	f7ff ff98 	bl	8001114 <Init_Smps>

  Init_Exti();
 80011e4:	f7ff ff9d 	bl	8001122 <Init_Exti>

  Init_Rtc();
 80011e8:	f000 f802 	bl	80011f0 <Init_Rtc>

  return;
 80011ec:	bf00      	nop
}
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <Init_Rtc+0x1c>)
 80011f6:	f7ff ff4a 	bl	800108e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80011fa:	2100      	movs	r1, #0
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <Init_Rtc+0x1c>)
 80011fe:	f7ff ff56 	bl	80010ae <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <Init_Rtc+0x1c>)
 8001204:	f7ff ff36 	bl	8001074 <LL_RTC_EnableWriteProtection>

  return;
 8001208:	bf00      	nop
}
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40002800 	.word	0x40002800

08001210 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001214:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001218:	f7ff fe38 	bl	8000e8c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800121c:	f00a f9b2 	bl	800b584 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001220:	2004      	movs	r0, #4
 8001222:	f7ff fdeb 	bl	8000dfc <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8001226:	f002 fd49 	bl	8003cbc <HAL_PWREx_EnableSRAMRetention>

  return;
 800122a:	bf00      	nop
}
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8001236:	f007 fac5 	bl	80087c4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <appe_Tl_Init+0x50>)
 800123c:	2100      	movs	r1, #0
 800123e:	2008      	movs	r0, #8
 8001240:	f00a fade 	bl	800b800 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <appe_Tl_Init+0x54>)
 8001246:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <appe_Tl_Init+0x58>)
 800124a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <appe_Tl_Init+0x5c>)
 8001252:	f007 f979 	bl	8008548 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <appe_Tl_Init+0x60>)
 8001258:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <appe_Tl_Init+0x64>)
 800125c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <appe_Tl_Init+0x68>)
 8001260:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001262:	f240 533c 	movw	r3, #1340	; 0x53c
 8001266:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4618      	mov	r0, r3
 800126e:	f007 fbeb 	bl	8008a48 <TL_MM_Init>

  TL_Enable();
 8001272:	f007 faa1 	bl	80087b8 <TL_Enable>

  return;
 8001276:	bf00      	nop
}
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	08008581 	.word	0x08008581
 8001284:	20030734 	.word	0x20030734
 8001288:	0800129d 	.word	0x0800129d
 800128c:	080012b5 	.word	0x080012b5
 8001290:	2003094c 	.word	0x2003094c
 8001294:	20030840 	.word	0x20030840
 8001298:	200301f8 	.word	0x200301f8

0800129c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80012a6:	bf00      	nop
}
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	330b      	adds	r3, #11
 80012c2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80012ce:	2b07      	cmp	r3, #7
 80012d0:	f200 80d0 	bhi.w	8001474 <APPE_SysUserEvtRx+0x1c0>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <APPE_SysUserEvtRx+0x28>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012fd 	.word	0x080012fd
 80012e0:	0800138f 	.word	0x0800138f
 80012e4:	080013b1 	.word	0x080013b1
 80012e8:	08001475 	.word	0x08001475
 80012ec:	080013f5 	.word	0x080013f5
 80012f0:	08001419 	.word	0x08001419
 80012f4:	08001435 	.word	0x08001435
 80012f8:	08001459 	.word	0x08001459
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	f006 fed7 	bl	80080b4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001306:	485e      	ldr	r0, [pc, #376]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 8001308:	f007 fc9e 	bl	8008c48 <DbgTraceGetFileName>
 800130c:	4601      	mov	r1, r0
 800130e:	f240 136f 	movw	r3, #367	; 0x16f
 8001312:	4a5c      	ldr	r2, [pc, #368]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 8001314:	485c      	ldr	r0, [pc, #368]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 8001316:	f00a fc77 	bl	800bc08 <iprintf>
 800131a:	7b3b      	ldrb	r3, [r7, #12]
 800131c:	4619      	mov	r1, r3
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	461a      	mov	r2, r3
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	4859      	ldr	r0, [pc, #356]	; (800148c <APPE_SysUserEvtRx+0x1d8>)
 8001326:	f00a fc6f 	bl	800bc08 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800132a:	4855      	ldr	r0, [pc, #340]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 800132c:	f007 fc8c 	bl	8008c48 <DbgTraceGetFileName>
 8001330:	4601      	mov	r1, r0
 8001332:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001336:	4a53      	ldr	r2, [pc, #332]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 8001338:	4853      	ldr	r0, [pc, #332]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 800133a:	f00a fc65 	bl	800bc08 <iprintf>
 800133e:	7c3b      	ldrb	r3, [r7, #16]
 8001340:	4619      	mov	r1, r3
 8001342:	4853      	ldr	r0, [pc, #332]	; (8001490 <APPE_SysUserEvtRx+0x1dc>)
 8001344:	f00a fc60 	bl	800bc08 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001348:	484d      	ldr	r0, [pc, #308]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 800134a:	f007 fc7d 	bl	8008c48 <DbgTraceGetFileName>
 800134e:	4601      	mov	r1, r0
 8001350:	f240 1371 	movw	r3, #369	; 0x171
 8001354:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 8001356:	484c      	ldr	r0, [pc, #304]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 8001358:	f00a fc56 	bl	800bc08 <iprintf>
 800135c:	7dbb      	ldrb	r3, [r7, #22]
 800135e:	4619      	mov	r1, r3
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	461a      	mov	r2, r3
 8001364:	7e3b      	ldrb	r3, [r7, #24]
 8001366:	484b      	ldr	r0, [pc, #300]	; (8001494 <APPE_SysUserEvtRx+0x1e0>)
 8001368:	f00a fc4e 	bl	800bc08 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800136c:	4844      	ldr	r0, [pc, #272]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 800136e:	f007 fc6b 	bl	8008c48 <DbgTraceGetFileName>
 8001372:	4601      	mov	r1, r0
 8001374:	f240 1373 	movw	r3, #371	; 0x173
 8001378:	4a42      	ldr	r2, [pc, #264]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 800137a:	4843      	ldr	r0, [pc, #268]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 800137c:	f00a fc44 	bl	800bc08 <iprintf>
 8001380:	4845      	ldr	r0, [pc, #276]	; (8001498 <APPE_SysUserEvtRx+0x1e4>)
 8001382:	f00a fc41 	bl	800bc08 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f8e0 	bl	800154c <APPE_SysEvtReadyProcessing>
    break;
 800138c:	e073      	b.n	8001476 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800138e:	483c      	ldr	r0, [pc, #240]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 8001390:	f007 fc5a 	bl	8008c48 <DbgTraceGetFileName>
 8001394:	4601      	mov	r1, r0
 8001396:	f44f 73bc 	mov.w	r3, #376	; 0x178
 800139a:	4a3a      	ldr	r2, [pc, #232]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 800139c:	483a      	ldr	r0, [pc, #232]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 800139e:	f00a fc33 	bl	800bc08 <iprintf>
 80013a2:	483e      	ldr	r0, [pc, #248]	; (800149c <APPE_SysUserEvtRx+0x1e8>)
 80013a4:	f00a fc30 	bl	800bc08 <iprintf>
    APPE_SysEvtError(pPayload);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f885 	bl	80014b8 <APPE_SysEvtError>
    break;
 80013ae:	e062      	b.n	8001476 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80013b0:	4833      	ldr	r0, [pc, #204]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 80013b2:	f007 fc49 	bl	8008c48 <DbgTraceGetFileName>
 80013b6:	4601      	mov	r1, r0
 80013b8:	f240 137d 	movw	r3, #381	; 0x17d
 80013bc:	4a31      	ldr	r2, [pc, #196]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 80013be:	4832      	ldr	r0, [pc, #200]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 80013c0:	f00a fc22 	bl	800bc08 <iprintf>
 80013c4:	4836      	ldr	r0, [pc, #216]	; (80014a0 <APPE_SysUserEvtRx+0x1ec>)
 80013c6:	f00a fc8d 	bl	800bce4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80013ca:	482d      	ldr	r0, [pc, #180]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 80013cc:	f007 fc3c 	bl	8008c48 <DbgTraceGetFileName>
 80013d0:	4601      	mov	r1, r0
 80013d2:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 80013d6:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 80013d8:	482b      	ldr	r0, [pc, #172]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 80013da:	f00a fc15 	bl	800bc08 <iprintf>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3302      	adds	r3, #2
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3302      	adds	r3, #2
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	461a      	mov	r2, r3
 80013ec:	482d      	ldr	r0, [pc, #180]	; (80014a4 <APPE_SysUserEvtRx+0x1f0>)
 80013ee:	f00a fc0b 	bl	800bc08 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80013f2:	e040      	b.n	8001476 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80013f4:	4822      	ldr	r0, [pc, #136]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 80013f6:	f007 fc27 	bl	8008c48 <DbgTraceGetFileName>
 80013fa:	4601      	mov	r1, r0
 80013fc:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8001400:	4a20      	ldr	r2, [pc, #128]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 8001402:	4821      	ldr	r0, [pc, #132]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 8001404:	f00a fc00 	bl	800bc08 <iprintf>
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	3302      	adds	r3, #2
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4619      	mov	r1, r3
 8001410:	4825      	ldr	r0, [pc, #148]	; (80014a8 <APPE_SysUserEvtRx+0x1f4>)
 8001412:	f00a fbf9 	bl	800bc08 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001416:	e02e      	b.n	8001476 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 800141a:	f007 fc15 	bl	8008c48 <DbgTraceGetFileName>
 800141e:	4601      	mov	r1, r0
 8001420:	f240 1389 	movw	r3, #393	; 0x189
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 8001428:	f00a fbee 	bl	800bc08 <iprintf>
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <APPE_SysUserEvtRx+0x1f8>)
 800142e:	f00a fbeb 	bl	800bc08 <iprintf>
    break;
 8001432:	e020      	b.n	8001476 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001434:	4812      	ldr	r0, [pc, #72]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 8001436:	f007 fc07 	bl	8008c48 <DbgTraceGetFileName>
 800143a:	4601      	mov	r1, r0
 800143c:	f240 138d 	movw	r3, #397	; 0x18d
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 8001444:	f00a fbe0 	bl	800bc08 <iprintf>
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	3302      	adds	r3, #2
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	4817      	ldr	r0, [pc, #92]	; (80014b0 <APPE_SysUserEvtRx+0x1fc>)
 8001452:	f00a fbd9 	bl	800bc08 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001456:	e00e      	b.n	8001476 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <APPE_SysUserEvtRx+0x1cc>)
 800145a:	f007 fbf5 	bl	8008c48 <DbgTraceGetFileName>
 800145e:	4601      	mov	r1, r0
 8001460:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <APPE_SysUserEvtRx+0x1d0>)
 8001466:	4808      	ldr	r0, [pc, #32]	; (8001488 <APPE_SysUserEvtRx+0x1d4>)
 8001468:	f00a fbce 	bl	800bc08 <iprintf>
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <APPE_SysUserEvtRx+0x200>)
 800146e:	f00a fbcb 	bl	800bc08 <iprintf>
    break;
 8001472:	e000      	b.n	8001476 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001474:	bf00      	nop
  }

  return;
 8001476:	bf00      	nop
}
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800cabc 	.word	0x0800cabc
 8001484:	0800e2e8 	.word	0x0800e2e8
 8001488:	0800cad4 	.word	0x0800cad4
 800148c:	0800cae8 	.word	0x0800cae8
 8001490:	0800cb0c 	.word	0x0800cb0c
 8001494:	0800cb28 	.word	0x0800cb28
 8001498:	0800cb40 	.word	0x0800cb40
 800149c:	0800cb60 	.word	0x0800cb60
 80014a0:	0800cb84 	.word	0x0800cb84
 80014a4:	0800cbd4 	.word	0x0800cbd4
 80014a8:	0800cbfc 	.word	0x0800cbfc
 80014ac:	0800cc38 	.word	0x0800cc38
 80014b0:	0800cc5c 	.word	0x0800cc5c
 80014b4:	0800cc98 	.word	0x0800cc98

080014b8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	330b      	adds	r3, #11
 80014c6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3302      	adds	r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80014ce:	4819      	ldr	r0, [pc, #100]	; (8001534 <APPE_SysEvtError+0x7c>)
 80014d0:	f007 fbba 	bl	8008c48 <DbgTraceGetFileName>
 80014d4:	4601      	mov	r1, r0
 80014d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <APPE_SysEvtError+0x80>)
 80014dc:	4817      	ldr	r0, [pc, #92]	; (800153c <APPE_SysEvtError+0x84>)
 80014de:	f00a fb93 	bl	800bc08 <iprintf>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4815      	ldr	r0, [pc, #84]	; (8001540 <APPE_SysEvtError+0x88>)
 80014ea:	f00a fb8d 	bl	800bc08 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10d      	bne.n	8001512 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80014f6:	480f      	ldr	r0, [pc, #60]	; (8001534 <APPE_SysEvtError+0x7c>)
 80014f8:	f007 fba6 	bl	8008c48 <DbgTraceGetFileName>
 80014fc:	4601      	mov	r1, r0
 80014fe:	f240 13af 	movw	r3, #431	; 0x1af
 8001502:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <APPE_SysEvtError+0x80>)
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <APPE_SysEvtError+0x84>)
 8001506:	f00a fb7f 	bl	800bc08 <iprintf>
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <APPE_SysEvtError+0x8c>)
 800150c:	f00a fbea 	bl	800bce4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001510:	e00d      	b.n	800152e <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <APPE_SysEvtError+0x7c>)
 8001514:	f007 fb98 	bl	8008c48 <DbgTraceGetFileName>
 8001518:	4601      	mov	r1, r0
 800151a:	f240 13b3 	movw	r3, #435	; 0x1b3
 800151e:	4a06      	ldr	r2, [pc, #24]	; (8001538 <APPE_SysEvtError+0x80>)
 8001520:	4806      	ldr	r0, [pc, #24]	; (800153c <APPE_SysEvtError+0x84>)
 8001522:	f00a fb71 	bl	800bc08 <iprintf>
 8001526:	4808      	ldr	r0, [pc, #32]	; (8001548 <APPE_SysEvtError+0x90>)
 8001528:	f00a fbdc 	bl	800bce4 <puts>
  return;
 800152c:	bf00      	nop
}
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	0800cabc 	.word	0x0800cabc
 8001538:	0800e2fc 	.word	0x0800e2fc
 800153c:	0800cad4 	.word	0x0800cad4
 8001540:	0800ccbc 	.word	0x0800ccbc
 8001544:	0800ccec 	.word	0x0800ccec
 8001548:	0800cd28 	.word	0x0800cd28

0800154c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	330b      	adds	r3, #11
 8001570:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3302      	adds	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d146      	bne.n	800160e <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001580:	4836      	ldr	r0, [pc, #216]	; (800165c <APPE_SysEvtReadyProcessing+0x110>)
 8001582:	f007 fb61 	bl	8008c48 <DbgTraceGetFileName>
 8001586:	4601      	mov	r1, r0
 8001588:	f240 13c9 	movw	r3, #457	; 0x1c9
 800158c:	4a34      	ldr	r2, [pc, #208]	; (8001660 <APPE_SysEvtReadyProcessing+0x114>)
 800158e:	4835      	ldr	r0, [pc, #212]	; (8001664 <APPE_SysEvtReadyProcessing+0x118>)
 8001590:	f00a fb3a 	bl	800bc08 <iprintf>
 8001594:	4834      	ldr	r0, [pc, #208]	; (8001668 <APPE_SysEvtReadyProcessing+0x11c>)
 8001596:	f00a fba5 	bl	800bce4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800159a:	f7ff fb09 	bl	8000bb0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800159e:	230f      	movs	r3, #15
 80015a0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80015a2:	237f      	movs	r3, #127	; 0x7f
 80015a4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80015a6:	f7ff fcf5 	bl	8000f94 <LL_DBGMCU_GetRevisionID>
 80015aa:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80015ac:	482b      	ldr	r0, [pc, #172]	; (800165c <APPE_SysEvtReadyProcessing+0x110>)
 80015ae:	f007 fb4b 	bl	8008c48 <DbgTraceGetFileName>
 80015b2:	4601      	mov	r1, r0
 80015b4:	f240 13e1 	movw	r3, #481	; 0x1e1
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <APPE_SysEvtReadyProcessing+0x114>)
 80015ba:	482a      	ldr	r0, [pc, #168]	; (8001664 <APPE_SysEvtReadyProcessing+0x118>)
 80015bc:	f00a fb24 	bl	800bc08 <iprintf>
 80015c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c2:	482a      	ldr	r0, [pc, #168]	; (800166c <APPE_SysEvtReadyProcessing+0x120>)
 80015c4:	f00a fb20 	bl	800bc08 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80015ce:	f7ff fcd3 	bl	8000f78 <LL_DBGMCU_GetDeviceID>
 80015d2:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80015d4:	4821      	ldr	r0, [pc, #132]	; (800165c <APPE_SysEvtReadyProcessing+0x110>)
 80015d6:	f007 fb37 	bl	8008c48 <DbgTraceGetFileName>
 80015da:	4601      	mov	r1, r0
 80015dc:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 80015e0:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <APPE_SysEvtReadyProcessing+0x114>)
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <APPE_SysEvtReadyProcessing+0x118>)
 80015e4:	f00a fb10 	bl	800bc08 <iprintf>
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	4821      	ldr	r0, [pc, #132]	; (8001670 <APPE_SysEvtReadyProcessing+0x124>)
 80015ec:	f00a fb0c 	bl	800bc08 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 fd44 	bl	8008088 <SHCI_C2_Config>

    APP_BLE_Init();
 8001600:	f008 f90c 	bl	800981c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001604:	2100      	movs	r1, #0
 8001606:	2001      	movs	r0, #1
 8001608:	f009 ffce 	bl	800b5a8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800160c:	e022      	b.n	8001654 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d110      	bne.n	8001638 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001616:	4811      	ldr	r0, [pc, #68]	; (800165c <APPE_SysEvtReadyProcessing+0x110>)
 8001618:	f007 fb16 	bl	8008c48 <DbgTraceGetFileName>
 800161c:	4601      	mov	r1, r0
 800161e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001622:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <APPE_SysEvtReadyProcessing+0x114>)
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <APPE_SysEvtReadyProcessing+0x118>)
 8001626:	f00a faef 	bl	800bc08 <iprintf>
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <APPE_SysEvtReadyProcessing+0x128>)
 800162c:	f00a faec 	bl	800bc08 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
  return;
 8001636:	e00d      	b.n	8001654 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <APPE_SysEvtReadyProcessing+0x110>)
 800163a:	f007 fb05 	bl	8008c48 <DbgTraceGetFileName>
 800163e:	4601      	mov	r1, r0
 8001640:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <APPE_SysEvtReadyProcessing+0x114>)
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <APPE_SysEvtReadyProcessing+0x118>)
 8001648:	f00a fade 	bl	800bc08 <iprintf>
 800164c:	480a      	ldr	r0, [pc, #40]	; (8001678 <APPE_SysEvtReadyProcessing+0x12c>)
 800164e:	f00a fadb 	bl	800bc08 <iprintf>
  return;
 8001652:	bf00      	nop
}
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	0800cabc 	.word	0x0800cabc
 8001660:	0800e310 	.word	0x0800e310
 8001664:	0800cad4 	.word	0x0800cad4
 8001668:	0800cd60 	.word	0x0800cd60
 800166c:	0800cd7c 	.word	0x0800cd7c
 8001670:	0800cda0 	.word	0x0800cda0
 8001674:	0800cdc0 	.word	0x0800cdc0
 8001678:	0800cdf4 	.word	0x0800cdf4

0800167c <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f009 ffc0 	bl	800b608 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001690:	bf00      	nop
}
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f009 ffae 	bl	800b608 <UTIL_SEQ_Run>
  return;
 80016ac:	bf00      	nop
}
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80016bc:	2100      	movs	r1, #0
 80016be:	2008      	movs	r0, #8
 80016c0:	f00a f8c0 	bl	800b844 <UTIL_SEQ_SetTask>
  return;
 80016c4:	bf00      	nop
}
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016d4:	2002      	movs	r0, #2
 80016d6:	f00a f921 	bl	800b91c <UTIL_SEQ_SetEvt>
  return;
 80016da:	bf00      	nop
}
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016ea:	2002      	movs	r0, #2
 80016ec:	f00a f936 	bl	800b95c <UTIL_SEQ_WaitEvt>
  return;
 80016f0:	bf00      	nop
}
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	2b10      	cmp	r3, #16
 8001706:	d102      	bne.n	800170e <HAL_GPIO_EXTI_Callback+0x16>
  {
    case SW1_User_Pin:
      APP_BLE_Key_Button1_Action();
 8001708:	f008 ff92 	bl	800a630 <APP_BLE_Key_Button1_Action>
//      HAL_GPIO_TogglePin (Blue_LED_GPIO_Port, Blue_LED_Pin);
      break;
 800170c:	e000      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x18>
    default:
      break;
 800170e:	bf00      	nop
  }
  return;
 8001710:	bf00      	nop
}
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <LL_EXTI_EnableIT_0_31>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <LL_EXTI_EnableIT_0_31+0x24>)
 8001722:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001726:	4905      	ldr	r1, [pc, #20]	; (800173c <LL_EXTI_EnableIT_0_31+0x24>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4313      	orrs	r3, r2
 800172c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	58000800 	.word	0x58000800

08001740 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4904      	ldr	r1, [pc, #16]	; (8001760 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]

}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	58000800 	.word	0x58000800

08001764 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <ReadRtcSsrValue+0x3c>)
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	b29b      	uxth	r3, r3
 8001770:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <ReadRtcSsrValue+0x3c>)
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	b29b      	uxth	r3, r3
 8001778:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800177a:	e005      	b.n	8001788 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <ReadRtcSsrValue+0x3c>)
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	b29b      	uxth	r3, r3
 8001786:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d1f5      	bne.n	800177c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001790:	683b      	ldr	r3, [r7, #0]
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40002800 	.word	0x40002800

080017a4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80017b4:	79ba      	ldrb	r2, [r7, #6]
 80017b6:	491d      	ldr	r1, [pc, #116]	; (800182c <LinkTimerAfter+0x88>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3315      	adds	r3, #21
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d009      	beq.n	80017e2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	4916      	ldr	r1, [pc, #88]	; (800182c <LinkTimerAfter+0x88>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	3314      	adds	r3, #20
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	4911      	ldr	r1, [pc, #68]	; (800182c <LinkTimerAfter+0x88>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3315      	adds	r3, #21
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <LinkTimerAfter+0x88>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	3314      	adds	r3, #20
 8001806:	79ba      	ldrb	r2, [r7, #6]
 8001808:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800180a:	79ba      	ldrb	r2, [r7, #6]
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <LinkTimerAfter+0x88>)
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3315      	adds	r3, #21
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	701a      	strb	r2, [r3, #0]

  return;
 800181e:	bf00      	nop
}
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000104 	.word	0x20000104

08001830 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <LinkTimerBefore+0xb8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	79ba      	ldrb	r2, [r7, #6]
 8001848:	429a      	cmp	r2, r3
 800184a:	d032      	beq.n	80018b2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800184c:	79ba      	ldrb	r2, [r7, #6]
 800184e:	4927      	ldr	r1, [pc, #156]	; (80018ec <LinkTimerBefore+0xbc>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3314      	adds	r3, #20
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	4922      	ldr	r1, [pc, #136]	; (80018ec <LinkTimerBefore+0xbc>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3315      	adds	r3, #21
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001874:	79fa      	ldrb	r2, [r7, #7]
 8001876:	491d      	ldr	r1, [pc, #116]	; (80018ec <LinkTimerBefore+0xbc>)
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3315      	adds	r3, #21
 8001884:	79ba      	ldrb	r2, [r7, #6]
 8001886:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001888:	79fa      	ldrb	r2, [r7, #7]
 800188a:	4918      	ldr	r1, [pc, #96]	; (80018ec <LinkTimerBefore+0xbc>)
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	3314      	adds	r3, #20
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800189c:	79ba      	ldrb	r2, [r7, #6]
 800189e:	4913      	ldr	r1, [pc, #76]	; (80018ec <LinkTimerBefore+0xbc>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3314      	adds	r3, #20
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80018b0:	e014      	b.n	80018dc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80018b2:	79fa      	ldrb	r2, [r7, #7]
 80018b4:	490d      	ldr	r1, [pc, #52]	; (80018ec <LinkTimerBefore+0xbc>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3315      	adds	r3, #21
 80018c2:	79ba      	ldrb	r2, [r7, #6]
 80018c4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018c6:	79ba      	ldrb	r2, [r7, #6]
 80018c8:	4908      	ldr	r1, [pc, #32]	; (80018ec <LinkTimerBefore+0xbc>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	3314      	adds	r3, #20
 80018d6:	79fa      	ldrb	r2, [r7, #7]
 80018d8:	701a      	strb	r2, [r3, #0]
  return;
 80018da:	bf00      	nop
}
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000194 	.word	0x20000194
 80018ec:	20000104 	.word	0x20000104

080018f0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018fa:	4b4e      	ldr	r3, [pc, #312]	; (8001a34 <linkTimer+0x144>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b06      	cmp	r3, #6
 8001902:	d118      	bne.n	8001936 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001904:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <linkTimer+0x144>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <linkTimer+0x148>)
 800190c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800190e:	4a49      	ldr	r2, [pc, #292]	; (8001a34 <linkTimer+0x144>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	4949      	ldr	r1, [pc, #292]	; (8001a3c <linkTimer+0x14c>)
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	3315      	adds	r3, #21
 8001924:	2206      	movs	r2, #6
 8001926:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <linkTimer+0x150>)
 800192a:	f04f 32ff 	mov.w	r2, #4294967295
 800192e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	81fb      	strh	r3, [r7, #14]
 8001934:	e078      	b.n	8001a28 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001936:	f000 f909 	bl	8001b4c <ReturnTimeElapsed>
 800193a:	4603      	mov	r3, r0
 800193c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	493e      	ldr	r1, [pc, #248]	; (8001a3c <linkTimer+0x14c>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3308      	adds	r3, #8
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	4419      	add	r1, r3
 8001956:	4839      	ldr	r0, [pc, #228]	; (8001a3c <linkTimer+0x14c>)
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4403      	add	r3, r0
 8001962:	3308      	adds	r3, #8
 8001964:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001966:	79fa      	ldrb	r2, [r7, #7]
 8001968:	4934      	ldr	r1, [pc, #208]	; (8001a3c <linkTimer+0x14c>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	3308      	adds	r3, #8
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800197a:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <linkTimer+0x144>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4619      	mov	r1, r3
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <linkTimer+0x14c>)
 8001984:	460b      	mov	r3, r1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	440b      	add	r3, r1
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	3308      	adds	r3, #8
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	429a      	cmp	r2, r3
 8001996:	d337      	bcc.n	8001a08 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <linkTimer+0x144>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800199e:	7b7a      	ldrb	r2, [r7, #13]
 80019a0:	4926      	ldr	r1, [pc, #152]	; (8001a3c <linkTimer+0x14c>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3315      	adds	r3, #21
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80019b2:	e013      	b.n	80019dc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80019b4:	7b7a      	ldrb	r2, [r7, #13]
 80019b6:	4921      	ldr	r1, [pc, #132]	; (8001a3c <linkTimer+0x14c>)
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	3315      	adds	r3, #21
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80019c8:	7b7a      	ldrb	r2, [r7, #13]
 80019ca:	491c      	ldr	r1, [pc, #112]	; (8001a3c <linkTimer+0x14c>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	3315      	adds	r3, #21
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80019dc:	7b3b      	ldrb	r3, [r7, #12]
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d00b      	beq.n	80019fa <linkTimer+0x10a>
 80019e2:	7b3a      	ldrb	r2, [r7, #12]
 80019e4:	4915      	ldr	r1, [pc, #84]	; (8001a3c <linkTimer+0x14c>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d2dc      	bcs.n	80019b4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80019fa:	7b7a      	ldrb	r2, [r7, #13]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fecf 	bl	80017a4 <LinkTimerAfter>
 8001a06:	e00f      	b.n	8001a28 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <linkTimer+0x144>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff0c 	bl	8001830 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <linkTimer+0x144>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <linkTimer+0x148>)
 8001a20:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <linkTimer+0x144>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001a28:	89fb      	ldrh	r3, [r7, #14]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000194 	.word	0x20000194
 8001a38:	20000195 	.word	0x20000195
 8001a3c:	20000104 	.word	0x20000104
 8001a40:	20000198 	.word	0x20000198

08001a44 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	71fb      	strb	r3, [r7, #7]
 8001a50:	4613      	mov	r3, r2
 8001a52:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001a54:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <UnlinkTimer+0xf8>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d111      	bne.n	8001a84 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <UnlinkTimer+0xf8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <UnlinkTimer+0xfc>)
 8001a68:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	4935      	ldr	r1, [pc, #212]	; (8001b44 <UnlinkTimer+0x100>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3315      	adds	r3, #21
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <UnlinkTimer+0xf8>)
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	e03e      	b.n	8001b02 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	492f      	ldr	r1, [pc, #188]	; (8001b44 <UnlinkTimer+0x100>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3314      	adds	r3, #20
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001a98:	79fa      	ldrb	r2, [r7, #7]
 8001a9a:	492a      	ldr	r1, [pc, #168]	; (8001b44 <UnlinkTimer+0x100>)
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3315      	adds	r3, #21
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001aac:	79f9      	ldrb	r1, [r7, #7]
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	4824      	ldr	r0, [pc, #144]	; (8001b44 <UnlinkTimer+0x100>)
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	440b      	add	r3, r1
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4403      	add	r3, r0
 8001abc:	3315      	adds	r3, #21
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2d8      	uxtb	r0, r3
 8001ac2:	4920      	ldr	r1, [pc, #128]	; (8001b44 <UnlinkTimer+0x100>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	3315      	adds	r3, #21
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ad4:	7bbb      	ldrb	r3, [r7, #14]
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d013      	beq.n	8001b02 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001ada:	79f9      	ldrb	r1, [r7, #7]
 8001adc:	7bba      	ldrb	r2, [r7, #14]
 8001ade:	4819      	ldr	r0, [pc, #100]	; (8001b44 <UnlinkTimer+0x100>)
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4403      	add	r3, r0
 8001aea:	3314      	adds	r3, #20
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b2d8      	uxtb	r0, r3
 8001af0:	4914      	ldr	r1, [pc, #80]	; (8001b44 <UnlinkTimer+0x100>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	3314      	adds	r3, #20
 8001afe:	4602      	mov	r2, r0
 8001b00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001b02:	79fa      	ldrb	r2, [r7, #7]
 8001b04:	490f      	ldr	r1, [pc, #60]	; (8001b44 <UnlinkTimer+0x100>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	330c      	adds	r3, #12
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <UnlinkTimer+0xf8>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b06      	cmp	r3, #6
 8001b1e:	d107      	bne.n	8001b30 <UnlinkTimer+0xec>
 8001b20:	79bb      	ldrb	r3, [r7, #6]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <UnlinkTimer+0x104>)
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
}
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	20000194 	.word	0x20000194
 8001b40:	20000195 	.word	0x20000195
 8001b44:	20000104 	.word	0x20000104
 8001b48:	20000198 	.word	0x20000198

08001b4c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <ReturnTimeElapsed+0x70>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5a:	d026      	beq.n	8001baa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001b5c:	f7ff fe02 	bl	8001764 <ReadRtcSsrValue>
 8001b60:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <ReturnTimeElapsed+0x70>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d805      	bhi.n	8001b78 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <ReturnTimeElapsed+0x70>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	e00a      	b.n	8001b8e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <ReturnTimeElapsed+0x74>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <ReturnTimeElapsed+0x70>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <ReturnTimeElapsed+0x78>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <ReturnTimeElapsed+0x7c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	40d3      	lsrs	r3, r2
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	e001      	b.n	8001bae <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	b29b      	uxth	r3, r3
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000198 	.word	0x20000198
 8001bc0:	200001a0 	.word	0x200001a0
 8001bc4:	2000019e 	.word	0x2000019e
 8001bc8:	2000019d 	.word	0x2000019d

08001bcc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d108      	bne.n	8001bee <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001bdc:	f7ff fdc2 	bl	8001764 <ReadRtcSsrValue>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <RestartWakeupCounter+0x9c>)
 8001be4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001be6:	2003      	movs	r0, #3
 8001be8:	f001 facb 	bl	8003182 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001bec:	e039      	b.n	8001c62 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d803      	bhi.n	8001bfc <RestartWakeupCounter+0x30>
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <RestartWakeupCounter+0xa0>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d002      	beq.n	8001c02 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c02:	bf00      	nop
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <RestartWakeupCounter+0xa4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f8      	beq.n	8001c04 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <RestartWakeupCounter+0xa4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <RestartWakeupCounter+0xa4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c22:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <RestartWakeupCounter+0xa8>)
 8001c26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c2a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f001 fab6 	bl	800319e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <RestartWakeupCounter+0xac>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	0c1b      	lsrs	r3, r3, #16
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	88fa      	ldrh	r2, [r7, #6]
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <RestartWakeupCounter+0xac>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c42:	f7ff fd8f 	bl	8001764 <ReadRtcSsrValue>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <RestartWakeupCounter+0x9c>)
 8001c4a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <RestartWakeupCounter+0xa4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <RestartWakeupCounter+0xa4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c5a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001c5c:	f3af 8000 	nop.w
  return ;
 8001c60:	bf00      	nop
}
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000198 	.word	0x20000198
 8001c6c:	2000019d 	.word	0x2000019d
 8001c70:	200002d8 	.word	0x200002d8
 8001c74:	58000800 	.word	0x58000800
 8001c78:	40002800 	.word	0x40002800

08001c7c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001c82:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <RescheduleTimerList+0x11c>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d107      	bne.n	8001ca0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001c90:	bf00      	nop
 8001c92:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <RescheduleTimerList+0x120>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f8      	bne.n	8001c92 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ca0:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <RescheduleTimerList+0x120>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <RescheduleTimerList+0x120>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cae:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <RescheduleTimerList+0x124>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	493a      	ldr	r1, [pc, #232]	; (8001da4 <RescheduleTimerList+0x128>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3308      	adds	r3, #8
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001cca:	f7ff ff3f 	bl	8001b4c <ReturnTimeElapsed>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d205      	bcs.n	8001ce6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <RescheduleTimerList+0x12c>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e04d      	b.n	8001d82 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	4a30      	ldr	r2, [pc, #192]	; (8001dac <RescheduleTimerList+0x130>)
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	b292      	uxth	r2, r2
 8001cee:	4413      	add	r3, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d906      	bls.n	8001d06 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001cf8:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <RescheduleTimerList+0x130>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <RescheduleTimerList+0x12c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e03d      	b.n	8001d82 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <RescheduleTimerList+0x12c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d16:	e034      	b.n	8001d82 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	4922      	ldr	r1, [pc, #136]	; (8001da4 <RescheduleTimerList+0x128>)
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	3308      	adds	r3, #8
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d20a      	bcs.n	8001d46 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	491c      	ldr	r1, [pc, #112]	; (8001da4 <RescheduleTimerList+0x128>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3308      	adds	r3, #8
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e013      	b.n	8001d6e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	4916      	ldr	r1, [pc, #88]	; (8001da4 <RescheduleTimerList+0x128>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	3308      	adds	r3, #8
 8001d56:	6819      	ldr	r1, [r3, #0]
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	1ac9      	subs	r1, r1, r3
 8001d5e:	4811      	ldr	r0, [pc, #68]	; (8001da4 <RescheduleTimerList+0x128>)
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4403      	add	r3, r0
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <RescheduleTimerList+0x128>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3315      	adds	r3, #21
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d1c7      	bne.n	8001d18 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001d88:	89bb      	ldrh	r3, [r7, #12]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff1e 	bl	8001bcc <RestartWakeupCounter>

  return ;
 8001d90:	bf00      	nop
}
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40002800 	.word	0x40002800
 8001d9c:	200002d8 	.word	0x200002d8
 8001da0:	20000194 	.word	0x20000194
 8001da4:	20000104 	.word	0x20000104
 8001da8:	2000019c 	.word	0x2000019c
 8001dac:	200001a2 	.word	0x200001a2

08001db0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dba:	617b      	str	r3, [r7, #20]
  return(result);
 8001dbc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	22ca      	movs	r2, #202	; 0xca
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
 8001dcc:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2253      	movs	r2, #83	; 0x53
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001dd4:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001de4:	4b52      	ldr	r3, [pc, #328]	; (8001f30 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001dec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001df0:	4950      	ldr	r1, [pc, #320]	; (8001f34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d16e      	bne.n	8001ee4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001e06:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e0a:	494a      	ldr	r1, [pc, #296]	; (8001f34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001e1a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e1e:	4945      	ldr	r1, [pc, #276]	; (8001f34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3310      	adds	r3, #16
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001e30:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d04c      	beq.n	8001ed4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001e3a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e3e:	493d      	ldr	r1, [pc, #244]	; (8001f34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	330d      	adds	r3, #13
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d124      	bne.n	8001e9e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fdf2 	bl	8001a44 <UnlinkTimer>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f383 8810 	msr	PRIMASK, r3
}
 8001e6a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001e6c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e70:	4930      	ldr	r1, [pc, #192]	; (8001f34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f9b8 	bl	80021fc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	22ca      	movs	r2, #202	; 0xca
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2253      	movs	r2, #83	; 0x53
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e9c:	e012      	b.n	8001ec4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f383 8810 	msr	PRIMASK, r3
}
 8001ea8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f920 	bl	80020f4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	22ca      	movs	r2, #202	; 0xca
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2253      	movs	r2, #83	; 0x53
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	69b8      	ldr	r0, [r7, #24]
 8001ece:	f000 fa1b 	bl	8002308 <HW_TS_RTC_Int_AppNot>
 8001ed2:	e022      	b.n	8001f1a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001ed4:	f7ff fed2 	bl	8001c7c <RescheduleTimerList>
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f383 8810 	msr	PRIMASK, r3
}
 8001ee2:	e01a      	b.n	8001f1a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001ee4:	bf00      	nop
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f8      	beq.n	8001ee6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f04:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f383 8810 	msr	PRIMASK, r3
}
 8001f18:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001f22:	bf00      	nop
}
 8001f24:	3728      	adds	r7, #40	; 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200002d8 	.word	0x200002d8
 8001f30:	20000194 	.word	0x20000194
 8001f34:	20000104 	.word	0x20000104
 8001f38:	2000019c 	.word	0x2000019c
 8001f3c:	58000800 	.word	0x58000800

08001f40 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HW_TS_Init+0x188>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	22ca      	movs	r2, #202	; 0xca
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
 8001f54:	4b5c      	ldr	r3, [pc, #368]	; (80020c8 <HW_TS_Init+0x188>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2253      	movs	r2, #83	; 0x53
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001f5c:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <HW_TS_Init+0x18c>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <HW_TS_Init+0x18c>)
 8001f62:	f043 0320 	orr.w	r3, r3, #32
 8001f66:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001f68:	4b58      	ldr	r3, [pc, #352]	; (80020cc <HW_TS_Init+0x18c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f1c3 0304 	rsb	r3, r3, #4
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b55      	ldr	r3, [pc, #340]	; (80020d0 <HW_TS_Init+0x190>)
 8001f7c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001f7e:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HW_TS_Init+0x18c>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f86:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001f8a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	fa92 f2a2 	rbit	r2, r2
 8001f92:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	d101      	bne.n	8001fa2 <HW_TS_Init+0x62>
  {
    return 32U;
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	e003      	b.n	8001faa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	40d3      	lsrs	r3, r2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <HW_TS_Init+0x194>)
 8001fb4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001fb6:	4b45      	ldr	r3, [pc, #276]	; (80020cc <HW_TS_Init+0x18c>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <HW_TS_Init+0x198>)
 8001fc8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001fca:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HW_TS_Init+0x198>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HW_TS_Init+0x194>)
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fdc:	4a3c      	ldr	r2, [pc, #240]	; (80020d0 <HW_TS_Init+0x190>)
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	40d3      	lsrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d904      	bls.n	8001ff8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HW_TS_Init+0x19c>)
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	e003      	b.n	8002000 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HW_TS_Init+0x19c>)
 8001ffe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002000:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002004:	f7ff fb9c 	bl	8001740 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002008:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800200c:	f7ff fb84 	bl	8001718 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d13d      	bne.n	8002092 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HW_TS_Init+0x1a0>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HW_TS_Init+0x1a4>)
 800201e:	f04f 32ff 	mov.w	r2, #4294967295
 8002022:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002024:	2300      	movs	r3, #0
 8002026:	77fb      	strb	r3, [r7, #31]
 8002028:	e00c      	b.n	8002044 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800202a:	7ffa      	ldrb	r2, [r7, #31]
 800202c:	492e      	ldr	r1, [pc, #184]	; (80020e8 <HW_TS_Init+0x1a8>)
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	330c      	adds	r3, #12
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	3301      	adds	r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
 8002044:	7ffb      	ldrb	r3, [r7, #31]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d9ef      	bls.n	800202a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HW_TS_Init+0x1ac>)
 800204c:	2206      	movs	r2, #6
 800204e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HW_TS_Init+0x188>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HW_TS_Init+0x188>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800205e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HW_TS_Init+0x188>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HW_TS_Init+0x188>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002070:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HW_TS_Init+0x1b0>)
 8002074:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002078:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800207a:	2003      	movs	r0, #3
 800207c:	f001 f88f 	bl	800319e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HW_TS_Init+0x188>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HW_TS_Init+0x188>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	e009      	b.n	80020a6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HW_TS_Init+0x188>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f001 f86e 	bl	8003182 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HW_TS_Init+0x188>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	22ff      	movs	r2, #255	; 0xff
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80020ae:	2200      	movs	r2, #0
 80020b0:	2103      	movs	r1, #3
 80020b2:	2003      	movs	r0, #3
 80020b4:	f001 f823 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80020b8:	2003      	movs	r0, #3
 80020ba:	f001 f83a 	bl	8003132 <HAL_NVIC_EnableIRQ>

  return;
 80020be:	bf00      	nop
}
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200002d8 	.word	0x200002d8
 80020cc:	40002800 	.word	0x40002800
 80020d0:	2000019d 	.word	0x2000019d
 80020d4:	2000019e 	.word	0x2000019e
 80020d8:	200001a0 	.word	0x200001a0
 80020dc:	200001a2 	.word	0x200001a2
 80020e0:	2000019c 	.word	0x2000019c
 80020e4:	20000198 	.word	0x20000198
 80020e8:	20000104 	.word	0x20000104
 80020ec:	20000194 	.word	0x20000194
 80020f0:	58000800 	.word	0x58000800

080020f4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002102:	60fb      	str	r3, [r7, #12]
  return(result);
 8002104:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800210c:	2003      	movs	r0, #3
 800210e:	f001 f81e 	bl	800314e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002112:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <HW_TS_Stop+0xf0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	22ca      	movs	r2, #202	; 0xca
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HW_TS_Stop+0xf0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2253      	movs	r2, #83	; 0x53
 8002120:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	4930      	ldr	r1, [pc, #192]	; (80021e8 <HW_TS_Stop+0xf4>)
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	330c      	adds	r3, #12
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d142      	bne.n	80021c0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc80 	bl	8001a44 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002144:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HW_TS_Stop+0xf8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b06      	cmp	r3, #6
 800214e:	d12f      	bne.n	80021b0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HW_TS_Stop+0xfc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215c:	d107      	bne.n	800216e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800215e:	bf00      	nop
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HW_TS_Stop+0xf0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f8      	bne.n	8002160 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HW_TS_Stop+0xf0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HW_TS_Stop+0xf0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800217e:	bf00      	nop
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HW_TS_Stop+0xf0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f8      	beq.n	8002180 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HW_TS_Stop+0xf0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HW_TS_Stop+0xf0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800219e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HW_TS_Stop+0x100>)
 80021a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021a6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80021a8:	2003      	movs	r0, #3
 80021aa:	f000 fff8 	bl	800319e <HAL_NVIC_ClearPendingIRQ>
 80021ae:	e007      	b.n	80021c0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HW_TS_Stop+0x104>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	7cfa      	ldrb	r2, [r7, #19]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80021bc:	f7ff fd5e 	bl	8001c7c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HW_TS_Stop+0xf0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	22ff      	movs	r2, #255	; 0xff
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 ffb2 	bl	8003132 <HAL_NVIC_EnableIRQ>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f383 8810 	msr	PRIMASK, r3
}
 80021d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80021da:	bf00      	nop
}
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200002d8 	.word	0x200002d8
 80021e8:	20000104 	.word	0x20000104
 80021ec:	20000194 	.word	0x20000194
 80021f0:	40002800 	.word	0x40002800
 80021f4:	58000800 	.word	0x58000800
 80021f8:	20000195 	.word	0x20000195

080021fc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002208:	79fa      	ldrb	r2, [r7, #7]
 800220a:	493b      	ldr	r1, [pc, #236]	; (80022f8 <HW_TS_Start+0xfc>)
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	330c      	adds	r3, #12
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d103      	bne.n	8002228 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff66 	bl	80020f4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002228:	f3ef 8310 	mrs	r3, PRIMASK
 800222c:	60fb      	str	r3, [r7, #12]
  return(result);
 800222e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002230:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002232:	b672      	cpsid	i
}
 8002234:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002236:	2003      	movs	r0, #3
 8002238:	f000 ff89 	bl	800314e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800223c:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <HW_TS_Start+0x100>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	22ca      	movs	r2, #202	; 0xca
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HW_TS_Start+0x100>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2253      	movs	r2, #83	; 0x53
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	492a      	ldr	r1, [pc, #168]	; (80022f8 <HW_TS_Start+0xfc>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	330c      	adds	r3, #12
 800225c:	2202      	movs	r2, #2
 800225e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002260:	79fa      	ldrb	r2, [r7, #7]
 8002262:	4925      	ldr	r1, [pc, #148]	; (80022f8 <HW_TS_Start+0xfc>)
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	3308      	adds	r3, #8
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002274:	79fa      	ldrb	r2, [r7, #7]
 8002276:	4920      	ldr	r1, [pc, #128]	; (80022f8 <HW_TS_Start+0xfc>)
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	3304      	adds	r3, #4
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fb30 	bl	80018f0 <linkTimer>
 8002290:	4603      	mov	r3, r0
 8002292:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HW_TS_Start+0x104>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HW_TS_Start+0x108>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	7c7a      	ldrb	r2, [r7, #17]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d002      	beq.n	80022ac <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80022a6:	f7ff fce9 	bl	8001c7c <RescheduleTimerList>
 80022aa:	e013      	b.n	80022d4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80022ac:	79fa      	ldrb	r2, [r7, #7]
 80022ae:	4912      	ldr	r1, [pc, #72]	; (80022f8 <HW_TS_Start+0xfc>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3308      	adds	r3, #8
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	8a7b      	ldrh	r3, [r7, #18]
 80022c0:	79fa      	ldrb	r2, [r7, #7]
 80022c2:	1ac9      	subs	r1, r1, r3
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <HW_TS_Start+0xfc>)
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4403      	add	r3, r0
 80022d0:	3308      	adds	r3, #8
 80022d2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HW_TS_Start+0x100>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	22ff      	movs	r2, #255	; 0xff
 80022da:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022dc:	2003      	movs	r0, #3
 80022de:	f000 ff28 	bl	8003132 <HAL_NVIC_EnableIRQ>
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f383 8810 	msr	PRIMASK, r3
}
 80022ec:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80022ee:	bf00      	nop
}
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000104 	.word	0x20000104
 80022fc:	200002d8 	.word	0x200002d8
 8002300:	20000194 	.word	0x20000194
 8002304:	20000195 	.word	0x20000195

08002308 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	460b      	mov	r3, r1
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4798      	blx	r3

  return;
 800231a:	bf00      	nop
}
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	4603      	mov	r3, r0
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	4613      	mov	r3, r2
 8002334:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800233a:	2300      	movs	r3, #0
 800233c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d10e      	bne.n	8002362 <HW_UART_Transmit_DMA+0x3e>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case hw_lpuart1:
            HW_hlpuart1TxCb = cb;
 8002344:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HW_UART_Transmit_DMA+0x80>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HW_UART_Transmit_DMA+0x84>)
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <HW_UART_Transmit_DMA+0x88>)
 800234e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002350:	89bb      	ldrh	r3, [r7, #12]
 8002352:	461a      	mov	r2, r3
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	4814      	ldr	r0, [pc, #80]	; (80023a8 <HW_UART_Transmit_DMA+0x84>)
 8002358:	f003 fa12 	bl	8005780 <HAL_UART_Transmit_DMA>
 800235c:	4603      	mov	r3, r0
 800235e:	75fb      	strb	r3, [r7, #23]
            break;
 8002360:	e000      	b.n	8002364 <HW_UART_Transmit_DMA+0x40>
#endif

        default:
            break;
 8002362:	bf00      	nop
    }

    switch (hal_status)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d816      	bhi.n	8002398 <HW_UART_Transmit_DMA+0x74>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HW_UART_Transmit_DMA+0x4c>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	08002381 	.word	0x08002381
 8002374:	08002387 	.word	0x08002387
 8002378:	0800238d 	.word	0x0800238d
 800237c:	08002393 	.word	0x08002393
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002380:	2300      	movs	r3, #0
 8002382:	75bb      	strb	r3, [r7, #22]
            break;
 8002384:	e009      	b.n	800239a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002386:	2301      	movs	r3, #1
 8002388:	75bb      	strb	r3, [r7, #22]
            break;
 800238a:	e006      	b.n	800239a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800238c:	2302      	movs	r3, #2
 800238e:	75bb      	strb	r3, [r7, #22]
            break;
 8002390:	e003      	b.n	800239a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002392:	2303      	movs	r3, #3
 8002394:	75bb      	strb	r3, [r7, #22]
            break;
 8002396:	e000      	b.n	800239a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002398:	bf00      	nop
    }

    return hw_status;
 800239a:	7dbb      	ldrb	r3, [r7, #22]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200001a4 	.word	0x200001a4
 80023a8:	200001e4 	.word	0x200001e4
 80023ac:	40008000 	.word	0x40008000

080023b0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_UART_TxCpltCallback+0x34>)
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d107      	bne.n	80023d4 <HAL_UART_TxCpltCallback+0x24>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_UART_TxCpltCallback+0x38>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_hlpuart1TxCb();
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_UART_TxCpltCallback+0x38>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4798      	blx	r3
            }
            break;
 80023d2:	e001      	b.n	80023d8 <HAL_UART_TxCpltCallback+0x28>
#endif

        default:
            break;
 80023d4:	bf00      	nop
 80023d6:	e000      	b.n	80023da <HAL_UART_TxCpltCallback+0x2a>
            break;
 80023d8:	bf00      	nop
    }

    return;
 80023da:	bf00      	nop
}
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40008000 	.word	0x40008000
 80023e8:	200001a4 	.word	0x200001a4

080023ec <LL_RCC_LSE_SetDriveCapability>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f023 0218 	bic.w	r2, r3, #24
 8002400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_AHB1_GRP1_EnableClock>:
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4313      	orrs	r3, r2
 800242e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800243c:	68fb      	ldr	r3, [r7, #12]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_AHB2_GRP1_EnableClock>:
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002458:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4313      	orrs	r3, r2
 8002460:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002480:	f000 fc70 	bl	8002d64 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002484:	f7fe fe26 	bl	80010d4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002488:	f000 f813 	bl	80024b2 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800248c:	f000 f85d 	bl	800254a <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002490:	f000 f87c 	bl	800258c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002494:	f000 f92a 	bl	80026ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002498:	f000 f916 	bl	80026c8 <MX_DMA_Init>
  MX_RTC_Init();
 800249c:	f000 f8e4 	bl	8002668 <MX_RTC_Init>
  MX_MEMORYMAP_Init();
 80024a0:	f000 f8d4 	bl	800264c <MX_MEMORYMAP_Init>
  MX_RF_Init();
 80024a4:	f000 f8d9 	bl	800265a <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80024a8:	f7fe fe22 	bl	80010f0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80024ac:	f7ff f8e6 	bl	800167c <MX_APPE_Process>
 80024b0:	e7fc      	b.n	80024ac <main+0x30>

080024b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b098      	sub	sp, #96	; 0x60
 80024b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b8:	f107 031c 	add.w	r3, r7, #28
 80024bc:	2244      	movs	r2, #68	; 0x44
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f009 fcef 	bl	800bea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c6:	463b      	mov	r3, r7
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
 80024d4:	615a      	str	r2, [r3, #20]
 80024d6:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024d8:	f001 fbd0 	bl	8003c7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80024dc:	2010      	movs	r0, #16
 80024de:	f7ff ff85 	bl	80023ec <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80024e2:	2307      	movs	r3, #7
 80024e4:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f6:	2340      	movs	r3, #64	; 0x40
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	4618      	mov	r0, r3
 8002504:	f001 ff22 	bl	800434c <HAL_RCC_OscConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800250e:	f000 f941 	bl	8002794 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002512:	236f      	movs	r3, #111	; 0x6f
 8002514:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002516:	2302      	movs	r3, #2
 8002518:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800252e:	463b      	mov	r3, r7
 8002530:	2101      	movs	r1, #1
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fa40 	bl	80049b8 <HAL_RCC_ClockConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800253e:	f000 f929 	bl	8002794 <Error_Handler>
  }
}
 8002542:	bf00      	nop
 8002544:	3760      	adds	r7, #96	; 0x60
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b08c      	sub	sp, #48	; 0x30
 800254e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002550:	463b      	mov	r3, r7
 8002552:	2230      	movs	r2, #48	; 0x30
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f009 fca4 	bl	800bea4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800255c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002560:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002568:	2302      	movs	r3, #2
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800256c:	2310      	movs	r3, #16
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002570:	463b      	mov	r3, r7
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fde2 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800257e:	f000 f909 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002582:	bf00      	nop
 8002584:	3730      	adds	r7, #48	; 0x30
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_IPCC_Init+0x20>)
 8002592:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <MX_IPCC_Init+0x24>)
 8002594:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_IPCC_Init+0x20>)
 8002598:	f001 faea 	bl	8003b70 <HAL_IPCC_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80025a2:	f000 f8f7 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200001a8 	.word	0x200001a8
 80025b0:	58000c00 	.word	0x58000c00

080025b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025ba:	4a23      	ldr	r2, [pc, #140]	; (8002648 <MX_LPUART1_UART_Init+0x94>)
 80025bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80025be:	4b21      	ldr	r3, [pc, #132]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025da:	220c      	movs	r2, #12
 80025dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80025fc:	4811      	ldr	r0, [pc, #68]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 80025fe:	f003 f86f 	bl	80056e0 <HAL_UART_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002608:	f000 f8c4 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800260c:	2100      	movs	r1, #0
 800260e:	480d      	ldr	r0, [pc, #52]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 8002610:	f004 fa2f 	bl	8006a72 <HAL_UARTEx_SetTxFifoThreshold>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800261a:	f000 f8bb 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800261e:	2100      	movs	r1, #0
 8002620:	4808      	ldr	r0, [pc, #32]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 8002622:	f004 fa64 	bl	8006aee <HAL_UARTEx_SetRxFifoThreshold>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800262c:	f000 f8b2 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <MX_LPUART1_UART_Init+0x90>)
 8002632:	f004 f9e5 	bl	8006a00 <HAL_UARTEx_DisableFifoMode>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800263c:	f000 f8aa 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200001e4 	.word	0x200001e4
 8002648:	40008000 	.word	0x40008000

0800264c <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_RTC_Init+0x58>)
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <MX_RTC_Init+0x5c>)
 8002670:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_RTC_Init+0x58>)
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_RTC_Init+0x58>)
 800267a:	220f      	movs	r2, #15
 800267c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <MX_RTC_Init+0x58>)
 8002680:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002684:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_RTC_Init+0x58>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_RTC_Init+0x58>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <MX_RTC_Init+0x58>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002698:	4809      	ldr	r0, [pc, #36]	; (80026c0 <MX_RTC_Init+0x58>)
 800269a:	f002 fe45 	bl	8005328 <HAL_RTC_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80026a4:	f000 f876 	bl	8002794 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <MX_RTC_Init+0x58>)
 80026ae:	f002 ff3b 	bl	8005528 <HAL_RTCEx_SetWakeUpTimer_IT>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80026b8:	f000 f86c 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200002d8 	.word	0x200002d8
 80026c4:	40002800 	.word	0x40002800

080026c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80026cc:	2004      	movs	r0, #4
 80026ce:	f7ff fea3 	bl	8002418 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff fea0 	bl	8002418 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	210f      	movs	r1, #15
 80026dc:	200b      	movs	r0, #11
 80026de:	f000 fd0e 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026e2:	200b      	movs	r0, #11
 80026e4:	f000 fd25 	bl	8003132 <HAL_NVIC_EnableIRQ>

}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}

080026ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002700:	2004      	movs	r0, #4
 8002702:	f7ff fea2 	bl	800244a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	2001      	movs	r0, #1
 8002708:	f7ff fe9f 	bl	800244a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800270c:	2010      	movs	r0, #16
 800270e:	f7ff fe9c 	bl	800244a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002712:	2002      	movs	r0, #2
 8002714:	f7ff fe99 	bl	800244a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2120      	movs	r1, #32
 800271c:	481b      	ldr	r0, [pc, #108]	; (800278c <MX_GPIO_Init+0xa0>)
 800271e:	f001 f9b9 	bl	8003a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_User_Pin */
  GPIO_InitStruct.Pin = SW1_User_Pin;
 8002722:	2310      	movs	r3, #16
 8002724:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800272a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272c:	2301      	movs	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_User_GPIO_Port, &GPIO_InitStruct);
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	4619      	mov	r1, r3
 8002734:	4816      	ldr	r0, [pc, #88]	; (8002790 <MX_GPIO_Init+0xa4>)
 8002736:	f001 f845 	bl	80037c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin;
 800273a:	2320      	movs	r3, #32
 800273c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	2301      	movs	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002746:	2302      	movs	r3, #2
 8002748:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Blue_LED_GPIO_Port, &GPIO_InitStruct);
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	480f      	ldr	r0, [pc, #60]	; (800278c <MX_GPIO_Init+0xa0>)
 8002750:	f001 f838 	bl	80037c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002754:	23c0      	movs	r3, #192	; 0xc0
 8002756:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002764:	2307      	movs	r3, #7
 8002766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4807      	ldr	r0, [pc, #28]	; (800278c <MX_GPIO_Init+0xa0>)
 800276e:	f001 f829 	bl	80037c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	200a      	movs	r0, #10
 8002778:	f000 fcc1 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800277c:	200a      	movs	r0, #10
 800277e:	f000 fcd8 	bl	8003132 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	48000400 	.word	0x48000400
 8002790:	48001000 	.word	0x48001000

08002794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800279c:	e7fe      	b.n	800279c <Error_Handler+0x8>

0800279e <LL_RCC_EnableRTC>:
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_AHB2_GRP1_EnableClock>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027e4:	68fb      	ldr	r3, [r7, #12]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_AHB3_GRP1_EnableClock>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4313      	orrs	r3, r2
 8002808:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002816:	68fb      	ldr	r3, [r7, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_APB1_GRP1_EnableClock>:
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4313      	orrs	r3, r2
 800283a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002840:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002848:	68fb      	ldr	r3, [r7, #12]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_APB1_GRP2_EnableClock>:
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4313      	orrs	r3, r2
 800286c:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800286e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4013      	ands	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800287a:	68fb      	ldr	r3, [r7, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800288c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002890:	f7ff ffaf 	bl	80027f2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	202e      	movs	r0, #46	; 0x2e
 800289a:	f000 fc30 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800289e:	202e      	movs	r0, #46	; 0x2e
 80028a0:	f000 fc47 	bl	8003132 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0d      	ldr	r2, [pc, #52]	; (80028ec <HAL_IPCC_MspInit+0x44>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d113      	bne.n	80028e2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80028ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80028be:	f7ff ff98 	bl	80027f2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	202c      	movs	r0, #44	; 0x2c
 80028c8:	f000 fc19 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80028cc:	202c      	movs	r0, #44	; 0x2c
 80028ce:	f000 fc30 	bl	8003132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	202d      	movs	r0, #45	; 0x2d
 80028d8:	f000 fc11 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80028dc:	202d      	movs	r0, #45	; 0x2d
 80028de:	f000 fc28 	bl	8003132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	58000c00 	.word	0x58000c00

080028f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b094      	sub	sp, #80	; 0x50
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	2230      	movs	r2, #48	; 0x30
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f009 fac7 	bl	800bea4 <memset>
  if(huart->Instance==LPUART1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2e      	ldr	r2, [pc, #184]	; (80029d4 <HAL_UART_MspInit+0xe4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d155      	bne.n	80029cc <HAL_UART_MspInit+0xdc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002920:	2302      	movs	r3, #2
 8002922:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	4618      	mov	r0, r3
 800292e:	f002 fc05 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002938:	f7ff ff2c 	bl	8002794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800293c:	2001      	movs	r0, #1
 800293e:	f7ff ff8a 	bl	8002856 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	2001      	movs	r0, #1
 8002944:	f7ff ff3c 	bl	80027c0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002948:	230c      	movs	r3, #12
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002958:	2308      	movs	r3, #8
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002966:	f000 ff2d 	bl	80037c4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_UART_MspInit+0xec>)
 800296e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 8002972:	2211      	movs	r2, #17
 8002974:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 8002978:	2210      	movs	r2, #16
 800297a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 800299c:	2200      	movs	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80029a0:	480d      	ldr	r0, [pc, #52]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 80029a2:	f000 fc0b 	bl	80031bc <HAL_DMA_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80029ac:	f7ff fef2 	bl	8002794 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 80029b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80029b6:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	2025      	movs	r0, #37	; 0x25
 80029c2:	f000 fb9c 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80029c6:	2025      	movs	r0, #37	; 0x25
 80029c8:	f000 fbb3 	bl	8003132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3750      	adds	r7, #80	; 0x50
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40008000 	.word	0x40008000
 80029d8:	20000278 	.word	0x20000278
 80029dc:	40020008 	.word	0x40020008

080029e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	2230      	movs	r2, #48	; 0x30
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f009 fa57 	bl	800bea4 <memset>
  if(hrtc->Instance==RTC)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_RTC_MspInit+0x64>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d11d      	bne.n	8002a3c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a04:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 fb93 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a1c:	f7ff feba 	bl	8002794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a20:	f7ff febd 	bl	800279e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002a24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a28:	f7ff fefc 	bl	8002824 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2003      	movs	r0, #3
 8002a32:	f000 fb64 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002a36:	2003      	movs	r0, #3
 8002a38:	f000 fb7b 	bl	8003132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a3c:	bf00      	nop
 8002a3e:	3738      	adds	r7, #56	; 0x38
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40002800 	.word	0x40002800

08002a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <NMI_Handler+0x4>

08002a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a52:	e7fe      	b.n	8002a52 <HardFault_Handler+0x4>

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	e7fe      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5e:	e7fe      	b.n	8002a5e <BusFault_Handler+0x4>

08002a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <UsageFault_Handler+0x4>

08002a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a94:	f000 f9c0 	bl	8002e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002aa0:	f7ff f986 	bl	8001db0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_User_Pin);
 8002aac:	2010      	movs	r0, #16
 8002aae:	f001 f823 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <DMA1_Channel1_IRQHandler+0x10>)
 8002abe:	f000 fd42 	bl	8003546 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000278 	.word	0x20000278

08002acc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <LPUART1_IRQHandler+0x10>)
 8002ad2:	f002 fed5 	bl	8005880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200001e4 	.word	0x200001e4

08002ae0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002ae4:	f008 fc10 	bl	800b308 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002af0:	f008 fc40 	bl	800b374 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002afc:	f001 f814 	bl	8003b28 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e00a      	b.n	8002b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b16:	f3af 8000 	nop.w
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	60ba      	str	r2, [r7, #8]
 8002b22:	b2ca      	uxtb	r2, r1
 8002b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	dbf0      	blt.n	8002b16 <_read+0x12>
  }

  return len;
 8002b34:	687b      	ldr	r3, [r7, #4]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b66:	605a      	str	r2, [r3, #4]
  return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_isatty>:

int _isatty(int file)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <_sbrk+0x5c>)
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <_sbrk+0x60>)
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <_sbrk+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <_sbrk+0x64>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <_sbrk+0x68>)
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <_sbrk+0x64>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d207      	bcs.n	8002be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd8:	f009 f9ca 	bl	800bf70 <__errno>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	220c      	movs	r2, #12
 8002be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	e009      	b.n	8002bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <_sbrk+0x64>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <_sbrk+0x64>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <_sbrk+0x64>)
 8002bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20003000 	.word	0x20003000
 8002c08:	00000400 	.word	0x00000400
 8002c0c:	200002fc 	.word	0x200002fc
 8002c10:	20001730 	.word	0x20001730

08002c14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002c18:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <SystemInit+0x90>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <SystemInit+0x90>)
 8002c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002c40:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <SystemInit+0x94>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c5e:	f023 0305 	bic.w	r3, r3, #5
 8002c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <SystemInit+0x98>)
 8002c80:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00
 8002ca8:	faf6fefb 	.word	0xfaf6fefb
 8002cac:	22041000 	.word	0x22041000

08002cb0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002cb0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb4:	3304      	adds	r3, #4

08002cb6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002cba:	d3f9      	bcc.n	8002cb0 <CopyDataInit>
  bx lr
 8002cbc:	4770      	bx	lr

08002cbe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002cbe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002cc0:	3004      	adds	r0, #4

08002cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002cc2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002cc4:	d3fb      	bcc.n	8002cbe <FillZerobss>
  bx lr
 8002cc6:	4770      	bx	lr

08002cc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ccc:	f7ff ffa2 	bl	8002c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002cd0:	480b      	ldr	r0, [pc, #44]	; (8002d00 <LoopForever+0x6>)
 8002cd2:	490c      	ldr	r1, [pc, #48]	; (8002d04 <LoopForever+0xa>)
 8002cd4:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <LoopForever+0xe>)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f7ff ffed 	bl	8002cb6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <LoopForever+0x12>)
 8002cde:	490c      	ldr	r1, [pc, #48]	; (8002d10 <LoopForever+0x16>)
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <LoopForever+0x1a>)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f7ff ffe7 	bl	8002cb6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002ce8:	480b      	ldr	r0, [pc, #44]	; (8002d18 <LoopForever+0x1e>)
 8002cea:	490c      	ldr	r1, [pc, #48]	; (8002d1c <LoopForever+0x22>)
 8002cec:	2300      	movs	r3, #0
 8002cee:	f7ff ffe8 	bl	8002cc2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cf2:	f009 f943 	bl	800bf7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002cf6:	f7ff fbc1 	bl	800247c <main>

08002cfa <LoopForever>:

LoopForever:
  b LoopForever
 8002cfa:	e7fe      	b.n	8002cfa <LoopForever>
  ldr   r0, =_estack
 8002cfc:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002d00:	20000008 	.word	0x20000008
 8002d04:	2000009c 	.word	0x2000009c
 8002d08:	0800e518 	.word	0x0800e518
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002d0c:	200301e4 	.word	0x200301e4
 8002d10:	20030a67 	.word	0x20030a67
 8002d14:	0800e5f2 	.word	0x0800e5f2
  INIT_BSS _sbss, _ebss
 8002d18:	200000e8 	.word	0x200000e8
 8002d1c:	20001730 	.word	0x20001730

08002d20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d20:	e7fe      	b.n	8002d20 <ADC1_IRQHandler>
	...

08002d24 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6053      	str	r3, [r2, #4]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e0042000 	.word	0xe0042000

08002d44 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	6053      	str	r3, [r2, #4]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e0042000 	.word	0xe0042000

08002d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_Init+0x3c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <HAL_Init+0x3c>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7a:	2003      	movs	r0, #3
 8002d7c:	f000 f9b4 	bl	80030e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d80:	200f      	movs	r0, #15
 8002d82:	f000 f80f 	bl	8002da4 <HAL_InitTick>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	71fb      	strb	r3, [r7, #7]
 8002d90:	e001      	b.n	8002d96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d92:	f7ff fd79 	bl	8002888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d96:	79fb      	ldrb	r3, [r7, #7]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	58004000 	.word	0x58004000

08002da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_InitTick+0x6c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d024      	beq.n	8002e02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002db8:	f001 ffaa 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_InitTick+0x6c>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f9ca 	bl	800316a <HAL_SYSTICK_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10f      	bne.n	8002dfc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	d809      	bhi.n	8002df6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de2:	2200      	movs	r2, #0
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dea:	f000 f988 	bl	80030fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_InitTick+0x70>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	e007      	b.n	8002e06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e004      	b.n	8002e06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e001      	b.n	8002e06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000001c 	.word	0x2000001c
 8002e14:	20000018 	.word	0x20000018

08002e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_IncTick+0x20>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_IncTick+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_IncTick+0x24>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	2000001c 	.word	0x2000001c
 8002e3c:	20000300 	.word	0x20000300

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000300 	.word	0x20000300

08002e58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_GetTickPrio+0x14>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000018 	.word	0x20000018

08002e70 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002e74:	f7ff ff56 	bl	8002d24 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002e80:	f7ff ff60 	bl	8002d44 <LL_DBGMCU_EnableDBGStopMode>
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db12      	blt.n	8002f60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	490a      	ldr	r1, [pc, #40]	; (8002f6c <__NVIC_DisableIRQ+0x44>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	3320      	adds	r3, #32
 8002f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f54:	f3bf 8f4f 	dsb	sy
}
 8002f58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f5a:	f3bf 8f6f 	isb	sy
}
 8002f5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db0c      	blt.n	8002f9c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <__NVIC_SetPendingIRQ+0x38>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	3340      	adds	r3, #64	; 0x40
 8002f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0c      	blt.n	8002fd8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <__NVIC_ClearPendingIRQ+0x38>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	3360      	adds	r3, #96	; 0x60
 8002fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db0a      	blt.n	8003012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	490c      	ldr	r1, [pc, #48]	; (8003034 <__NVIC_SetPriority+0x4c>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	440b      	add	r3, r1
 800300c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003010:	e00a      	b.n	8003028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4908      	ldr	r1, [pc, #32]	; (8003038 <__NVIC_SetPriority+0x50>)
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3b04      	subs	r3, #4
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	440b      	add	r3, r1
 8003026:	761a      	strb	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f1c3 0307 	rsb	r3, r3, #7
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf28      	it	cs
 800305a:	2304      	movcs	r3, #4
 800305c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	2b06      	cmp	r3, #6
 8003064:	d902      	bls.n	800306c <NVIC_EncodePriority+0x30>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3b03      	subs	r3, #3
 800306a:	e000      	b.n	800306e <NVIC_EncodePriority+0x32>
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	401a      	ands	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003084:	f04f 31ff 	mov.w	r1, #4294967295
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	43d9      	mvns	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	4313      	orrs	r3, r2
         );
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b4:	d301      	bcc.n	80030ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00f      	b.n	80030da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <SysTick_Config+0x40>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c2:	210f      	movs	r1, #15
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f7ff ff8e 	bl	8002fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <SysTick_Config+0x40>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <SysTick_Config+0x40>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff fec9 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800310c:	f7ff fee0 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 8003110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7ff ff90 	bl	800303c <NVIC_EncodePriority>
 800311c:	4602      	mov	r2, r0
 800311e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff5f 	bl	8002fe8 <__NVIC_SetPriority>
}
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fed3 	bl	8002eec <__NVIC_EnableIRQ>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fee3 	bl	8002f28 <__NVIC_DisableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ff96 	bl	80030a4 <SysTick_Config>
 8003178:	4603      	mov	r3, r0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff feed 	bl	8002f70 <__NVIC_SetPendingIRQ>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fefd 	bl	8002fac <__NVIC_ClearPendingIRQ>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e078      	b.n	80032c0 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <HAL_DMA_Init+0x10c>)
 80031d6:	4413      	add	r3, r2
 80031d8:	4a3c      	ldr	r2, [pc, #240]	; (80032cc <HAL_DMA_Init+0x110>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	009a      	lsls	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a39      	ldr	r2, [pc, #228]	; (80032d0 <HAL_DMA_Init+0x114>)
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fa6e 	bl	8003720 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324c:	d102      	bne.n	8003254 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003260:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800326a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <HAL_DMA_Init+0xda>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d80c      	bhi.n	8003296 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fa7b 	bl	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	e008      	b.n	80032a8 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	bffdfff8 	.word	0xbffdfff8
 80032cc:	cccccccd 	.word	0xcccccccd
 80032d0:	40020000 	.word	0x40020000

080032d4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_DMA_Start_IT+0x20>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e066      	b.n	80033c2 <HAL_DMA_Start_IT+0xee>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d155      	bne.n	80033b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f9b9 	bl	80036a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 020e 	orr.w	r2, r2, #14
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e00f      	b.n	800336c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 020a 	orr.w	r2, r2, #10
 800336a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003388:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e005      	b.n	80033c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
 80033be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e04f      	b.n	800347c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d008      	beq.n	80033fa <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2204      	movs	r2, #4
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e040      	b.n	800347c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 020e 	bic.w	r2, r2, #14
 8003408:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f003 021c 	and.w	r2, r3, #28
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003446:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003468:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d005      	beq.n	80034ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2204      	movs	r2, #4
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
 80034aa:	e047      	b.n	800353c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 020e 	bic.w	r2, r2, #14
 80034ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f003 021c 	and.w	r2, r3, #28
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003510:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800351a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
    }
  }
  return status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f003 031c 	and.w	r3, r3, #28
 8003566:	2204      	movs	r2, #4
 8003568:	409a      	lsls	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d026      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x7a>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d021      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d107      	bne.n	800359a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0204 	bic.w	r2, r2, #4
 8003598:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f003 021c 	and.w	r2, r3, #28
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2104      	movs	r1, #4
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d071      	beq.n	800369a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035be:	e06c      	b.n	800369a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	f003 031c 	and.w	r3, r3, #28
 80035c8:	2202      	movs	r2, #2
 80035ca:	409a      	lsls	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02e      	beq.n	8003632 <HAL_DMA_IRQHandler+0xec>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d029      	beq.n	8003632 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 020a 	bic.w	r2, r2, #10
 80035fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f003 021c 	and.w	r2, r3, #28
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2102      	movs	r1, #2
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d038      	beq.n	800369a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003630:	e033      	b.n	800369a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f003 031c 	and.w	r3, r3, #28
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d02a      	beq.n	800369c <HAL_DMA_IRQHandler+0x156>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d025      	beq.n	800369c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 020e 	bic.w	r2, r2, #14
 800365e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f003 021c 	and.w	r2, r3, #28
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800369a:	bf00      	nop
 800369c:	bf00      	nop
}
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f003 021c 	and.w	r2, r3, #28
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f202 	lsl.w	r2, r1, r2
 80036e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d108      	bne.n	8003704 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003702:	e007      	b.n	8003714 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003734:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	3b08      	subs	r3, #8
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a08      	ldr	r2, [pc, #32]	; (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003752:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2201      	movs	r2, #1
 800375c:	409a      	lsls	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	cccccccd 	.word	0xcccccccd
 8003774:	40020880 	.word	0x40020880

08003778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003788:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	461a      	mov	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800379c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2201      	movs	r2, #1
 80037a8:	409a      	lsls	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	1000823f 	.word	0x1000823f
 80037c0:	40020940 	.word	0x40020940

080037c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d2:	e146      	b.n	8003a62 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	2101      	movs	r1, #1
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8138 	beq.w	8003a5c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d005      	beq.n	8003804 <HAL_GPIO_Init+0x40>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d130      	bne.n	8003866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	2203      	movs	r2, #3
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800383a:	2201      	movs	r2, #1
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	f003 0201 	and.w	r2, r3, #1
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b03      	cmp	r3, #3
 8003870:	d017      	beq.n	80038a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	2203      	movs	r2, #3
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d123      	bne.n	80038f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	08da      	lsrs	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3208      	adds	r2, #8
 80038b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	08da      	lsrs	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3208      	adds	r2, #8
 80038f0:	6939      	ldr	r1, [r7, #16]
 80038f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	2203      	movs	r2, #3
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0203 	and.w	r2, r3, #3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8092 	beq.w	8003a5c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003938:	4a51      	ldr	r2, [pc, #324]	; (8003a80 <HAL_GPIO_Init+0x2bc>)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	3302      	adds	r3, #2
 8003940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	220f      	movs	r2, #15
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003962:	d013      	beq.n	800398c <HAL_GPIO_Init+0x1c8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a47      	ldr	r2, [pc, #284]	; (8003a84 <HAL_GPIO_Init+0x2c0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00d      	beq.n	8003988 <HAL_GPIO_Init+0x1c4>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a46      	ldr	r2, [pc, #280]	; (8003a88 <HAL_GPIO_Init+0x2c4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d007      	beq.n	8003984 <HAL_GPIO_Init+0x1c0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a45      	ldr	r2, [pc, #276]	; (8003a8c <HAL_GPIO_Init+0x2c8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_GPIO_Init+0x1bc>
 800397c:	2304      	movs	r3, #4
 800397e:	e006      	b.n	800398e <HAL_GPIO_Init+0x1ca>
 8003980:	2307      	movs	r3, #7
 8003982:	e004      	b.n	800398e <HAL_GPIO_Init+0x1ca>
 8003984:	2302      	movs	r3, #2
 8003986:	e002      	b.n	800398e <HAL_GPIO_Init+0x1ca>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_GPIO_Init+0x1ca>
 800398c:	2300      	movs	r3, #0
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	f002 0203 	and.w	r2, r2, #3
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	4093      	lsls	r3, r2
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800399e:	4938      	ldr	r1, [pc, #224]	; (8003a80 <HAL_GPIO_Init+0x2bc>)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ac:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <HAL_GPIO_Init+0x2cc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039d0:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <HAL_GPIO_Init+0x2cc>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039d6:	4b2e      	ldr	r3, [pc, #184]	; (8003a90 <HAL_GPIO_Init+0x2cc>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039fa:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <HAL_GPIO_Init+0x2cc>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a00:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <HAL_GPIO_Init+0x2cc>)
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a26:	4a1a      	ldr	r2, [pc, #104]	; (8003a90 <HAL_GPIO_Init+0x2cc>)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <HAL_GPIO_Init+0x2cc>)
 8003a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a54:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <HAL_GPIO_Init+0x2cc>)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f47f aeb1 	bne.w	80037d4 <HAL_GPIO_Init+0x10>
  }
}
 8003a72:	bf00      	nop
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40010000 	.word	0x40010000
 8003a84:	48000400 	.word	0x48000400
 8003a88:	48000800 	.word	0x48000800
 8003a8c:	48001000 	.word	0x48001000
 8003a90:	58000800 	.word	0x58000800

08003a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa4:	787b      	ldrb	r3, [r7, #1]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab0:	e002      	b.n	8003ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4013      	ands	r3, r2
 8003adc:	041a      	lsls	r2, r3, #16
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43d9      	mvns	r1, r3
 8003ae2:	887b      	ldrh	r3, [r7, #2]
 8003ae4:	400b      	ands	r3, r1
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	619a      	str	r2, [r3, #24]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fdee 	bl	80016f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	58000800 	.word	0x58000800

08003b28 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_HSEM_IRQHandler+0x30>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_HSEM_IRQHandler+0x30>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	4906      	ldr	r1, [pc, #24]	; (8003b58 <HAL_HSEM_IRQHandler+0x30>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <HAL_HSEM_IRQHandler+0x30>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f807 	bl	8003b5c <HAL_HSEM_FreeCallback>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	58001500 	.word	0x58001500

08003b5c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01e      	beq.n	8003bc0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <HAL_IPCC_Init+0x60>)
 8003b84:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fe88 	bl	80028a8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003b98:	68b8      	ldr	r0, [r7, #8]
 8003b9a:	f000 f85b 	bl	8003c54 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f82c 	bl	8003c08 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003bbe:	e001      	b.n	8003bc4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	58000c00 	.word	0x58000c00

08003bd4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e00f      	b.n	8003c36 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <IPCC_SetDefaultCallbacks+0x44>)
 8003c20:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3306      	adds	r3, #6
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <IPCC_SetDefaultCallbacks+0x48>)
 8003c2e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d9ec      	bls.n	8003c16 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	08003bd5 	.word	0x08003bd5
 8003c50:	08003bef 	.word	0x08003bef

08003c54 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003c68:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	223f      	movs	r2, #63	; 0x3f
 8003c6e:	609a      	str	r2, [r3, #8]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	58000400 	.word	0x58000400

08003c9c <LL_PWR_EnableSRAM2Retention>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003caa:	6093      	str	r3, [r2, #8]
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	58000400 	.word	0x58000400

08003cbc <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8003cc0:	f7ff ffec 	bl	8003c9c <LL_PWR_EnableSRAM2Retention>
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cda:	d101      	bne.n	8003ce0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <LL_RCC_HSE_Enable>:
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_HSE_Disable>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_RCC_HSE_IsReady>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d3a:	d101      	bne.n	8003d40 <LL_RCC_HSE_IsReady+0x18>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <LL_RCC_HSE_IsReady+0x1a>
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_RCC_HSI_Enable>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_RCC_HSI_Disable>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_HSI_IsReady>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d101      	bne.n	8003da0 <LL_RCC_HSI_IsReady+0x18>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <LL_RCC_HSI_IsReady+0x1a>
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_RCC_HSI_SetCalibTrimming>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <LL_RCC_LSE_Enable>:
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_RCC_LSE_Disable>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_RCC_LSE_EnableBypass>:
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_RCC_LSE_DisableBypass>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <LL_RCC_LSE_IsReady>:
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d101      	bne.n	8003e76 <LL_RCC_LSE_IsReady+0x18>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <LL_RCC_LSE_IsReady+0x1a>
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_RCC_LSI1_Enable>:
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_LSI1_Disable>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_LSI1_IsReady>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d101      	bne.n	8003ede <LL_RCC_LSI1_IsReady+0x18>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <LL_RCC_LSI1_IsReady+0x1a>
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_LSI2_Enable>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_LSI2_Disable>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <LL_RCC_LSI2_IsReady>:
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d101      	bne.n	8003f46 <LL_RCC_LSI2_IsReady+0x18>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <LL_RCC_LSI2_IsReady+0x1a>
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_LSI2_SetTrimming>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_RCC_MSI_Enable>:
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_MSI_Disable>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_RCC_MSI_IsReady>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d101      	bne.n	8003fd2 <LL_RCC_MSI_IsReady+0x16>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <LL_RCC_MSI_IsReady+0x18>
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <LL_RCC_MSI_SetRange>:
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_RCC_MSI_GetRange>:
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004016:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2bb0      	cmp	r3, #176	; 0xb0
 800401c:	d901      	bls.n	8004022 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800401e:	23b0      	movs	r3, #176	; 0xb0
 8004020:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004022:	687b      	ldr	r3, [r7, #4]
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_SetSysClkSource>:
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 0203 	bic.w	r2, r3, #3
 800406c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_RCC_GetSysClkSource>:
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_RCC_SetAHBPrescaler>:
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80040ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_SetAHB4Prescaler>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_RCC_SetAPB1Prescaler>:
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800412e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_RCC_SetAPB2Prescaler>:
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_RCC_GetAHBPrescaler>:
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_RCC_GetAHB4Prescaler>:
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_RCC_GetAPB1Prescaler>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_RCC_GetAPB2Prescaler>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <LL_RCC_PLL_Enable>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80041d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_PLL_Disable>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80041f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004200:	6013      	str	r3, [r2, #0]
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_RCC_PLL_IsReady>:
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800421e:	d101      	bne.n	8004224 <LL_RCC_PLL_IsReady+0x18>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <LL_RCC_PLL_IsReady+0x1a>
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_RCC_PLL_GetN>:
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_RCC_PLL_GetR>:
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <LL_RCC_PLL_GetDivider>:
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_RCC_PLL_GetMainSource>:
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0303 	and.w	r3, r3, #3
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d101      	bne.n	80042aa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ca:	d101      	bne.n	80042d0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d101      	bne.n	80042f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004314:	d101      	bne.n	800431a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800432a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004334:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004338:	d101      	bne.n	800433e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b08d      	sub	sp, #52	; 0x34
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e324      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 808d 	beq.w	8004486 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436c:	f7ff fe89 	bl	8004082 <LL_RCC_GetSysClkSource>
 8004370:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004372:	f7ff ff82 	bl	800427a <LL_RCC_PLL_GetMainSource>
 8004376:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x3e>
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d147      	bne.n	8004414 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	2b01      	cmp	r3, #1
 8004388:	d144      	bne.n	8004414 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e308      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800439a:	f7ff fe34 	bl	8004006 <LL_RCC_MSI_GetRange>
 800439e:	4603      	mov	r3, r0
 80043a0:	429c      	cmp	r4, r3
 80043a2:	d914      	bls.n	80043ce <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fcf1 	bl	8004d90 <RCC_SetFlashLatencyFromMSIRange>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e2f7      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fe0e 	bl	8003fde <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fe32 	bl	8004030 <LL_RCC_MSI_SetCalibTrimming>
 80043cc:	e013      	b.n	80043f6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fe03 	bl	8003fde <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff fe27 	bl	8004030 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fcd2 	bl	8004d90 <RCC_SetFlashLatencyFromMSIRange>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e2d8      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80043f6:	f000 fc8b 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4aa4      	ldr	r2, [pc, #656]	; (8004690 <HAL_RCC_OscConfig+0x344>)
 80043fe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004400:	4ba4      	ldr	r3, [pc, #656]	; (8004694 <HAL_RCC_OscConfig+0x348>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fccd 	bl	8002da4 <HAL_InitTick>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d039      	beq.n	8004484 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e2c9      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01e      	beq.n	800445a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800441c:	f7ff fdb0 	bl	8003f80 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004420:	f7fe fd0e 	bl	8002e40 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004428:	f7fe fd0a 	bl	8002e40 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e2b6      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800443a:	f7ff fdbf 	bl	8003fbc <LL_RCC_MSI_IsReady>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f1      	beq.n	8004428 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fdc8 	bl	8003fde <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fdec 	bl	8004030 <LL_RCC_MSI_SetCalibTrimming>
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800445a:	f7ff fda0 	bl	8003f9e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800445e:	f7fe fcef 	bl	8002e40 <HAL_GetTick>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004466:	f7fe fceb 	bl	8002e40 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e297      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004478:	f7ff fda0 	bl	8003fbc <LL_RCC_MSI_IsReady>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f1      	bne.n	8004466 <HAL_RCC_OscConfig+0x11a>
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004484:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d047      	beq.n	8004522 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004492:	f7ff fdf6 	bl	8004082 <LL_RCC_GetSysClkSource>
 8004496:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004498:	f7ff feef 	bl	800427a <LL_RCC_PLL_GetMainSource>
 800449c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_OscConfig+0x164>
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d108      	bne.n	80044bc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d105      	bne.n	80044bc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d134      	bne.n	8004522 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e275      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d102      	bne.n	80044cc <HAL_RCC_OscConfig+0x180>
 80044c6:	f7ff fc11 	bl	8003cec <LL_RCC_HSE_Enable>
 80044ca:	e001      	b.n	80044d0 <HAL_RCC_OscConfig+0x184>
 80044cc:	f7ff fc1d 	bl	8003d0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d012      	beq.n	80044fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe fcb2 	bl	8002e40 <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e0:	f7fe fcae 	bl	8002e40 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e25a      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80044f2:	f7ff fc19 	bl	8003d28 <LL_RCC_HSE_IsReady>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f1      	beq.n	80044e0 <HAL_RCC_OscConfig+0x194>
 80044fc:	e011      	b.n	8004522 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fe fc9f 	bl	8002e40 <HAL_GetTick>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004506:	f7fe fc9b 	bl	8002e40 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b64      	cmp	r3, #100	; 0x64
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e247      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004518:	f7ff fc06 	bl	8003d28 <LL_RCC_HSE_IsReady>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f1      	bne.n	8004506 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d04c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452e:	f7ff fda8 	bl	8004082 <LL_RCC_GetSysClkSource>
 8004532:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004534:	f7ff fea1 	bl	800427a <LL_RCC_PLL_GetMainSource>
 8004538:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d005      	beq.n	800454c <HAL_RCC_OscConfig+0x200>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d10e      	bne.n	8004564 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d10b      	bne.n	8004564 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e227      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fc25 	bl	8003dac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004562:	e031      	b.n	80045c8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d019      	beq.n	80045a0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456c:	f7ff fbee 	bl	8003d4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fe fc66 	bl	8002e40 <HAL_GetTick>
 8004574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004578:	f7fe fc62 	bl	8002e40 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e20e      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800458a:	f7ff fbfd 	bl	8003d88 <LL_RCC_HSI_IsReady>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f1      	beq.n	8004578 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fc07 	bl	8003dac <LL_RCC_HSI_SetCalibTrimming>
 800459e:	e013      	b.n	80045c8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a0:	f7ff fbe3 	bl	8003d6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fe fc4c 	bl	8002e40 <HAL_GetTick>
 80045a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ac:	f7fe fc48 	bl	8002e40 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1f4      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80045be:	f7ff fbe3 	bl	8003d88 <LL_RCC_HSI_IsReady>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f1      	bne.n	80045ac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80a3 	beq.w	8004728 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d076      	beq.n	80046d8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d046      	beq.n	8004684 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80045f6:	f7ff fc66 	bl	8003ec6 <LL_RCC_LSI1_IsReady>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d113      	bne.n	8004628 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004600:	f7ff fc3f 	bl	8003e82 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004604:	f7fe fc1c 	bl	8002e40 <HAL_GetTick>
 8004608:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800460c:	f7fe fc18 	bl	8002e40 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1c4      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800461e:	f7ff fc52 	bl	8003ec6 <LL_RCC_LSI1_IsReady>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f1      	beq.n	800460c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004628:	f7ff fc5f 	bl	8003eea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fe fc08 	bl	8002e40 <HAL_GetTick>
 8004630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004634:	f7fe fc04 	bl	8002e40 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b03      	cmp	r3, #3
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e1b0      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004646:	f7ff fc72 	bl	8003f2e <LL_RCC_LSI2_IsReady>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f1      	beq.n	8004634 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fc7c 	bl	8003f52 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800465a:	f7ff fc23 	bl	8003ea4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fe fbef 	bl	8002e40 <HAL_GetTick>
 8004662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004666:	f7fe fbeb 	bl	8002e40 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e197      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004678:	f7ff fc25 	bl	8003ec6 <LL_RCC_LSI1_IsReady>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f1      	bne.n	8004666 <HAL_RCC_OscConfig+0x31a>
 8004682:	e051      	b.n	8004728 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004684:	f7ff fbfd 	bl	8003e82 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fe fbda 	bl	8002e40 <HAL_GetTick>
 800468c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800468e:	e00c      	b.n	80046aa <HAL_RCC_OscConfig+0x35e>
 8004690:	20000014 	.word	0x20000014
 8004694:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004698:	f7fe fbd2 	bl	8002e40 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e17e      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80046aa:	f7ff fc0c 	bl	8003ec6 <LL_RCC_LSI1_IsReady>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f1      	beq.n	8004698 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80046b4:	f7ff fc2a 	bl	8003f0c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046ba:	f7fe fbc1 	bl	8002e40 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e16d      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80046cc:	f7ff fc2f 	bl	8003f2e <LL_RCC_LSI2_IsReady>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f1      	bne.n	80046ba <HAL_RCC_OscConfig+0x36e>
 80046d6:	e027      	b.n	8004728 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80046d8:	f7ff fc18 	bl	8003f0c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046dc:	f7fe fbb0 	bl	8002e40 <HAL_GetTick>
 80046e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046e4:	f7fe fbac 	bl	8002e40 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e158      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80046f6:	f7ff fc1a 	bl	8003f2e <LL_RCC_LSI2_IsReady>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f1      	bne.n	80046e4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004700:	f7ff fbd0 	bl	8003ea4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fe fb9c 	bl	8002e40 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800470c:	f7fe fb98 	bl	8002e40 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e144      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800471e:	f7ff fbd2 	bl	8003ec6 <LL_RCC_LSI1_IsReady>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f1      	bne.n	800470c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d05b      	beq.n	80047ec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004734:	4b9e      	ldr	r3, [pc, #632]	; (80049b0 <HAL_RCC_OscConfig+0x664>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d114      	bne.n	800476a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004740:	f7ff fa9c 	bl	8003c7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004744:	f7fe fb7c 	bl	8002e40 <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474c:	f7fe fb78 	bl	8002e40 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e124      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475e:	4b94      	ldr	r3, [pc, #592]	; (80049b0 <HAL_RCC_OscConfig+0x664>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <HAL_RCC_OscConfig+0x42c>
 8004772:	f7ff fb30 	bl	8003dd6 <LL_RCC_LSE_Enable>
 8004776:	e00c      	b.n	8004792 <HAL_RCC_OscConfig+0x446>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b05      	cmp	r3, #5
 800477e:	d104      	bne.n	800478a <HAL_RCC_OscConfig+0x43e>
 8004780:	f7ff fb4b 	bl	8003e1a <LL_RCC_LSE_EnableBypass>
 8004784:	f7ff fb27 	bl	8003dd6 <LL_RCC_LSE_Enable>
 8004788:	e003      	b.n	8004792 <HAL_RCC_OscConfig+0x446>
 800478a:	f7ff fb35 	bl	8003df8 <LL_RCC_LSE_Disable>
 800478e:	f7ff fb55 	bl	8003e3c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d014      	beq.n	80047c4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fe fb51 	bl	8002e40 <HAL_GetTick>
 800479e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a2:	f7fe fb4d 	bl	8002e40 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e0f7      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80047b8:	f7ff fb51 	bl	8003e5e <LL_RCC_LSE_IsReady>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <HAL_RCC_OscConfig+0x456>
 80047c2:	e013      	b.n	80047ec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fe fb3c 	bl	8002e40 <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fe fb38 	bl	8002e40 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0e2      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80047e2:	f7ff fb3c 	bl	8003e5e <LL_RCC_LSE_IsReady>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ef      	bne.n	80047cc <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80d8 	beq.w	80049a6 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f6:	f7ff fc44 	bl	8004082 <LL_RCC_GetSysClkSource>
 80047fa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80047fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	2b02      	cmp	r3, #2
 800480a:	f040 80a6 	bne.w	800495a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d123      	bne.n	8004864 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d11c      	bne.n	8004864 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d114      	bne.n	8004864 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d10d      	bne.n	8004864 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d106      	bne.n	8004864 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d054      	beq.n	800490e <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d04f      	beq.n	800490a <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800486a:	f7ff fcc0 	bl	80041ee <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800486e:	f7fe fae7 	bl	8002e40 <HAL_GetTick>
 8004872:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fe fae3 	bl	8002e40 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e08f      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ef      	bne.n	8004876 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	4b45      	ldr	r3, [pc, #276]	; (80049b4 <HAL_RCC_OscConfig+0x668>)
 800489e:	4013      	ands	r3, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048ae:	0212      	lsls	r2, r2, #8
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048b6:	4311      	orrs	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048c2:	430a      	orrs	r2, r1
 80048c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048cc:	f7ff fc80 	bl	80041d0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048e0:	f7fe faae 	bl	8002e40 <HAL_GetTick>
 80048e4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fe faaa 	bl	8002e40 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e056      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004908:	e04d      	b.n	80049a6 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e04c      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d144      	bne.n	80049a6 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800491c:	f7ff fc58 	bl	80041d0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004930:	f7fe fa86 	bl	8002e40 <HAL_GetTick>
 8004934:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fe fa82 	bl	8002e40 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e02e      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ef      	beq.n	8004938 <HAL_RCC_OscConfig+0x5ec>
 8004958:	e025      	b.n	80049a6 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d020      	beq.n	80049a2 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004960:	f7ff fc45 	bl	80041ee <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fe fa6c 	bl	8002e40 <HAL_GetTick>
 8004968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496c:	f7fe fa68 	bl	8002e40 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e014      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ef      	bne.n	800496c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800498c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	60d3      	str	r3, [r2, #12]
 80049a0:	e001      	b.n	80049a6 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3734      	adds	r7, #52	; 0x34
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd90      	pop	{r4, r7, pc}
 80049b0:	58000400 	.word	0x58000400
 80049b4:	11c1808c 	.word	0x11c1808c

080049b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e12d      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049cc:	4b98      	ldr	r3, [pc, #608]	; (8004c30 <HAL_RCC_ClockConfig+0x278>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d91b      	bls.n	8004a12 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b95      	ldr	r3, [pc, #596]	; (8004c30 <HAL_RCC_ClockConfig+0x278>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 0207 	bic.w	r2, r3, #7
 80049e2:	4993      	ldr	r1, [pc, #588]	; (8004c30 <HAL_RCC_ClockConfig+0x278>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ea:	f7fe fa29 	bl	8002e40 <HAL_GetTick>
 80049ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049f2:	f7fe fa25 	bl	8002e40 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e111      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a04:	4b8a      	ldr	r3, [pc, #552]	; (8004c30 <HAL_RCC_ClockConfig+0x278>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d1ef      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fb39 	bl	800409a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a28:	f7fe fa0a 	bl	8002e40 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a30:	f7fe fa06 	bl	8002e40 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0f2      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004a42:	f7ff fc26 	bl	8004292 <LL_RCC_IsActiveFlag_HPRE>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f1      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d016      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fb30 	bl	80040c2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a62:	f7fe f9ed 	bl	8002e40 <HAL_GetTick>
 8004a66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a6a:	f7fe f9e9 	bl	8002e40 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0d5      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a7c:	f7ff fc1b 	bl	80042b6 <LL_RCC_IsActiveFlag_C2HPRE>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f1      	beq.n	8004a6a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fb29 	bl	80040ee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a9c:	f7fe f9d0 	bl	8002e40 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004aa4:	f7fe f9cc 	bl	8002e40 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e0b8      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ab6:	f7ff fc11 	bl	80042dc <LL_RCC_IsActiveFlag_SHDHPRE>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f1      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d016      	beq.n	8004afa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fb23 	bl	800411c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ad6:	f7fe f9b3 	bl	8002e40 <HAL_GetTick>
 8004ada:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ade:	f7fe f9af 	bl	8002e40 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e09b      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004af0:	f7ff fc07 	bl	8004302 <LL_RCC_IsActiveFlag_PPRE1>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f1      	beq.n	8004ade <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d017      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fb19 	bl	8004144 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b12:	f7fe f995 	bl	8002e40 <HAL_GetTick>
 8004b16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b1a:	f7fe f991 	bl	8002e40 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e07d      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b2c:	f7ff fbfb 	bl	8004326 <LL_RCC_IsActiveFlag_PPRE2>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f1      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d043      	beq.n	8004bca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004b4a:	f7ff f8ed 	bl	8003d28 <LL_RCC_HSE_IsReady>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11e      	bne.n	8004b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e067      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d106      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004b60:	f7ff fb54 	bl	800420c <LL_RCC_PLL_IsReady>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d113      	bne.n	8004b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e05c      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004b76:	f7ff fa21 	bl	8003fbc <LL_RCC_MSI_IsReady>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d108      	bne.n	8004b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e051      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004b84:	f7ff f900 	bl	8003d88 <LL_RCC_HSI_IsReady>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e04a      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fa5f 	bl	800405a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9c:	f7fe f950 	bl	8002e40 <HAL_GetTick>
 8004ba0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba4:	f7fe f94c 	bl	8002e40 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e036      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	f7ff fa62 	bl	8004082 <LL_RCC_GetSysClkSource>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d1ec      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bca:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_RCC_ClockConfig+0x278>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d21b      	bcs.n	8004c10 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <HAL_RCC_ClockConfig+0x278>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f023 0207 	bic.w	r2, r3, #7
 8004be0:	4913      	ldr	r1, [pc, #76]	; (8004c30 <HAL_RCC_ClockConfig+0x278>)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be8:	f7fe f92a 	bl	8002e40 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004bf0:	f7fe f926 	bl	8002e40 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e012      	b.n	8004c28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_ClockConfig+0x278>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d1ef      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c10:	f000 f87e 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004c14:	4603      	mov	r3, r0
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <HAL_RCC_ClockConfig+0x27c>)
 8004c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004c1a:	f7fe f91d 	bl	8002e58 <HAL_GetTickPrio>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe f8bf 	bl	8002da4 <HAL_InitTick>
 8004c26:	4603      	mov	r3, r0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	58004000 	.word	0x58004000
 8004c34:	20000014 	.word	0x20000014

08004c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c3e:	f7ff fa20 	bl	8004082 <LL_RCC_GetSysClkSource>
 8004c42:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c4a:	f7ff f9dc 	bl	8004006 <LL_RCC_MSI_GetRange>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	e04b      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d102      	bne.n	8004c6c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c66:	4b28      	ldr	r3, [pc, #160]	; (8004d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e045      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d10a      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c72:	f7ff f829 	bl	8003cc8 <LL_RCC_HSE_IsEnabledDiv2>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d102      	bne.n	8004c82 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e03a      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004c82:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e037      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004c88:	f7ff faf7 	bl	800427a <LL_RCC_PLL_GetMainSource>
 8004c8c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d003      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x64>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x6a>
 8004c9a:	e00d      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c9e:	60bb      	str	r3, [r7, #8]
        break;
 8004ca0:	e015      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ca2:	f7ff f811 	bl	8003cc8 <LL_RCC_HSE_IsEnabledDiv2>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d102      	bne.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004cac:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004cb0:	e00d      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004cb2:	4b16      	ldr	r3, [pc, #88]	; (8004d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004cb4:	60bb      	str	r3, [r7, #8]
        break;
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004cb8:	f7ff f9a5 	bl	8004006 <LL_RCC_MSI_GetRange>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cca:	60bb      	str	r3, [r7, #8]
        break;
 8004ccc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004cce:	f7ff faaf 	bl	8004230 <LL_RCC_PLL_GetN>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	fb03 f402 	mul.w	r4, r3, r2
 8004cda:	f7ff fac2 	bl	8004262 <LL_RCC_PLL_GetDivider>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ce8:	f7ff faaf 	bl	800424a <LL_RCC_PLL_GetR>
 8004cec:	4603      	mov	r3, r0
 8004cee:	0f5b      	lsrs	r3, r3, #29
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	fbb4 f3f3 	udiv	r3, r4, r3
 8004cf6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	0800e38c 	.word	0x0800e38c
 8004d08:	00f42400 	.word	0x00f42400
 8004d0c:	01e84800 	.word	0x01e84800

08004d10 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d10:	b598      	push	{r3, r4, r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004d14:	f7ff ff90 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	f7ff fa27 	bl	800416c <LL_RCC_GetAHBPrescaler>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a03      	ldr	r2, [pc, #12]	; (8004d34 <HAL_RCC_GetHCLKFreq+0x24>)
 8004d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd98      	pop	{r3, r4, r7, pc}
 8004d34:	0800e32c 	.word	0x0800e32c

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b598      	push	{r3, r4, r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d3c:	f7ff ffe8 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004d40:	4604      	mov	r4, r0
 8004d42:	f7ff fa2d 	bl	80041a0 <LL_RCC_GetAPB1Prescaler>
 8004d46:	4603      	mov	r3, r0
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd98      	pop	{r3, r4, r7, pc}
 8004d60:	0800e36c 	.word	0x0800e36c

08004d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d64:	b598      	push	{r3, r4, r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004d68:	f7ff ffd2 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	f7ff fa23 	bl	80041b8 <LL_RCC_GetAPB2Prescaler>
 8004d72:	4603      	mov	r3, r0
 8004d74:	0adb      	lsrs	r3, r3, #11
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd98      	pop	{r3, r4, r7, pc}
 8004d8c:	0800e36c 	.word	0x0800e36c

08004d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2bb0      	cmp	r3, #176	; 0xb0
 8004d9c:	d903      	bls.n	8004da6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e007      	b.n	8004db6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004db6:	f7ff f9e5 	bl	8004184 <LL_RCC_GetAHB4Prescaler>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	4a0c      	ldr	r2, [pc, #48]	; (8004df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	0c9b      	lsrs	r3, r3, #18
 8004dda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f80c 	bl	8004dfc <RCC_SetFlashLatency>
 8004de4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	0800e38c 	.word	0x0800e38c
 8004df4:	0800e32c 	.word	0x0800e32c
 8004df8:	431bde83 	.word	0x431bde83

08004dfc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b08f      	sub	sp, #60	; 0x3c
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <RCC_SetFlashLatency+0x9c>)
 8004e08:	f107 041c 	add.w	r4, r7, #28
 8004e0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <RCC_SetFlashLatency+0xa0>)
 8004e14:	f107 040c 	add.w	r4, r7, #12
 8004e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e22:	2300      	movs	r3, #0
 8004e24:	633b      	str	r3, [r7, #48]	; 0x30
 8004e26:	e013      	b.n	8004e50 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	3338      	adds	r3, #56	; 0x38
 8004e2e:	443b      	add	r3, r7
 8004e30:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d807      	bhi.n	8004e4a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	3338      	adds	r3, #56	; 0x38
 8004e40:	443b      	add	r3, r7
 8004e42:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004e48:	e005      	b.n	8004e56 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d9e8      	bls.n	8004e28 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <RCC_SetFlashLatency+0xa4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 0207 	bic.w	r2, r3, #7
 8004e5e:	4910      	ldr	r1, [pc, #64]	; (8004ea0 <RCC_SetFlashLatency+0xa4>)
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e66:	f7fd ffeb 	bl	8002e40 <HAL_GetTick>
 8004e6a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e6c:	e008      	b.n	8004e80 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e6e:	f7fd ffe7 	bl	8002e40 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e007      	b.n	8004e90 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <RCC_SetFlashLatency+0xa4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d1ef      	bne.n	8004e6e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	373c      	adds	r7, #60	; 0x3c
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd90      	pop	{r4, r7, pc}
 8004e98:	0800ce28 	.word	0x0800ce28
 8004e9c:	0800ce38 	.word	0x0800ce38
 8004ea0:	58004000 	.word	0x58004000

08004ea4 <LL_RCC_LSE_IsEnabled>:
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <LL_RCC_LSE_IsEnabled+0x18>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <LL_RCC_LSE_IsEnabled+0x1a>
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_RCC_LSE_IsReady>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d101      	bne.n	8004ee0 <LL_RCC_LSE_IsReady+0x18>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <LL_RCC_LSE_IsReady+0x1a>
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_RCC_SetRFWKPClockSource>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <LL_RCC_SetSMPSClockSource>:
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	f023 0203 	bic.w	r2, r3, #3
 8004f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <LL_RCC_SetSMPSPrescaler>:
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <LL_RCC_SetUSARTClockSource>:
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f023 0203 	bic.w	r2, r3, #3
 8004f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <LL_RCC_SetLPUARTClockSource>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <LL_RCC_SetI2CClockSource>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	401a      	ands	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <LL_RCC_SetLPTIMClockSource>:
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	43db      	mvns	r3, r3
 8005012:	401a      	ands	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_RCC_SetRNGClockSource>:
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_RCC_SetCLK48ClockSource>:
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800506e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_RCC_SetADCClockSource>:
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800508e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800509a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <LL_RCC_SetRTCClockSource>:
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80050ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_RCC_GetRTCClockSource>:
{
 80050de:	b480      	push	{r7}
 80050e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80050e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <LL_RCC_ForceBackupDomainReset>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <LL_RCC_ReleaseBackupDomainReset>:
{
 800511a:	b480      	push	{r7}
 800511c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005132:	bf00      	nop
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005144:	2300      	movs	r3, #0
 8005146:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005148:	2300      	movs	r3, #0
 800514a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005154:	2b00      	cmp	r3, #0
 8005156:	d046      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005158:	f7ff ffc1 	bl	80050de <LL_RCC_GetRTCClockSource>
 800515c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	429a      	cmp	r2, r3
 8005166:	d03c      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005168:	f7fe fd88 	bl	8003c7c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff ff9b 	bl	80050b2 <LL_RCC_SetRTCClockSource>
 800517c:	e02e      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005188:	f7ff ffb6 	bl	80050f8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800518c:	f7ff ffc5 	bl	800511a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800519e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80051a8:	f7ff fe7c 	bl	8004ea4 <LL_RCC_LSE_IsEnabled>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d114      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051b2:	f7fd fe45 	bl	8002e40 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80051b8:	e00b      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ba:	f7fd fe41 	bl	8002e40 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d902      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	77fb      	strb	r3, [r7, #31]
              break;
 80051d0:	e004      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80051d2:	f7ff fe79 	bl	8004ec8 <LL_RCC_LSE_IsReady>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d1ee      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80051dc:	7ffb      	ldrb	r3, [r7, #31]
 80051de:	77bb      	strb	r3, [r7, #30]
 80051e0:	e001      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
 80051e4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d004      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff feb6 	bl	8004f68 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fec1 	bl	8004f94 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fee9 	bl	8004ffa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fede 	bl	8004ffa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff feb6 	bl	8004fc0 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02b      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d008      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005272:	d003      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d105      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fed4 	bl	800502e <LL_RCC_SetRNGClockSource>
 8005286:	e00a      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	2000      	movs	r0, #0
 8005294:	f7ff fecb 	bl	800502e <LL_RCC_SetRNGClockSource>
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff fede 	bl	800505a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80052a6:	d107      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fedc 	bl	8005086 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d6:	d107      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e6:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fdf7 	bl	8004eec <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fe16 	bl	8004f40 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fdfd 	bl	8004f18 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800531e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e09f      	b.n	800547a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fd fb46 	bl	80029e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800535c:	4b49      	ldr	r3, [pc, #292]	; (8005484 <HAL_RTC_Init+0x15c>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b10      	cmp	r3, #16
 8005366:	d07e      	beq.n	8005466 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	22ca      	movs	r2, #202	; 0xca
 800536e:	625a      	str	r2, [r3, #36]	; 0x24
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2253      	movs	r2, #83	; 0x53
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8ab 	bl	80054d4 <RTC_EnterInitMode>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	22ff      	movs	r2, #255	; 0xff
 800538a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2204      	movs	r2, #4
 8005390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	e067      	b.n	800546a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ac:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6899      	ldr	r1, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	68d2      	ldr	r2, [r2, #12]
 80053d4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6919      	ldr	r1, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	041a      	lsls	r2, r3, #16
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0202 	bic.w	r2, r2, #2
 8005408:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d113      	bne.n	8005458 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f829 	bl	8005488 <HAL_RTC_WaitForSynchro>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00d      	beq.n	8005458 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	22ff      	movs	r2, #255	; 0xff
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2204      	movs	r2, #4
 8005448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e010      	b.n	800547a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	73fb      	strb	r3, [r7, #15]
 8005464:	e001      	b.n	800546a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40002800 	.word	0x40002800

08005488 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800549e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80054a0:	f7fd fcce 	bl	8002e40 <HAL_GetTick>
 80054a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054a6:	e009      	b.n	80054bc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054a8:	f7fd fcca 	bl	8002e40 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b6:	d901      	bls.n	80054bc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e007      	b.n	80054cc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0ee      	beq.n	80054a8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d119      	bne.n	800551e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f04f 32ff 	mov.w	r2, #4294967295
 80054f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80054f4:	f7fd fca4 	bl	8002e40 <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054fa:	e009      	b.n	8005510 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80054fc:	f7fd fca0 	bl	8002e40 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800550a:	d901      	bls.n	8005510 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e007      	b.n	8005520 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0ee      	beq.n	80054fc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800553e:	2302      	movs	r3, #2
 8005540:	e0a8      	b.n	8005694 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	22ca      	movs	r2, #202	; 0xca
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2253      	movs	r2, #83	; 0x53
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556c:	2b00      	cmp	r3, #0
 800556e:	d020      	beq.n	80055b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005570:	f7fd fc66 	bl	8002e40 <HAL_GetTick>
 8005574:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005576:	e015      	b.n	80055a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005578:	f7fd fc62 	bl	8002e40 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005586:	d90d      	bls.n	80055a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	22ff      	movs	r2, #255	; 0xff
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2203      	movs	r2, #3
 8005594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e077      	b.n	8005694 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e2      	bne.n	8005578 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80055d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80055d4:	f7fd fc34 	bl	8002e40 <HAL_GetTick>
 80055d8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80055da:	e015      	b.n	8005608 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055dc:	f7fd fc30 	bl	8002e40 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ea:	d90d      	bls.n	8005608 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	22ff      	movs	r2, #255	; 0xff
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2203      	movs	r2, #3
 80055f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e045      	b.n	8005694 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0e2      	beq.n	80055dc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0207 	bic.w	r2, r2, #7
 800562c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6899      	ldr	r1, [r3, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800563e:	4b17      	ldr	r3, [pc, #92]	; (800569c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005644:	4a15      	ldr	r2, [pc, #84]	; (800569c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800564a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a12      	ldr	r2, [pc, #72]	; (800569c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005658:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005668:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005678:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	22ff      	movs	r2, #255	; 0xff
 8005680:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	58000800 	.word	0x58000800

080056a0 <LL_RCC_GetUSARTClockSource>:
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80056a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4013      	ands	r3, r2
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <LL_RCC_GetLPUARTClockSource>:
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80056c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4013      	ands	r3, r2
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e042      	b.n	8005778 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7fd f8f3 	bl	80028f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2224      	movs	r2, #36	; 0x24
 800570e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fe14 	bl	8006358 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fbe9 	bl	8005f08 <UART_SetConfig>
 8005736:	4603      	mov	r3, r0
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e01b      	b.n	8005778 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800574e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800575e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fe93 	bl	800649c <UART_CheckIdleState>
 8005776:	4603      	mov	r3, r0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005794:	2b20      	cmp	r3, #32
 8005796:	d167      	bne.n	8005868 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_UART_Transmit_DMA+0x24>
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e060      	b.n	800586a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2221      	movs	r2, #33	; 0x21
 80057ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d028      	beq.n	8005828 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057da:	4a26      	ldr	r2, [pc, #152]	; (8005874 <HAL_UART_Transmit_DMA+0xf4>)
 80057dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e2:	4a25      	ldr	r2, [pc, #148]	; (8005878 <HAL_UART_Transmit_DMA+0xf8>)
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ea:	4a24      	ldr	r2, [pc, #144]	; (800587c <HAL_UART_Transmit_DMA+0xfc>)
 80057ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f2:	2200      	movs	r2, #0
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fe:	4619      	mov	r1, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3328      	adds	r3, #40	; 0x28
 8005806:	461a      	mov	r2, r3
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	f7fd fd63 	bl	80032d4 <HAL_DMA_Start_IT>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2210      	movs	r2, #16
 8005818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e020      	b.n	800586a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2240      	movs	r2, #64	; 0x40
 800582e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3308      	adds	r3, #8
 8005836:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	613b      	str	r3, [r7, #16]
   return(result);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005850:	623a      	str	r2, [r7, #32]
 8005852:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	69f9      	ldr	r1, [r7, #28]
 8005856:	6a3a      	ldr	r2, [r7, #32]
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	61bb      	str	r3, [r7, #24]
   return(result);
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e5      	bne.n	8005830 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e000      	b.n	800586a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
  }
}
 800586a:	4618      	mov	r0, r3
 800586c:	3728      	adds	r7, #40	; 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	0800680d 	.word	0x0800680d
 8005878:	080068a7 	.word	0x080068a7
 800587c:	080068c3 	.word	0x080068c3

08005880 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b0ba      	sub	sp, #232	; 0xe8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80058ae:	4013      	ands	r3, r2
 80058b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11b      	bne.n	80058f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d015      	beq.n	80058f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 82e3 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
      }
      return;
 80058f2:	e2dd      	b.n	8005eb0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8123 	beq.w	8005b44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80058fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005902:	4b8d      	ldr	r3, [pc, #564]	; (8005b38 <HAL_UART_IRQHandler+0x2b8>)
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800590a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800590e:	4b8b      	ldr	r3, [pc, #556]	; (8005b3c <HAL_UART_IRQHandler+0x2bc>)
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8116 	beq.w	8005b44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d011      	beq.n	8005948 <HAL_UART_IRQHandler+0xc8>
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2201      	movs	r2, #1
 8005936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d011      	beq.n	8005978 <HAL_UART_IRQHandler+0xf8>
 8005954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00b      	beq.n	8005978 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2202      	movs	r2, #2
 8005966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596e:	f043 0204 	orr.w	r2, r3, #4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d011      	beq.n	80059a8 <HAL_UART_IRQHandler+0x128>
 8005984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00b      	beq.n	80059a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2204      	movs	r2, #4
 8005996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	f043 0202 	orr.w	r2, r3, #2
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d017      	beq.n	80059e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80059c4:	4b5c      	ldr	r3, [pc, #368]	; (8005b38 <HAL_UART_IRQHandler+0x2b8>)
 80059c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2208      	movs	r2, #8
 80059d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f043 0208 	orr.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <HAL_UART_IRQHandler+0x196>
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00c      	beq.n	8005a16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0c:	f043 0220 	orr.w	r2, r3, #32
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8249 	beq.w	8005eb4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d013      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d054      	beq.n	8005b24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fe60 	bl	8006740 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	d146      	bne.n	8005b1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3308      	adds	r3, #8
 8005a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1d9      	bne.n	8005a8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d017      	beq.n	8005b14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aea:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <HAL_UART_IRQHandler+0x2c0>)
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fd fcc7 	bl	8003488 <HAL_DMA_Abort_IT>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d019      	beq.n	8005b34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b12:	e00f      	b.n	8005b34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f9e1 	bl	8005edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1a:	e00b      	b.n	8005b34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f9dd 	bl	8005edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b22:	e007      	b.n	8005b34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f9d9 	bl	8005edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005b32:	e1bf      	b.n	8005eb4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	bf00      	nop
    return;
 8005b36:	e1bd      	b.n	8005eb4 <HAL_UART_IRQHandler+0x634>
 8005b38:	10000001 	.word	0x10000001
 8005b3c:	04000120 	.word	0x04000120
 8005b40:	08006943 	.word	0x08006943

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f040 8153 	bne.w	8005df4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b52:	f003 0310 	and.w	r3, r3, #16
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 814c 	beq.w	8005df4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8145 	beq.w	8005df4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	f040 80bb 	bne.w	8005cf8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 818f 	beq.w	8005eb8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	f080 8187 	bcs.w	8005eb8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f040 8087 	bne.w	8005cd6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bf6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1da      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e1      	bne.n	8005c12 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3308      	adds	r3, #8
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e3      	bne.n	8005c4e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca4:	f023 0310 	bic.w	r3, r3, #16
 8005ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e4      	bne.n	8005c94 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fd fb7a 	bl	80033ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f8fd 	bl	8005ef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cf6:	e0df      	b.n	8005eb8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80d1 	beq.w	8005ebc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80cc 	beq.w	8005ebc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d46:	647b      	str	r3, [r7, #68]	; 0x44
 8005d48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e4      	bne.n	8005d24 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d82:	633a      	str	r2, [r7, #48]	; 0x30
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e1      	bne.n	8005d5a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0310 	bic.w	r3, r3, #16
 8005dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	69b9      	ldr	r1, [r7, #24]
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e4      	bne.n	8005daa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f87f 	bl	8005ef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005df2:	e063      	b.n	8005ebc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <HAL_UART_IRQHandler+0x59e>
 8005e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fdd4 	bl	80069c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e1c:	e051      	b.n	8005ec2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d014      	beq.n	8005e54 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d03a      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
    }
    return;
 8005e52:	e035      	b.n	8005ec0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <HAL_UART_IRQHandler+0x5f4>
 8005e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fd7e 	bl	800696e <UART_EndTransmit_IT>
    return;
 8005e72:	e026      	b.n	8005ec2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_UART_IRQHandler+0x614>
 8005e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fdad 	bl	80069ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e92:	e016      	b.n	8005ec2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d010      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x642>
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	da0c      	bge.n	8005ec2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fd95 	bl	80069d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eae:	e008      	b.n	8005ec2 <HAL_UART_IRQHandler+0x642>
      return;
 8005eb0:	bf00      	nop
 8005eb2:	e006      	b.n	8005ec2 <HAL_UART_IRQHandler+0x642>
    return;
 8005eb4:	bf00      	nop
 8005eb6:	e004      	b.n	8005ec2 <HAL_UART_IRQHandler+0x642>
      return;
 8005eb8:	bf00      	nop
 8005eba:	e002      	b.n	8005ec2 <HAL_UART_IRQHandler+0x642>
      return;
 8005ebc:	bf00      	nop
 8005ebe:	e000      	b.n	8005ec2 <HAL_UART_IRQHandler+0x642>
    return;
 8005ec0:	bf00      	nop
  }
}
 8005ec2:	37e8      	adds	r7, #232	; 0xe8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f0c:	b08c      	sub	sp, #48	; 0x30
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4baf      	ldr	r3, [pc, #700]	; (80061f4 <UART_SetConfig+0x2ec>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4aa4      	ldr	r2, [pc, #656]	; (80061f8 <UART_SetConfig+0x2f0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f70:	4313      	orrs	r3, r2
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005f7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	f023 010f 	bic.w	r1, r3, #15
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a95      	ldr	r2, [pc, #596]	; (80061fc <UART_SetConfig+0x2f4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d125      	bne.n	8005ff8 <UART_SetConfig+0xf0>
 8005fac:	2003      	movs	r0, #3
 8005fae:	f7ff fb77 	bl	80056a0 <LL_RCC_GetUSARTClockSource>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d81b      	bhi.n	8005ff0 <UART_SetConfig+0xe8>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0xb8>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005fd1 	.word	0x08005fd1
 8005fc4:	08005fe1 	.word	0x08005fe1
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08005fe9 	.word	0x08005fe9
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd6:	e042      	b.n	800605e <UART_SetConfig+0x156>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fde:	e03e      	b.n	800605e <UART_SetConfig+0x156>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe6:	e03a      	b.n	800605e <UART_SetConfig+0x156>
 8005fe8:	2308      	movs	r3, #8
 8005fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fee:	e036      	b.n	800605e <UART_SetConfig+0x156>
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff6:	e032      	b.n	800605e <UART_SetConfig+0x156>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a7e      	ldr	r2, [pc, #504]	; (80061f8 <UART_SetConfig+0x2f0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d12a      	bne.n	8006058 <UART_SetConfig+0x150>
 8006002:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006006:	f7ff fb5b 	bl	80056c0 <LL_RCC_GetLPUARTClockSource>
 800600a:	4603      	mov	r3, r0
 800600c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006010:	d01a      	beq.n	8006048 <UART_SetConfig+0x140>
 8006012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006016:	d81b      	bhi.n	8006050 <UART_SetConfig+0x148>
 8006018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601c:	d00c      	beq.n	8006038 <UART_SetConfig+0x130>
 800601e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006022:	d815      	bhi.n	8006050 <UART_SetConfig+0x148>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <UART_SetConfig+0x128>
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602c:	d008      	beq.n	8006040 <UART_SetConfig+0x138>
 800602e:	e00f      	b.n	8006050 <UART_SetConfig+0x148>
 8006030:	2300      	movs	r3, #0
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006036:	e012      	b.n	800605e <UART_SetConfig+0x156>
 8006038:	2302      	movs	r3, #2
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603e:	e00e      	b.n	800605e <UART_SetConfig+0x156>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006046:	e00a      	b.n	800605e <UART_SetConfig+0x156>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604e:	e006      	b.n	800605e <UART_SetConfig+0x156>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006056:	e002      	b.n	800605e <UART_SetConfig+0x156>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a65      	ldr	r2, [pc, #404]	; (80061f8 <UART_SetConfig+0x2f0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	f040 8097 	bne.w	8006198 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800606a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800606e:	2b08      	cmp	r3, #8
 8006070:	d823      	bhi.n	80060ba <UART_SetConfig+0x1b2>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x170>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060bb 	.word	0x080060bb
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060bb 	.word	0x080060bb
 8006088:	080060ab 	.word	0x080060ab
 800608c:	080060bb 	.word	0x080060bb
 8006090:	080060bb 	.word	0x080060bb
 8006094:	080060bb 	.word	0x080060bb
 8006098:	080060b3 	.word	0x080060b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fe fe4c 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 80060a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060a2:	e010      	b.n	80060c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a4:	4b56      	ldr	r3, [pc, #344]	; (8006200 <UART_SetConfig+0x2f8>)
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060a8:	e00d      	b.n	80060c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060aa:	f7fe fdc5 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060b0:	e009      	b.n	80060c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060b8:	e005      	b.n	80060c6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 812b 	beq.w	8006324 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	4a4c      	ldr	r2, [pc, #304]	; (8006204 <UART_SetConfig+0x2fc>)
 80060d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060d8:	461a      	mov	r2, r3
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4413      	add	r3, r2
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d305      	bcc.n	80060fe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d903      	bls.n	8006106 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006104:	e10e      	b.n	8006324 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	2200      	movs	r2, #0
 800610a:	60bb      	str	r3, [r7, #8]
 800610c:	60fa      	str	r2, [r7, #12]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	4a3c      	ldr	r2, [pc, #240]	; (8006204 <UART_SetConfig+0x2fc>)
 8006114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006118:	b29b      	uxth	r3, r3
 800611a:	2200      	movs	r2, #0
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006128:	f7fa fb68 	bl	80007fc <__aeabi_uldivmod>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4610      	mov	r0, r2
 8006132:	4619      	mov	r1, r3
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	020b      	lsls	r3, r1, #8
 800613e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006142:	0202      	lsls	r2, r0, #8
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	6849      	ldr	r1, [r1, #4]
 8006148:	0849      	lsrs	r1, r1, #1
 800614a:	2000      	movs	r0, #0
 800614c:	460c      	mov	r4, r1
 800614e:	4605      	mov	r5, r0
 8006150:	eb12 0804 	adds.w	r8, r2, r4
 8006154:	eb43 0905 	adc.w	r9, r3, r5
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	469a      	mov	sl, r3
 8006160:	4693      	mov	fp, r2
 8006162:	4652      	mov	r2, sl
 8006164:	465b      	mov	r3, fp
 8006166:	4640      	mov	r0, r8
 8006168:	4649      	mov	r1, r9
 800616a:	f7fa fb47 	bl	80007fc <__aeabi_uldivmod>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4613      	mov	r3, r2
 8006174:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617c:	d308      	bcc.n	8006190 <UART_SetConfig+0x288>
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006184:	d204      	bcs.n	8006190 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6a3a      	ldr	r2, [r7, #32]
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	e0c9      	b.n	8006324 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006196:	e0c5      	b.n	8006324 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a0:	d16d      	bne.n	800627e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80061a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061a6:	3b01      	subs	r3, #1
 80061a8:	2b07      	cmp	r3, #7
 80061aa:	d82d      	bhi.n	8006208 <UART_SetConfig+0x300>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x2ac>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061d5 	.word	0x080061d5
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	08006209 	.word	0x08006209
 80061c0:	080061e3 	.word	0x080061e3
 80061c4:	08006209 	.word	0x08006209
 80061c8:	08006209 	.word	0x08006209
 80061cc:	08006209 	.word	0x08006209
 80061d0:	080061eb 	.word	0x080061eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d4:	f7fe fdc6 	bl	8004d64 <HAL_RCC_GetPCLK2Freq>
 80061d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061da:	e01b      	b.n	8006214 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061dc:	4b08      	ldr	r3, [pc, #32]	; (8006200 <UART_SetConfig+0x2f8>)
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061e0:	e018      	b.n	8006214 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e2:	f7fe fd29 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80061e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061e8:	e014      	b.n	8006214 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061f0:	e010      	b.n	8006214 <UART_SetConfig+0x30c>
 80061f2:	bf00      	nop
 80061f4:	cfff69f3 	.word	0xcfff69f3
 80061f8:	40008000 	.word	0x40008000
 80061fc:	40013800 	.word	0x40013800
 8006200:	00f42400 	.word	0x00f42400
 8006204:	0800e3cc 	.word	0x0800e3cc
      default:
        pclk = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006212:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 8084 	beq.w	8006324 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	4a4b      	ldr	r2, [pc, #300]	; (8006350 <UART_SetConfig+0x448>)
 8006222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006226:	461a      	mov	r2, r3
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	fbb3 f3f2 	udiv	r3, r3, r2
 800622e:	005a      	lsls	r2, r3, #1
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	441a      	add	r2, r3
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	2b0f      	cmp	r3, #15
 8006246:	d916      	bls.n	8006276 <UART_SetConfig+0x36e>
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624e:	d212      	bcs.n	8006276 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f023 030f 	bic.w	r3, r3, #15
 8006258:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	b29b      	uxth	r3, r3
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	b29a      	uxth	r2, r3
 8006266:	8bfb      	ldrh	r3, [r7, #30]
 8006268:	4313      	orrs	r3, r2
 800626a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	8bfa      	ldrh	r2, [r7, #30]
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	e056      	b.n	8006324 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800627c:	e052      	b.n	8006324 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800627e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006282:	3b01      	subs	r3, #1
 8006284:	2b07      	cmp	r3, #7
 8006286:	d822      	bhi.n	80062ce <UART_SetConfig+0x3c6>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x388>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062b1 	.word	0x080062b1
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062bf 	.word	0x080062bf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062cf 	.word	0x080062cf
 80062a8:	080062cf 	.word	0x080062cf
 80062ac:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fe fd58 	bl	8004d64 <HAL_RCC_GetPCLK2Freq>
 80062b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062b6:	e010      	b.n	80062da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b26      	ldr	r3, [pc, #152]	; (8006354 <UART_SetConfig+0x44c>)
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062bc:	e00d      	b.n	80062da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fe fcbb 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062c4:	e009      	b.n	80062da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062cc:	e005      	b.n	80062da <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062d8:	bf00      	nop
    }

    if (pclk != 0U)
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d021      	beq.n	8006324 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	4a1a      	ldr	r2, [pc, #104]	; (8006350 <UART_SetConfig+0x448>)
 80062e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ea:	461a      	mov	r2, r3
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	441a      	add	r2, r3
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d909      	bls.n	800631e <UART_SetConfig+0x416>
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006310:	d205      	bcs.n	800631e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	b29a      	uxth	r2, r3
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	e002      	b.n	8006324 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2201      	movs	r2, #1
 8006328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2201      	movs	r2, #1
 8006330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2200      	movs	r2, #0
 8006338:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006340:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006344:	4618      	mov	r0, r3
 8006346:	3730      	adds	r7, #48	; 0x30
 8006348:	46bd      	mov	sp, r7
 800634a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800634e:	bf00      	nop
 8006350:	0800e3cc 	.word	0x0800e3cc
 8006354:	00f42400 	.word	0x00f42400

08006358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01a      	beq.n	800646e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006456:	d10a      	bne.n	800646e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b098      	sub	sp, #96	; 0x60
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064ac:	f7fc fcc8 	bl	8002e40 <HAL_GetTick>
 80064b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d12f      	bne.n	8006520 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c8:	2200      	movs	r2, #0
 80064ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f88e 	bl	80065f0 <UART_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d022      	beq.n	8006520 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ee:	653b      	str	r3, [r7, #80]	; 0x50
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064f8:	647b      	str	r3, [r7, #68]	; 0x44
 80064fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e6      	bne.n	80064da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e063      	b.n	80065e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b04      	cmp	r3, #4
 800652c:	d149      	bne.n	80065c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800652e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006536:	2200      	movs	r2, #0
 8006538:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f857 	bl	80065f0 <UART_WaitOnFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d03c      	beq.n	80065c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	623b      	str	r3, [r7, #32]
   return(result);
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800655c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006566:	633b      	str	r3, [r7, #48]	; 0x30
 8006568:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800656c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e6      	bne.n	8006548 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3308      	adds	r3, #8
 8006580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	60fb      	str	r3, [r7, #12]
   return(result);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	64bb      	str	r3, [r7, #72]	; 0x48
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800659a:	61fa      	str	r2, [r7, #28]
 800659c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	69b9      	ldr	r1, [r7, #24]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	617b      	str	r3, [r7, #20]
   return(result);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e5      	bne.n	800657a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e012      	b.n	80065e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3758      	adds	r7, #88	; 0x58
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006600:	e049      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d045      	beq.n	8006696 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660a:	f7fc fc19 	bl	8002e40 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <UART_WaitOnFlagUntilTimeout+0x30>
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e048      	b.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d031      	beq.n	8006696 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b08      	cmp	r3, #8
 800663e:	d110      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2208      	movs	r2, #8
 8006646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f879 	bl	8006740 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2208      	movs	r2, #8
 8006652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e029      	b.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800666c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006670:	d111      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800667a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f85f 	bl	8006740 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e00f      	b.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4013      	ands	r3, r2
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d0a6      	beq.n	8006602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066be:	b480      	push	{r7}
 80066c0:	b08f      	sub	sp, #60	; 0x3c
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e6      	bne.n	80066c6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3308      	adds	r3, #8
 80066fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	60bb      	str	r3, [r7, #8]
   return(result);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3308      	adds	r3, #8
 8006716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006718:	61ba      	str	r2, [r7, #24]
 800671a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6979      	ldr	r1, [r7, #20]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	613b      	str	r3, [r7, #16]
   return(result);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e5      	bne.n	80066f8 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006734:	bf00      	nop
 8006736:	373c      	adds	r7, #60	; 0x3c
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b095      	sub	sp, #84	; 0x54
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800675c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006766:	643b      	str	r3, [r7, #64]	; 0x40
 8006768:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800676c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e6      	bne.n	8006748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	61fb      	str	r3, [r7, #28]
   return(result);
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006790:	f023 0301 	bic.w	r3, r3, #1
 8006794:	64bb      	str	r3, [r7, #72]	; 0x48
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3308      	adds	r3, #8
 800679c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800679e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e3      	bne.n	800677a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d118      	bne.n	80067ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f023 0310 	bic.w	r3, r3, #16
 80067ce:	647b      	str	r3, [r7, #68]	; 0x44
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6979      	ldr	r1, [r7, #20]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	613b      	str	r3, [r7, #16]
   return(result);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e6      	bne.n	80067ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006800:	bf00      	nop
 8006802:	3754      	adds	r7, #84	; 0x54
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b090      	sub	sp, #64	; 0x40
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d137      	bne.n	8006898 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682a:	2200      	movs	r2, #0
 800682c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	623b      	str	r3, [r7, #32]
   return(result);
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006846:	63bb      	str	r3, [r7, #56]	; 0x38
 8006848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3308      	adds	r3, #8
 800684e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006850:	633a      	str	r2, [r7, #48]	; 0x30
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e5      	bne.n	8006830 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	60fb      	str	r3, [r7, #12]
   return(result);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
 800687a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	69b9      	ldr	r1, [r7, #24]
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	617b      	str	r3, [r7, #20]
   return(result);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e6      	bne.n	8006864 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006896:	e002      	b.n	800689e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006898:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800689a:	f7fb fd89 	bl	80023b0 <HAL_UART_TxCpltCallback>
}
 800689e:	bf00      	nop
 80068a0:	3740      	adds	r7, #64	; 0x40
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fb07 	bl	8005ec8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b086      	sub	sp, #24
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b80      	cmp	r3, #128	; 0x80
 80068ec:	d109      	bne.n	8006902 <UART_DMAError+0x40>
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b21      	cmp	r3, #33	; 0x21
 80068f2:	d106      	bne.n	8006902 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80068fc:	6978      	ldr	r0, [r7, #20]
 80068fe:	f7ff fede 	bl	80066be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d109      	bne.n	8006924 <UART_DMAError+0x62>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b22      	cmp	r3, #34	; 0x22
 8006914:	d106      	bne.n	8006924 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2200      	movs	r2, #0
 800691a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800691e:	6978      	ldr	r0, [r7, #20]
 8006920:	f7ff ff0e 	bl	8006740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	f043 0210 	orr.w	r2, r3, #16
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006934:	6978      	ldr	r0, [r7, #20]
 8006936:	f7ff fad1 	bl	8005edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800693a:	bf00      	nop
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff fabb 	bl	8005edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b088      	sub	sp, #32
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	60bb      	str	r3, [r7, #8]
   return(result);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6979      	ldr	r1, [r7, #20]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	613b      	str	r3, [r7, #16]
   return(result);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e6      	bne.n	8006976 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fb fcfa 	bl	80023b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069bc:	bf00      	nop
 80069be:	3720      	adds	r7, #32
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e027      	b.n	8006a66 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2224      	movs	r2, #36	; 0x24
 8006a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0201 	bic.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e02d      	b.n	8006ae6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2224      	movs	r2, #36	; 0x24
 8006a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f850 	bl	8006b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e02d      	b.n	8006b62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2224      	movs	r2, #36	; 0x24
 8006b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f812 	bl	8006b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d108      	bne.n	8006b8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b8c:	e031      	b.n	8006bf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b8e:	2308      	movs	r3, #8
 8006b90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b92:	2308      	movs	r3, #8
 8006b94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	0e5b      	lsrs	r3, r3, #25
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	0f5b      	lsrs	r3, r3, #29
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	7b3a      	ldrb	r2, [r7, #12]
 8006bba:	4911      	ldr	r1, [pc, #68]	; (8006c00 <UARTEx_SetNbDataToProcess+0x94>)
 8006bbc:	5c8a      	ldrb	r2, [r1, r2]
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bc2:	7b3a      	ldrb	r2, [r7, #12]
 8006bc4:	490f      	ldr	r1, [pc, #60]	; (8006c04 <UARTEx_SetNbDataToProcess+0x98>)
 8006bc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	7b7a      	ldrb	r2, [r7, #13]
 8006bd8:	4909      	ldr	r1, [pc, #36]	; (8006c00 <UARTEx_SetNbDataToProcess+0x94>)
 8006bda:	5c8a      	ldrb	r2, [r1, r2]
 8006bdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006be0:	7b7a      	ldrb	r2, [r7, #13]
 8006be2:	4908      	ldr	r1, [pc, #32]	; (8006c04 <UARTEx_SetNbDataToProcess+0x98>)
 8006be4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006be6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	0800e3e4 	.word	0x0800e3e4
 8006c04:	0800e3ec 	.word	0x0800e3ec

08006c08 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c12:	f107 0308 	add.w	r3, r7, #8
 8006c16:	2218      	movs	r2, #24
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 f8d8 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c20:	233f      	movs	r3, #63	; 0x3f
 8006c22:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006c24:	2381      	movs	r3, #129	; 0x81
 8006c26:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006c28:	1dfb      	adds	r3, r7, #7
 8006c2a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c30:	f107 0308 	add.w	r3, r7, #8
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 fb54 	bl	80082e4 <hci_send_req>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da01      	bge.n	8006c46 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006c42:	23ff      	movs	r3, #255	; 0xff
 8006c44:	e000      	b.n	8006c48 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006c46:	79fb      	ldrb	r3, [r7, #7]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006c50:	b5b0      	push	{r4, r5, r7, lr}
 8006c52:	b0ce      	sub	sp, #312	; 0x138
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4605      	mov	r5, r0
 8006c58:	460c      	mov	r4, r1
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c62:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006c66:	462a      	mov	r2, r5
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c6e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006c72:	4622      	mov	r2, r4
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c7a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006c7e:	4602      	mov	r2, r0
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c86:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006c8e:	f107 0310 	add.w	r3, r7, #16
 8006c92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006c96:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	f107 0210 	add.w	r2, r7, #16
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006ca6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006caa:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006cae:	4413      	add	r3, r2
 8006cb0:	3309      	adds	r3, #9
 8006cb2:	f107 0210 	add.w	r2, r7, #16
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006cbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006cc0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006cce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cd2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006cd6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006cda:	7812      	ldrb	r2, [r2, #0]
 8006cdc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006cde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006ce8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006cf0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006cf4:	8812      	ldrh	r2, [r2, #0]
 8006cf6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cfe:	3302      	adds	r3, #2
 8006d00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006d04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d08:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006d0c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006d10:	8812      	ldrh	r2, [r2, #0]
 8006d12:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006d20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d24:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006d28:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d34:	3301      	adds	r3, #1
 8006d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d3e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006d42:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d48:	3301      	adds	r3, #1
 8006d4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d52:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006d56:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006d62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d66:	3308      	adds	r3, #8
 8006d68:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006d6c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 f81d 	bl	8007db0 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006d76:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006d7a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006d7e:	4413      	add	r3, r2
 8006d80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006d84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d88:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006d8c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d92:	3301      	adds	r3, #1
 8006d94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006da2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f802 	bl	8007db0 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006dac:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006db0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006db4:	4413      	add	r3, r2
 8006db6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dbe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006dc2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dc8:	3302      	adds	r3, #2
 8006dca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006dd6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006dd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ddc:	3302      	adds	r3, #2
 8006dde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006de2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006de6:	2218      	movs	r2, #24
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fff0 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006df0:	233f      	movs	r3, #63	; 0x3f
 8006df2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006df6:	2383      	movs	r3, #131	; 0x83
 8006df8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006dfc:	f107 0310 	add.w	r3, r7, #16
 8006e00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e0c:	f107 030f 	add.w	r3, r7, #15
 8006e10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 fa5f 	bl	80082e4 <hci_send_req>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da01      	bge.n	8006e30 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006e2c:	23ff      	movs	r3, #255	; 0xff
 8006e2e:	e004      	b.n	8006e3a <aci_gap_set_discoverable+0x1ea>
  return status;
 8006e30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e34:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006e38:	781b      	ldrb	r3, [r3, #0]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bdb0      	pop	{r4, r5, r7, pc}

08006e44 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b0cc      	sub	sp, #304	; 0x130
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e50:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006e54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006e56:	f107 0310 	add.w	r3, r7, #16
 8006e5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e62:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e78:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006e7c:	7812      	ldrb	r2, [r2, #0]
 8006e7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e84:	3301      	adds	r3, #1
 8006e86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e8e:	2218      	movs	r2, #24
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 ff9c 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e98:	233f      	movs	r3, #63	; 0x3f
 8006e9a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006e9e:	2385      	movs	r3, #133	; 0x85
 8006ea0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ea4:	f107 0310 	add.w	r3, r7, #16
 8006ea8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006eac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006eb4:	f107 030f 	add.w	r3, r7, #15
 8006eb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ec2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 fa0b 	bl	80082e4 <hci_send_req>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da01      	bge.n	8006ed8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006ed4:	23ff      	movs	r3, #255	; 0xff
 8006ed6:	e004      	b.n	8006ee2 <aci_gap_set_io_capability+0x9e>
  return status;
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006ee0:	781b      	ldrb	r3, [r3, #0]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006eec:	b5b0      	push	{r4, r5, r7, lr}
 8006eee:	b0cc      	sub	sp, #304	; 0x130
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f02:	462a      	mov	r2, r5
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f0e:	4622      	mov	r2, r4
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f16:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f26:	460a      	mov	r2, r1
 8006f28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006f2a:	f107 0310 	add.w	r3, r7, #16
 8006f2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f36:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f4c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006f50:	7812      	ldrb	r2, [r2, #0]
 8006f52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f58:	3301      	adds	r3, #1
 8006f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f66:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006f6a:	7812      	ldrb	r2, [r2, #0]
 8006f6c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f72:	3301      	adds	r3, #1
 8006f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f80:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f9a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f9e:	7812      	ldrb	r2, [r2, #0]
 8006fa0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006fa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006fb4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fba:	3301      	adds	r3, #1
 8006fbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006fc8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fce:	3301      	adds	r3, #1
 8006fd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006fdc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006fde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006ff0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007002:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007006:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007008:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800700c:	3301      	adds	r3, #1
 800700e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007016:	2218      	movs	r2, #24
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fed8 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007020:	233f      	movs	r3, #63	; 0x3f
 8007022:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007026:	2386      	movs	r3, #134	; 0x86
 8007028:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800702c:	f107 0310 	add.w	r3, r7, #16
 8007030:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007038:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800703c:	f107 030f 	add.w	r3, r7, #15
 8007040:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007044:	2301      	movs	r3, #1
 8007046:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800704a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f001 f947 	bl	80082e4 <hci_send_req>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	da01      	bge.n	8007060 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800705c:	23ff      	movs	r3, #255	; 0xff
 800705e:	e004      	b.n	800706a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007064:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007068:	781b      	ldrb	r3, [r3, #0]
}
 800706a:	4618      	mov	r0, r3
 800706c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007070:	46bd      	mov	sp, r7
 8007072:	bdb0      	pop	{r4, r5, r7, pc}

08007074 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b0cc      	sub	sp, #304	; 0x130
 8007078:	af00      	add	r7, sp, #0
 800707a:	4602      	mov	r2, r0
 800707c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007084:	6019      	str	r1, [r3, #0]
 8007086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800708e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80070aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80070b6:	8812      	ldrh	r2, [r2, #0]
 80070b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80070ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070be:	3302      	adds	r3, #2
 80070c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80070c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070cc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80070d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070da:	3304      	adds	r3, #4
 80070dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070e4:	2218      	movs	r2, #24
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fe71 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80070ee:	233f      	movs	r3, #63	; 0x3f
 80070f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80070f4:	2388      	movs	r3, #136	; 0x88
 80070f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80070fa:	f107 0310 	add.w	r3, r7, #16
 80070fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007106:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800710a:	f107 030f 	add.w	r3, r7, #15
 800710e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007112:	2301      	movs	r3, #1
 8007114:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f8e0 	bl	80082e4 <hci_send_req>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	da01      	bge.n	800712e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800712a:	23ff      	movs	r3, #255	; 0xff
 800712c:	e004      	b.n	8007138 <aci_gap_pass_key_resp+0xc4>
  return status;
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007136:	781b      	ldrb	r3, [r3, #0]
}
 8007138:	4618      	mov	r0, r3
 800713a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007142:	b590      	push	{r4, r7, lr}
 8007144:	b0cd      	sub	sp, #308	; 0x134
 8007146:	af00      	add	r7, sp, #0
 8007148:	4604      	mov	r4, r0
 800714a:	4608      	mov	r0, r1
 800714c:	4611      	mov	r1, r2
 800714e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007152:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007160:	4622      	mov	r2, r4
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007168:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800716c:	4602      	mov	r2, r0
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007174:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007178:	460a      	mov	r2, r1
 800717a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800717c:	f107 0310 	add.w	r3, r7, #16
 8007180:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007184:	f107 0308 	add.w	r3, r7, #8
 8007188:	2207      	movs	r2, #7
 800718a:	2100      	movs	r1, #0
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fe1f 	bl	8007dd0 <Osal_MemSet>
  int index_input = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071a0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071ac:	3301      	adds	r3, #1
 80071ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80071b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071ba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80071c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071c6:	3301      	adds	r3, #1
 80071c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80071cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071d4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80071dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071e0:	3301      	adds	r3, #1
 80071e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071ea:	2218      	movs	r2, #24
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fdee 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80071f4:	233f      	movs	r3, #63	; 0x3f
 80071f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80071fa:	238a      	movs	r3, #138	; 0x8a
 80071fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800720c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007210:	f107 0308 	add.w	r3, r7, #8
 8007214:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007218:	2307      	movs	r3, #7
 800721a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800721e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f001 f85d 	bl	80082e4 <hci_send_req>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	da01      	bge.n	8007234 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007230:	23ff      	movs	r3, #255	; 0xff
 8007232:	e02e      	b.n	8007292 <aci_gap_init+0x150>
  if ( resp.Status )
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <aci_gap_init+0x10c>
    return resp.Status;
 8007242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007246:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	e021      	b.n	8007292 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007256:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800725a:	b29a      	uxth	r2, r3
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007270:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007274:	b29a      	uxth	r2, r3
 8007276:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800727a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007284:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800728e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007298:	46bd      	mov	sp, r7
 800729a:	bd90      	pop	{r4, r7, pc}

0800729c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b0cc      	sub	sp, #304	; 0x130
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4602      	mov	r2, r0
 80072a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ac:	6019      	str	r1, [r3, #0]
 80072ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80072b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80072b8:	f107 0310 	add.w	r3, r7, #16
 80072bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80072c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80072d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072da:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80072de:	7812      	ldrb	r2, [r2, #0]
 80072e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e6:	3301      	adds	r3, #1
 80072e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80072ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f0:	1c58      	adds	r0, r3, #1
 80072f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007304:	6819      	ldr	r1, [r3, #0]
 8007306:	f000 fd53 	bl	8007db0 <Osal_MemCpy>
  index_input += AdvDataLen;
 800730a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007318:	4413      	add	r3, r2
 800731a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800731e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007322:	2218      	movs	r2, #24
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fd52 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800732c:	233f      	movs	r3, #63	; 0x3f
 800732e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007332:	238e      	movs	r3, #142	; 0x8e
 8007334:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007338:	f107 0310 	add.w	r3, r7, #16
 800733c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007348:	f107 030f 	add.w	r3, r7, #15
 800734c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007350:	2301      	movs	r3, #1
 8007352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f000 ffc1 	bl	80082e4 <hci_send_req>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	da01      	bge.n	800736c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007368:	23ff      	movs	r3, #255	; 0xff
 800736a:	e004      	b.n	8007376 <aci_gap_update_adv_data+0xda>
  return status;
 800736c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007370:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007374:	781b      	ldrb	r3, [r3, #0]
}
 8007376:	4618      	mov	r0, r3
 8007378:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800738a:	f107 0308 	add.w	r3, r7, #8
 800738e:	2218      	movs	r2, #24
 8007390:	2100      	movs	r1, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fd1c 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007398:	233f      	movs	r3, #63	; 0x3f
 800739a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800739c:	2392      	movs	r3, #146	; 0x92
 800739e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80073a0:	1dfb      	adds	r3, r7, #7
 80073a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80073a4:	2301      	movs	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073a8:	f107 0308 	add.w	r3, r7, #8
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 ff98 	bl	80082e4 <hci_send_req>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da01      	bge.n	80073be <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80073ba:	23ff      	movs	r3, #255	; 0xff
 80073bc:	e000      	b.n	80073c0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80073be:	79fb      	ldrb	r3, [r7, #7]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b0cc      	sub	sp, #304	; 0x130
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4602      	mov	r2, r0
 80073d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073de:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80073e2:	460a      	mov	r2, r1
 80073e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80073e6:	f107 0310 	add.w	r3, r7, #16
 80073ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80073ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007404:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007408:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800740c:	8812      	ldrh	r2, [r2, #0]
 800740e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007410:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007414:	3302      	adds	r3, #2
 8007416:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800741a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007422:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007426:	7812      	ldrb	r2, [r2, #0]
 8007428:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800742a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800742e:	3301      	adds	r3, #1
 8007430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007434:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007438:	2218      	movs	r2, #24
 800743a:	2100      	movs	r1, #0
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fcc7 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007442:	233f      	movs	r3, #63	; 0x3f
 8007444:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007448:	23a5      	movs	r3, #165	; 0xa5
 800744a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800744e:	f107 0310 	add.w	r3, r7, #16
 8007452:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800745a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800745e:	f107 030f 	add.w	r3, r7, #15
 8007462:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007466:	2301      	movs	r3, #1
 8007468:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800746c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007470:	2100      	movs	r1, #0
 8007472:	4618      	mov	r0, r3
 8007474:	f000 ff36 	bl	80082e4 <hci_send_req>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	da01      	bge.n	8007482 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800747e:	23ff      	movs	r3, #255	; 0xff
 8007480:	e004      	b.n	800748c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007486:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800748a:	781b      	ldrb	r3, [r3, #0]
}
 800748c:	4618      	mov	r0, r3
 800748e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b088      	sub	sp, #32
 800749a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074a0:	f107 0308 	add.w	r3, r7, #8
 80074a4:	2218      	movs	r2, #24
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fc91 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80074ae:	233f      	movs	r3, #63	; 0x3f
 80074b0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80074b2:	f240 1301 	movw	r3, #257	; 0x101
 80074b6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80074b8:	1dfb      	adds	r3, r7, #7
 80074ba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80074bc:	2301      	movs	r3, #1
 80074be:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074c0:	f107 0308 	add.w	r3, r7, #8
 80074c4:	2100      	movs	r1, #0
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 ff0c 	bl	80082e4 <hci_send_req>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	da01      	bge.n	80074d6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80074d2:	23ff      	movs	r3, #255	; 0xff
 80074d4:	e000      	b.n	80074d8 <aci_gatt_init+0x42>
  return status;
 80074d6:	79fb      	ldrb	r3, [r7, #7]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b0cf      	sub	sp, #316	; 0x13c
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80074ec:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80074f0:	6001      	str	r1, [r0, #0]
 80074f2:	4610      	mov	r0, r2
 80074f4:	4619      	mov	r1, r3
 80074f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80074fa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80074fe:	4622      	mov	r2, r4
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007506:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800750a:	4602      	mov	r2, r0
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007512:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007516:	460a      	mov	r2, r1
 8007518:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800751a:	f107 0310 	add.w	r3, r7, #16
 800751e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007522:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007526:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d00a      	beq.n	8007546 <aci_gatt_add_service+0x66>
 8007530:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007534:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d101      	bne.n	8007542 <aci_gatt_add_service+0x62>
 800753e:	2311      	movs	r3, #17
 8007540:	e002      	b.n	8007548 <aci_gatt_add_service+0x68>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <aci_gatt_add_service+0x68>
 8007546:	2303      	movs	r3, #3
 8007548:	f107 0210 	add.w	r2, r7, #16
 800754c:	4413      	add	r3, r2
 800754e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007552:	f107 030c 	add.w	r3, r7, #12
 8007556:	2203      	movs	r2, #3
 8007558:	2100      	movs	r1, #0
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fc38 	bl	8007dd0 <Osal_MemSet>
  int index_input = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007566:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800756a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800756e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007572:	7812      	ldrb	r2, [r2, #0]
 8007574:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007576:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800757a:	3301      	adds	r3, #1
 800757c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007580:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007584:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d002      	beq.n	8007594 <aci_gatt_add_service+0xb4>
 800758e:	2b02      	cmp	r3, #2
 8007590:	d004      	beq.n	800759c <aci_gatt_add_service+0xbc>
 8007592:	e007      	b.n	80075a4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007594:	2302      	movs	r3, #2
 8007596:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800759a:	e005      	b.n	80075a8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800759c:	2310      	movs	r3, #16
 800759e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80075a2:	e001      	b.n	80075a8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80075a4:	2397      	movs	r3, #151	; 0x97
 80075a6:	e06c      	b.n	8007682 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80075a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075ac:	1c58      	adds	r0, r3, #1
 80075ae:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80075b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80075ba:	6819      	ldr	r1, [r3, #0]
 80075bc:	f000 fbf8 	bl	8007db0 <Osal_MemCpy>
    index_input += size;
 80075c0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80075c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80075c8:	4413      	add	r3, r2
 80075ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80075ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80075d6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80075de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075e2:	3301      	adds	r3, #1
 80075e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80075e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80075f0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80075f4:	7812      	ldrb	r2, [r2, #0]
 80075f6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80075f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075fc:	3301      	adds	r3, #1
 80075fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007606:	2218      	movs	r2, #24
 8007608:	2100      	movs	r1, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fbe0 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007610:	233f      	movs	r3, #63	; 0x3f
 8007612:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007616:	f44f 7381 	mov.w	r3, #258	; 0x102
 800761a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800761e:	f107 0310 	add.w	r3, r7, #16
 8007622:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800762a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800762e:	f107 030c 	add.w	r3, r7, #12
 8007632:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007636:	2303      	movs	r3, #3
 8007638:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800763c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fe4e 	bl	80082e4 <hci_send_req>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	da01      	bge.n	8007652 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800764e:	23ff      	movs	r3, #255	; 0xff
 8007650:	e017      	b.n	8007682 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007652:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	e00a      	b.n	8007682 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800766c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007670:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007674:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800767e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}

0800768c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b0d1      	sub	sp, #324	; 0x144
 8007690:	af00      	add	r7, sp, #0
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800769a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800769e:	600a      	str	r2, [r1, #0]
 80076a0:	4619      	mov	r1, r3
 80076a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076a6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80076aa:	4622      	mov	r2, r4
 80076ac:	801a      	strh	r2, [r3, #0]
 80076ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076b2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80076b6:	4602      	mov	r2, r0
 80076b8:	701a      	strb	r2, [r3, #0]
 80076ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076be:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80076c2:	460a      	mov	r2, r1
 80076c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80076c6:	f107 0318 	add.w	r3, r7, #24
 80076ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80076ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076d2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d00a      	beq.n	80076f2 <aci_gatt_add_char+0x66>
 80076dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076e0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d101      	bne.n	80076ee <aci_gatt_add_char+0x62>
 80076ea:	2313      	movs	r3, #19
 80076ec:	e002      	b.n	80076f4 <aci_gatt_add_char+0x68>
 80076ee:	2303      	movs	r3, #3
 80076f0:	e000      	b.n	80076f4 <aci_gatt_add_char+0x68>
 80076f2:	2305      	movs	r3, #5
 80076f4:	f107 0218 	add.w	r2, r7, #24
 80076f8:	4413      	add	r3, r2
 80076fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80076fe:	f107 0314 	add.w	r3, r7, #20
 8007702:	2203      	movs	r2, #3
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fb62 	bl	8007dd0 <Osal_MemSet>
  int index_input = 0;
 800770c:	2300      	movs	r3, #0
 800770e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007712:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007716:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800771a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800771e:	8812      	ldrh	r2, [r2, #0]
 8007720:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007722:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007726:	3302      	adds	r3, #2
 8007728:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800772c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007730:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007734:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800773c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007740:	3301      	adds	r3, #1
 8007742:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007746:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800774a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d002      	beq.n	800775a <aci_gatt_add_char+0xce>
 8007754:	2b02      	cmp	r3, #2
 8007756:	d004      	beq.n	8007762 <aci_gatt_add_char+0xd6>
 8007758:	e007      	b.n	800776a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800775a:	2302      	movs	r3, #2
 800775c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007760:	e005      	b.n	800776e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007762:	2310      	movs	r3, #16
 8007764:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007768:	e001      	b.n	800776e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800776a:	2397      	movs	r3, #151	; 0x97
 800776c:	e091      	b.n	8007892 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800776e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007772:	1cd8      	adds	r0, r3, #3
 8007774:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007778:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800777c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007780:	6819      	ldr	r1, [r3, #0]
 8007782:	f000 fb15 	bl	8007db0 <Osal_MemCpy>
    index_input += size;
 8007786:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800778a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800778e:	4413      	add	r3, r2
 8007790:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007794:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007798:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800779c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80077a0:	8812      	ldrh	r2, [r2, #0]
 80077a2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80077a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077a8:	3302      	adds	r3, #2
 80077aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80077ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077b2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80077b6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80077b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077bc:	3301      	adds	r3, #1
 80077be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80077c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077c6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80077ca:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80077cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077d0:	3301      	adds	r3, #1
 80077d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80077d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077da:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80077de:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80077e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077e4:	3301      	adds	r3, #1
 80077e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80077ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077ee:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80077f2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80077f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077f8:	3301      	adds	r3, #1
 80077fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80077fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007802:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007806:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007808:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800780c:	3301      	adds	r3, #1
 800780e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007812:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007816:	2218      	movs	r2, #24
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fad8 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007820:	233f      	movs	r3, #63	; 0x3f
 8007822:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007826:	f44f 7382 	mov.w	r3, #260	; 0x104
 800782a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800782e:	f107 0318 	add.w	r3, r7, #24
 8007832:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007836:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800783a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800783e:	f107 0314 	add.w	r3, r7, #20
 8007842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007846:	2303      	movs	r3, #3
 8007848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800784c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fd46 	bl	80082e4 <hci_send_req>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	da01      	bge.n	8007862 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800785e:	23ff      	movs	r3, #255	; 0xff
 8007860:	e017      	b.n	8007892 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007862:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007870:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	e00a      	b.n	8007892 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800787c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007884:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007888:	b29a      	uxth	r2, r3
 800788a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800788e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007898:	46bd      	mov	sp, r7
 800789a:	bd90      	pop	{r4, r7, pc}

0800789c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800789c:	b5b0      	push	{r4, r5, r7, lr}
 800789e:	b0cc      	sub	sp, #304	; 0x130
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4605      	mov	r5, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	4610      	mov	r0, r2
 80078a8:	4619      	mov	r1, r3
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80078b2:	462a      	mov	r2, r5
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078be:	4622      	mov	r2, r4
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80078ca:	4602      	mov	r2, r0
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80078d6:	460a      	mov	r2, r1
 80078d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80078f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078fc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007900:	8812      	ldrh	r2, [r2, #0]
 8007902:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007908:	3302      	adds	r3, #2
 800790a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800790e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007912:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007916:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800791a:	8812      	ldrh	r2, [r2, #0]
 800791c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800791e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007922:	3302      	adds	r3, #2
 8007924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007930:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007934:	7812      	ldrb	r2, [r2, #0]
 8007936:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800793c:	3301      	adds	r3, #1
 800793e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007946:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800794a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007956:	3301      	adds	r3, #1
 8007958:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800795c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007960:	1d98      	adds	r0, r3, #6
 8007962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007966:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007972:	f000 fa1d 	bl	8007db0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007984:	4413      	add	r3, r2
 8007986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800798a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800798e:	2218      	movs	r2, #24
 8007990:	2100      	movs	r1, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fa1c 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007998:	233f      	movs	r3, #63	; 0x3f
 800799a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800799e:	f44f 7383 	mov.w	r3, #262	; 0x106
 80079a2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80079a6:	f107 0310 	add.w	r3, r7, #16
 80079aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079b6:	f107 030f 	add.w	r3, r7, #15
 80079ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fc8a 	bl	80082e4 <hci_send_req>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	da01      	bge.n	80079da <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80079d6:	23ff      	movs	r3, #255	; 0xff
 80079d8:	e004      	b.n	80079e4 <aci_gatt_update_char_value+0x148>
  return status;
 80079da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079e2:	781b      	ldrb	r3, [r3, #0]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bdb0      	pop	{r4, r5, r7, pc}

080079ee <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b0cc      	sub	sp, #304	; 0x130
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a02:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007a06:	4602      	mov	r2, r0
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a12:	460a      	mov	r2, r1
 8007a14:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007a16:	f107 0310 	add.w	r3, r7, #16
 8007a1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a22:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a38:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007a3c:	7812      	ldrb	r2, [r2, #0]
 8007a3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a44:	3301      	adds	r3, #1
 8007a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a52:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007a56:	7812      	ldrb	r2, [r2, #0]
 8007a58:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a68:	1c98      	adds	r0, r3, #2
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	f000 f997 	bl	8007db0 <Osal_MemCpy>
  index_input += Length;
 8007a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a86:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a90:	4413      	add	r3, r2
 8007a92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a9a:	2218      	movs	r2, #24
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f996 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007aa4:	233f      	movs	r3, #63	; 0x3f
 8007aa6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007aaa:	230c      	movs	r3, #12
 8007aac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ab0:	f107 0310 	add.w	r3, r7, #16
 8007ab4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007abc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ac0:	f107 030f 	add.w	r3, r7, #15
 8007ac4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fc05 	bl	80082e4 <hci_send_req>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da01      	bge.n	8007ae4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007ae0:	23ff      	movs	r3, #255	; 0xff
 8007ae2:	e004      	b.n	8007aee <aci_hal_write_config_data+0x100>
  return status;
 8007ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007aec:	781b      	ldrb	r3, [r3, #0]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b0cc      	sub	sp, #304	; 0x130
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4602      	mov	r2, r0
 8007b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b04:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b12:	460a      	mov	r2, r1
 8007b14:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007b16:	f107 0310 	add.w	r3, r7, #16
 8007b1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b38:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007b3c:	7812      	ldrb	r2, [r2, #0]
 8007b3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b44:	3301      	adds	r3, #1
 8007b46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b52:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b68:	2218      	movs	r2, #24
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 f92f 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b72:	233f      	movs	r3, #63	; 0x3f
 8007b74:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007b78:	230f      	movs	r3, #15
 8007b7a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b7e:	f107 0310 	add.w	r3, r7, #16
 8007b82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b8e:	f107 030f 	add.w	r3, r7, #15
 8007b92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fb9e 	bl	80082e4 <hci_send_req>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da01      	bge.n	8007bb2 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007bae:	23ff      	movs	r3, #255	; 0xff
 8007bb0:	e004      	b.n	8007bbc <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007bba:	781b      	ldrb	r3, [r3, #0]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b0cc      	sub	sp, #304	; 0x130
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	4602      	mov	r2, r0
 8007bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007bd6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007bd8:	f107 0310 	add.w	r3, r7, #16
 8007bdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bfa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007bfe:	8812      	ldrh	r2, [r2, #0]
 8007c00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c06:	3302      	adds	r3, #2
 8007c08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c10:	2218      	movs	r2, #24
 8007c12:	2100      	movs	r1, #0
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 f8db 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c1a:	233f      	movs	r3, #63	; 0x3f
 8007c1c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007c20:	2318      	movs	r3, #24
 8007c22:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c26:	f107 0310 	add.w	r3, r7, #16
 8007c2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c36:	f107 030f 	add.w	r3, r7, #15
 8007c3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fb4a 	bl	80082e4 <hci_send_req>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	da01      	bge.n	8007c5a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007c56:	23ff      	movs	r3, #255	; 0xff
 8007c58:	e004      	b.n	8007c64 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c62:	781b      	ldrb	r3, [r3, #0]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b088      	sub	sp, #32
 8007c72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c78:	f107 0308 	add.w	r3, r7, #8
 8007c7c:	2218      	movs	r2, #24
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f8a5 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x03;
 8007c86:	2303      	movs	r3, #3
 8007c88:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007c8e:	1dfb      	adds	r3, r7, #7
 8007c90:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007c92:	2301      	movs	r3, #1
 8007c94:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c96:	f107 0308 	add.w	r3, r7, #8
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fb21 	bl	80082e4 <hci_send_req>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	da01      	bge.n	8007cac <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ca8:	23ff      	movs	r3, #255	; 0xff
 8007caa:	e000      	b.n	8007cae <hci_reset+0x40>
  return status;
 8007cac:	79fb      	ldrb	r3, [r7, #7]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3720      	adds	r7, #32
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007cb6:	b590      	push	{r4, r7, lr}
 8007cb8:	b0cd      	sub	sp, #308	; 0x134
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	4608      	mov	r0, r1
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007cca:	4622      	mov	r2, r4
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cde:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007ce6:	f107 0310 	add.w	r3, r7, #16
 8007cea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d08:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d14:	3301      	adds	r3, #1
 8007d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d22:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d26:	7812      	ldrb	r2, [r2, #0]
 8007d28:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d2e:	3301      	adds	r3, #1
 8007d30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d3c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007d40:	7812      	ldrb	r2, [r2, #0]
 8007d42:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d48:	3301      	adds	r3, #1
 8007d4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d52:	2218      	movs	r2, #24
 8007d54:	2100      	movs	r1, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 f83a 	bl	8007dd0 <Osal_MemSet>
  rq.ogf = 0x08;
 8007d5c:	2308      	movs	r3, #8
 8007d5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007d62:	2331      	movs	r3, #49	; 0x31
 8007d64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d68:	f107 0310 	add.w	r3, r7, #16
 8007d6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d78:	f107 030f 	add.w	r3, r7, #15
 8007d7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 faa9 	bl	80082e4 <hci_send_req>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	da01      	bge.n	8007d9c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007d98:	23ff      	movs	r3, #255	; 0xff
 8007d9a:	e004      	b.n	8007da6 <hci_le_set_default_phy+0xf0>
  return status;
 8007d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007da4:	781b      	ldrb	r3, [r3, #0]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd90      	pop	{r4, r7, pc}

08007db0 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f004 f902 	bl	800bfca <memcpy>
 8007dc6:	4603      	mov	r3, r0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f004 f85f 	bl	800bea4 <memset>
 8007de6:	4603      	mov	r3, r0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  return;
 8007df4:	bf00      	nop
}
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007dfe:	b480      	push	{r7}
 8007e00:	af00      	add	r7, sp, #0
  return;
 8007e02:	bf00      	nop
}
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
  return;
 8007e10:	bf00      	nop
}
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	af00      	add	r7, sp, #0
  return;
 8007e1e:	bf00      	nop
}
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
  return;
 8007e2c:	bf00      	nop
}
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007e36:	b480      	push	{r7}
 8007e38:	af00      	add	r7, sp, #0
  return;
 8007e3a:	bf00      	nop
}
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  return;
 8007e48:	bf00      	nop
}
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007e52:	b480      	push	{r7}
 8007e54:	af00      	add	r7, sp, #0
  return;
 8007e56:	bf00      	nop
}
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  return;
 8007e64:	bf00      	nop
}
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007e6e:	b480      	push	{r7}
 8007e70:	af00      	add	r7, sp, #0
  return;
 8007e72:	bf00      	nop
}
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return;
 8007e80:	bf00      	nop
}
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	af00      	add	r7, sp, #0
  return;
 8007e8e:	bf00      	nop
}
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
  return;
 8007e9c:	bf00      	nop
}
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	af00      	add	r7, sp, #0
  return;
 8007eaa:	bf00      	nop
}
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	af00      	add	r7, sp, #0
  return;
 8007eb8:	bf00      	nop
}
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	af00      	add	r7, sp, #0
  return;
 8007ec6:	bf00      	nop
}
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  return;
 8007ed4:	bf00      	nop
}
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <SVCCTL_Init+0x18>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007eea:	4b04      	ldr	r3, [pc, #16]	; (8007efc <SVCCTL_Init+0x1c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007ef0:	f000 f806 	bl	8007f00 <SVCCTL_SvcInit>

  return;
 8007ef4:	bf00      	nop
}
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	2000009c 	.word	0x2000009c
 8007efc:	200000bc 	.word	0x200000bc

08007f00 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  BAS_Init();
 8007f04:	f7ff ff74 	bl	8007df0 <BAS_Init>

  BLS_Init();
 8007f08:	f7ff ff79 	bl	8007dfe <BLS_Init>

  CRS_STM_Init();
 8007f0c:	f7ff ff7e 	bl	8007e0c <CRS_STM_Init>

  DIS_Init();
 8007f10:	f7ff ff83 	bl	8007e1a <DIS_Init>

  EDS_STM_Init();
 8007f14:	f7ff ff88 	bl	8007e28 <EDS_STM_Init>

  HIDS_Init();
 8007f18:	f7ff ff8d 	bl	8007e36 <HIDS_Init>

  HRS_Init();
 8007f1c:	f7ff ff92 	bl	8007e44 <HRS_Init>

  HTS_Init();
 8007f20:	f7ff ff97 	bl	8007e52 <HTS_Init>

  IAS_Init();
 8007f24:	f7ff ff9c 	bl	8007e60 <IAS_Init>

  LLS_Init();
 8007f28:	f7ff ffa1 	bl	8007e6e <LLS_Init>

  TPS_Init();
 8007f2c:	f7ff ffa6 	bl	8007e7c <TPS_Init>

  MOTENV_STM_Init();
 8007f30:	f7ff ffab 	bl	8007e8a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007f34:	f7ff ffb0 	bl	8007e98 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007f38:	f7ff ffb5 	bl	8007ea6 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007f3c:	f7ff ffba 	bl	8007eb4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007f40:	f7ff ffc6 	bl	8007ed0 <BVOPUS_STM_Init>

  MESH_Init();
 8007f44:	f7ff ffbd 	bl	8007ec2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007f48:	f002 fd7a 	bl	800aa40 <SVCCTL_InitCustomSvc>
  
  return;
 8007f4c:	bf00      	nop
}
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007f58:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f5a:	7f1b      	ldrb	r3, [r3, #28]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4a08      	ldr	r2, [pc, #32]	; (8007f80 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007f66:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f68:	7f1b      	ldrb	r3, [r3, #28]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f70:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007f72:	bf00      	nop
}
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	2000009c 	.word	0x2000009c

08007f84 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2bff      	cmp	r3, #255	; 0xff
 8007f9c:	d125      	bne.n	8007fea <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	3302      	adds	r3, #2
 8007fa2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fb2:	d118      	bne.n	8007fe6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	757b      	strb	r3, [r7, #21]
 8007fb8:	e00d      	b.n	8007fd6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007fba:	7d7b      	ldrb	r3, [r7, #21]
 8007fbc:	4a1a      	ldr	r2, [pc, #104]	; (8008028 <SVCCTL_UserEvtRx+0xa4>)
 8007fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d108      	bne.n	8007fe2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007fd0:	7d7b      	ldrb	r3, [r7, #21]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	757b      	strb	r3, [r7, #21]
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <SVCCTL_UserEvtRx+0xa4>)
 8007fd8:	7f1b      	ldrb	r3, [r3, #28]
 8007fda:	7d7a      	ldrb	r2, [r7, #21]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d3ec      	bcc.n	8007fba <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007fe0:	e002      	b.n	8007fe8 <SVCCTL_UserEvtRx+0x64>
              break;
 8007fe2:	bf00      	nop
          break;
 8007fe4:	e000      	b.n	8007fe8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007fe6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007fe8:	e000      	b.n	8007fec <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007fea:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d00f      	beq.n	8008012 <SVCCTL_UserEvtRx+0x8e>
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	dc10      	bgt.n	8008018 <SVCCTL_UserEvtRx+0x94>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <SVCCTL_UserEvtRx+0x7c>
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d006      	beq.n	800800c <SVCCTL_UserEvtRx+0x88>
 8007ffe:	e00b      	b.n	8008018 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 fcb3 	bl	800996c <SVCCTL_App_Notification>
 8008006:	4603      	mov	r3, r0
 8008008:	75bb      	strb	r3, [r7, #22]
      break;
 800800a:	e008      	b.n	800801e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800800c:	2301      	movs	r3, #1
 800800e:	75bb      	strb	r3, [r7, #22]
      break;
 8008010:	e005      	b.n	800801e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008012:	2300      	movs	r3, #0
 8008014:	75bb      	strb	r3, [r7, #22]
      break;
 8008016:	e002      	b.n	800801e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008018:	2301      	movs	r3, #1
 800801a:	75bb      	strb	r3, [r7, #22]
      break;
 800801c:	bf00      	nop
  }

  return (return_status);
 800801e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	2000009c 	.word	0x2000009c

0800802c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008034:	f107 030c 	add.w	r3, r7, #12
 8008038:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	212e      	movs	r1, #46	; 0x2e
 8008044:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008048:	f000 fae8 	bl	800861c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	330b      	adds	r3, #11
 8008050:	78db      	ldrb	r3, [r3, #3]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b088      	sub	sp, #32
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008062:	f107 030c 	add.w	r3, r7, #12
 8008066:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	210f      	movs	r1, #15
 8008072:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008076:	f000 fad1 	bl	800861c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	330b      	adds	r3, #11
 800807e:	78db      	ldrb	r3, [r3, #3]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008090:	f107 030c 	add.w	r3, r7, #12
 8008094:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	2110      	movs	r1, #16
 800809c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80080a0:	f000 fabc 	bl	800861c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	330b      	adds	r3, #11
 80080a8:	78db      	ldrb	r3, [r3, #3]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b08b      	sub	sp, #44	; 0x2c
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80080dc:	4b4a      	ldr	r3, [pc, #296]	; (8008208 <SHCI_GetWirelessFwInfo+0x154>)
 80080de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80080e4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80080ee:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a44      	ldr	r2, [pc, #272]	; (800820c <SHCI_GetWirelessFwInfo+0x158>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10f      	bne.n	8008120 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e01a      	b.n	8008156 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008128:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800812c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	0e1b      	lsrs	r3, r3, #24
 800815a:	b2da      	uxtb	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	0c1b      	lsrs	r3, r3, #16
 8008164:	b2da      	uxtb	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	b2da      	uxtb	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	091b      	lsrs	r3, r3, #4
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f003 030f 	and.w	r3, r3, #15
 800817e:	b2da      	uxtb	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	b2da      	uxtb	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	0e1b      	lsrs	r3, r3, #24
 8008196:	b2da      	uxtb	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	0c1b      	lsrs	r3, r3, #16
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	0a1b      	lsrs	r3, r3, #8
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	0e1b      	lsrs	r3, r3, #24
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	0e1b      	lsrs	r3, r3, #24
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	372c      	adds	r7, #44	; 0x2c
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	58004000 	.word	0x58004000
 800820c:	a94656b9 	.word	0xa94656b9

08008210 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4a08      	ldr	r2, [pc, #32]	; (8008240 <hci_init+0x30>)
 8008220:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008222:	4a08      	ldr	r2, [pc, #32]	; (8008244 <hci_init+0x34>)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008228:	4806      	ldr	r0, [pc, #24]	; (8008244 <hci_init+0x34>)
 800822a:	f000 f979 	bl	8008520 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f000 f8da 	bl	80083ec <TlInit>

  return;
 8008238:	bf00      	nop
}
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	2000032c 	.word	0x2000032c
 8008244:	20000304 	.word	0x20000304

08008248 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800824e:	4822      	ldr	r0, [pc, #136]	; (80082d8 <hci_user_evt_proc+0x90>)
 8008250:	f000 fe10 	bl	8008e74 <LST_is_empty>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d12b      	bne.n	80082b2 <hci_user_evt_proc+0x6a>
 800825a:	4b20      	ldr	r3, [pc, #128]	; (80082dc <hci_user_evt_proc+0x94>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d027      	beq.n	80082b2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008262:	f107 030c 	add.w	r3, r7, #12
 8008266:	4619      	mov	r1, r3
 8008268:	481b      	ldr	r0, [pc, #108]	; (80082d8 <hci_user_evt_proc+0x90>)
 800826a:	f000 fe92 	bl	8008f92 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800826e:	4b1c      	ldr	r3, [pc, #112]	; (80082e0 <hci_user_evt_proc+0x98>)
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00c      	beq.n	8008290 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800827a:	2301      	movs	r3, #1
 800827c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800827e:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <hci_user_evt_proc+0x98>)
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	1d3a      	adds	r2, r7, #4
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008288:	793a      	ldrb	r2, [r7, #4]
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <hci_user_evt_proc+0x94>)
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	e002      	b.n	8008296 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008290:	4b12      	ldr	r3, [pc, #72]	; (80082dc <hci_user_evt_proc+0x94>)
 8008292:	2201      	movs	r2, #1
 8008294:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008296:	4b11      	ldr	r3, [pc, #68]	; (80082dc <hci_user_evt_proc+0x94>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d004      	beq.n	80082a8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fc0d 	bl	8008ac0 <TL_MM_EvtDone>
 80082a6:	e004      	b.n	80082b2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4619      	mov	r1, r3
 80082ac:	480a      	ldr	r0, [pc, #40]	; (80082d8 <hci_user_evt_proc+0x90>)
 80082ae:	f000 fe03 	bl	8008eb8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80082b2:	4809      	ldr	r0, [pc, #36]	; (80082d8 <hci_user_evt_proc+0x90>)
 80082b4:	f000 fdde 	bl	8008e74 <LST_is_empty>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d107      	bne.n	80082ce <hci_user_evt_proc+0x86>
 80082be:	4b07      	ldr	r3, [pc, #28]	; (80082dc <hci_user_evt_proc+0x94>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80082c6:	4804      	ldr	r0, [pc, #16]	; (80082d8 <hci_user_evt_proc+0x90>)
 80082c8:	f002 f9b8 	bl	800a63c <hci_notify_asynch_evt>
  }


  return;
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
}
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	200000c4 	.word	0x200000c4
 80082dc:	200000d0 	.word	0x200000d0
 80082e0:	20000304 	.word	0x20000304

080082e4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80082f0:	2000      	movs	r0, #0
 80082f2:	f000 f8d1 	bl	8008498 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80082f6:	2300      	movs	r3, #0
 80082f8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	885b      	ldrh	r3, [r3, #2]
 80082fe:	b21b      	sxth	r3, r3
 8008300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008304:	b21a      	sxth	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	029b      	lsls	r3, r3, #10
 800830c:	b21b      	sxth	r3, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	b21b      	sxth	r3, r3
 8008312:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8008314:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <hci_send_req+0x100>)
 8008316:	2201      	movs	r2, #1
 8008318:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	b2d9      	uxtb	r1, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	8bbb      	ldrh	r3, [r7, #28]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f890 	bl	800844c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800832c:	e04e      	b.n	80083cc <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800832e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008332:	f002 f99a 	bl	800a66a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008336:	e043      	b.n	80083c0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	4619      	mov	r1, r3
 800833e:	482a      	ldr	r0, [pc, #168]	; (80083e8 <hci_send_req+0x104>)
 8008340:	f000 fe27 	bl	8008f92 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	7a5b      	ldrb	r3, [r3, #9]
 8008348:	2b0f      	cmp	r3, #15
 800834a:	d114      	bne.n	8008376 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	330b      	adds	r3, #11
 8008350:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	885b      	ldrh	r3, [r3, #2]
 8008356:	b29b      	uxth	r3, r3
 8008358:	8bba      	ldrh	r2, [r7, #28]
 800835a:	429a      	cmp	r2, r3
 800835c:	d104      	bne.n	8008368 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d027      	beq.n	80083c0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008370:	2301      	movs	r3, #1
 8008372:	77fb      	strb	r3, [r7, #31]
 8008374:	e024      	b.n	80083c0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	330b      	adds	r3, #11
 800837a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008382:	b29b      	uxth	r3, r3
 8008384:	8bba      	ldrh	r2, [r7, #28]
 8008386:	429a      	cmp	r2, r3
 8008388:	d114      	bne.n	80083b4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	7a9b      	ldrb	r3, [r3, #10]
 800838e:	3b03      	subs	r3, #3
 8008390:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695a      	ldr	r2, [r3, #20]
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	429a      	cmp	r2, r3
 800839a:	bfa8      	it	ge
 800839c:	461a      	movge	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6918      	ldr	r0, [r3, #16]
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	1cd9      	adds	r1, r3, #3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f003 fe0b 	bl	800bfca <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80083bc:	2301      	movs	r3, #1
 80083be:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80083c0:	4809      	ldr	r0, [pc, #36]	; (80083e8 <hci_send_req+0x104>)
 80083c2:	f000 fd57 	bl	8008e74 <LST_is_empty>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0b5      	beq.n	8008338 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80083cc:	7ffb      	ldrb	r3, [r7, #31]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0ad      	beq.n	800832e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80083d2:	2001      	movs	r0, #1
 80083d4:	f000 f860 	bl	8008498 <NotifyCmdStatus>

  return 0;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000330 	.word	0x20000330
 80083e8:	20000324 	.word	0x20000324

080083ec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80083f4:	480f      	ldr	r0, [pc, #60]	; (8008434 <TlInit+0x48>)
 80083f6:	f000 fd2d 	bl	8008e54 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80083fa:	4a0f      	ldr	r2, [pc, #60]	; (8008438 <TlInit+0x4c>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008400:	480e      	ldr	r0, [pc, #56]	; (800843c <TlInit+0x50>)
 8008402:	f000 fd27 	bl	8008e54 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008406:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <TlInit+0x54>)
 8008408:	2201      	movs	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <TlInit+0x58>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008418:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <TlInit+0x5c>)
 800841a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800841c:	4b09      	ldr	r3, [pc, #36]	; (8008444 <TlInit+0x58>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f107 0208 	add.w	r2, r7, #8
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
  }

  return;
 8008428:	bf00      	nop
 800842a:	bf00      	nop
}
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000324 	.word	0x20000324
 8008438:	200000cc 	.word	0x200000cc
 800843c:	200000c4 	.word	0x200000c4
 8008440:	200000d0 	.word	0x200000d0
 8008444:	20000304 	.word	0x20000304
 8008448:	080084d9 	.word	0x080084d9

0800844c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	603a      	str	r2, [r7, #0]
 8008456:	80fb      	strh	r3, [r7, #6]
 8008458:	460b      	mov	r3, r1
 800845a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800845c:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <SendCmd+0x44>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008466:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <SendCmd+0x44>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	797a      	ldrb	r2, [r7, #5]
 800846c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800846e:	4b08      	ldr	r3, [pc, #32]	; (8008490 <SendCmd+0x44>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	330c      	adds	r3, #12
 8008474:	797a      	ldrb	r2, [r7, #5]
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	4618      	mov	r0, r3
 800847a:	f003 fda6 	bl	800bfca <memcpy>

  hciContext.io.Send(0,0);
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <SendCmd+0x48>)
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2100      	movs	r1, #0
 8008484:	2000      	movs	r0, #0
 8008486:	4798      	blx	r3

  return;
 8008488:	bf00      	nop
}
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	200000cc 	.word	0x200000cc
 8008494:	20000304 	.word	0x20000304

08008498 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d108      	bne.n	80084ba <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80084a8:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <NotifyCmdStatus+0x3c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80084b0:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <NotifyCmdStatus+0x3c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2000      	movs	r0, #0
 80084b6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80084b8:	e008      	b.n	80084cc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80084ba:	4b06      	ldr	r3, [pc, #24]	; (80084d4 <NotifyCmdStatus+0x3c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80084c2:	4b04      	ldr	r3, [pc, #16]	; (80084d4 <NotifyCmdStatus+0x3c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2001      	movs	r0, #1
 80084c8:	4798      	blx	r3
  return;
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
}
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	2000032c 	.word	0x2000032c

080084d8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7a5b      	ldrb	r3, [r3, #9]
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d003      	beq.n	80084f0 <TlEvtReceived+0x18>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	7a5b      	ldrb	r3, [r3, #9]
 80084ec:	2b0e      	cmp	r3, #14
 80084ee:	d107      	bne.n	8008500 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80084f0:	6879      	ldr	r1, [r7, #4]
 80084f2:	4809      	ldr	r0, [pc, #36]	; (8008518 <TlEvtReceived+0x40>)
 80084f4:	f000 fd06 	bl	8008f04 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80084f8:	2000      	movs	r0, #0
 80084fa:	f002 f8ab 	bl	800a654 <hci_cmd_resp_release>
 80084fe:	e006      	b.n	800850e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008500:	6879      	ldr	r1, [r7, #4]
 8008502:	4806      	ldr	r0, [pc, #24]	; (800851c <TlEvtReceived+0x44>)
 8008504:	f000 fcfe 	bl	8008f04 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008508:	4804      	ldr	r0, [pc, #16]	; (800851c <TlEvtReceived+0x44>)
 800850a:	f002 f897 	bl	800a63c <hci_notify_asynch_evt>
  }

  return;
 800850e:	bf00      	nop
}
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000324 	.word	0x20000324
 800851c:	200000c4 	.word	0x200000c4

08008520 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a05      	ldr	r2, [pc, #20]	; (8008540 <hci_register_io_bus+0x20>)
 800852c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a04      	ldr	r2, [pc, #16]	; (8008544 <hci_register_io_bus+0x24>)
 8008532:	611a      	str	r2, [r3, #16]

  return;
 8008534:	bf00      	nop
}
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	08008839 	.word	0x08008839
 8008544:	080088a1 	.word	0x080088a1

08008548 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	4a08      	ldr	r2, [pc, #32]	; (8008578 <shci_init+0x30>)
 8008558:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800855a:	4a08      	ldr	r2, [pc, #32]	; (800857c <shci_init+0x34>)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008560:	4806      	ldr	r0, [pc, #24]	; (800857c <shci_init+0x34>)
 8008562:	f000 f915 	bl	8008790 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f898 	bl	80086a0 <TlInit>

  return;
 8008570:	bf00      	nop
}
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20000354 	.word	0x20000354
 800857c:	20000334 	.word	0x20000334

08008580 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008586:	4822      	ldr	r0, [pc, #136]	; (8008610 <shci_user_evt_proc+0x90>)
 8008588:	f000 fc74 	bl	8008e74 <LST_is_empty>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d12b      	bne.n	80085ea <shci_user_evt_proc+0x6a>
 8008592:	4b20      	ldr	r3, [pc, #128]	; (8008614 <shci_user_evt_proc+0x94>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d027      	beq.n	80085ea <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800859a:	f107 030c 	add.w	r3, r7, #12
 800859e:	4619      	mov	r1, r3
 80085a0:	481b      	ldr	r0, [pc, #108]	; (8008610 <shci_user_evt_proc+0x90>)
 80085a2:	f000 fcf6 	bl	8008f92 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80085a6:	4b1c      	ldr	r3, [pc, #112]	; (8008618 <shci_user_evt_proc+0x98>)
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00c      	beq.n	80085c8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80085b2:	2301      	movs	r3, #1
 80085b4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80085b6:	4b18      	ldr	r3, [pc, #96]	; (8008618 <shci_user_evt_proc+0x98>)
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	1d3a      	adds	r2, r7, #4
 80085bc:	4610      	mov	r0, r2
 80085be:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80085c0:	793a      	ldrb	r2, [r7, #4]
 80085c2:	4b14      	ldr	r3, [pc, #80]	; (8008614 <shci_user_evt_proc+0x94>)
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	e002      	b.n	80085ce <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80085c8:	4b12      	ldr	r3, [pc, #72]	; (8008614 <shci_user_evt_proc+0x94>)
 80085ca:	2201      	movs	r2, #1
 80085cc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80085ce:	4b11      	ldr	r3, [pc, #68]	; (8008614 <shci_user_evt_proc+0x94>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fa71 	bl	8008ac0 <TL_MM_EvtDone>
 80085de:	e004      	b.n	80085ea <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4619      	mov	r1, r3
 80085e4:	480a      	ldr	r0, [pc, #40]	; (8008610 <shci_user_evt_proc+0x90>)
 80085e6:	f000 fc67 	bl	8008eb8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80085ea:	4809      	ldr	r0, [pc, #36]	; (8008610 <shci_user_evt_proc+0x90>)
 80085ec:	f000 fc42 	bl	8008e74 <LST_is_empty>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d107      	bne.n	8008606 <shci_user_evt_proc+0x86>
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <shci_user_evt_proc+0x94>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80085fe:	4804      	ldr	r0, [pc, #16]	; (8008610 <shci_user_evt_proc+0x90>)
 8008600:	f7f9 f858 	bl	80016b4 <shci_notify_asynch_evt>
  }


  return;
 8008604:	bf00      	nop
 8008606:	bf00      	nop
}
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	200000d4 	.word	0x200000d4
 8008614:	200000e4 	.word	0x200000e4
 8008618:	20000334 	.word	0x20000334

0800861c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	60ba      	str	r2, [r7, #8]
 8008624:	607b      	str	r3, [r7, #4]
 8008626:	4603      	mov	r3, r0
 8008628:	81fb      	strh	r3, [r7, #14]
 800862a:	460b      	mov	r3, r1
 800862c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800862e:	2000      	movs	r0, #0
 8008630:	f000 f868 	bl	8008704 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008634:	4b17      	ldr	r3, [pc, #92]	; (8008694 <shci_send+0x78>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	89fa      	ldrh	r2, [r7, #14]
 800863a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800863e:	4b15      	ldr	r3, [pc, #84]	; (8008694 <shci_send+0x78>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	7b7a      	ldrb	r2, [r7, #13]
 8008644:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008646:	4b13      	ldr	r3, [pc, #76]	; (8008694 <shci_send+0x78>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	330c      	adds	r3, #12
 800864c:	7b7a      	ldrb	r2, [r7, #13]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	4618      	mov	r0, r3
 8008652:	f003 fcba 	bl	800bfca <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8008656:	4b10      	ldr	r3, [pc, #64]	; (8008698 <shci_send+0x7c>)
 8008658:	2201      	movs	r2, #1
 800865a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <shci_send+0x80>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2100      	movs	r1, #0
 8008662:	2000      	movs	r0, #0
 8008664:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008666:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800866a:	f7f9 f83a 	bl	80016e2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f103 0008 	add.w	r0, r3, #8
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <shci_send+0x78>)
 8008676:	6819      	ldr	r1, [r3, #0]
 8008678:	4b06      	ldr	r3, [pc, #24]	; (8008694 <shci_send+0x78>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	789b      	ldrb	r3, [r3, #2]
 800867e:	3303      	adds	r3, #3
 8008680:	461a      	mov	r2, r3
 8008682:	f003 fca2 	bl	800bfca <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008686:	2001      	movs	r0, #1
 8008688:	f000 f83c 	bl	8008704 <Cmd_SetStatus>

  return;
 800868c:	bf00      	nop
}
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	200000e0 	.word	0x200000e0
 8008698:	20000358 	.word	0x20000358
 800869c:	20000334 	.word	0x20000334

080086a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80086a8:	4a10      	ldr	r2, [pc, #64]	; (80086ec <TlInit+0x4c>)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80086ae:	4810      	ldr	r0, [pc, #64]	; (80086f0 <TlInit+0x50>)
 80086b0:	f000 fbd0 	bl	8008e54 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80086b4:	2001      	movs	r0, #1
 80086b6:	f000 f825 	bl	8008704 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <TlInit+0x54>)
 80086bc:	2201      	movs	r2, #1
 80086be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80086c0:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <TlInit+0x58>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00c      	beq.n	80086e2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80086cc:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <TlInit+0x5c>)
 80086ce:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80086d0:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <TlInit+0x60>)
 80086d2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80086d4:	4b08      	ldr	r3, [pc, #32]	; (80086f8 <TlInit+0x58>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f107 020c 	add.w	r2, r7, #12
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
  }

  return;
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
}
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	200000e0 	.word	0x200000e0
 80086f0:	200000d4 	.word	0x200000d4
 80086f4:	200000e4 	.word	0x200000e4
 80086f8:	20000334 	.word	0x20000334
 80086fc:	08008755 	.word	0x08008755
 8008700:	0800876d 	.word	0x0800876d

08008704 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10b      	bne.n	800872c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008714:	4b0d      	ldr	r3, [pc, #52]	; (800874c <Cmd_SetStatus+0x48>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800871c:	4b0b      	ldr	r3, [pc, #44]	; (800874c <Cmd_SetStatus+0x48>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2000      	movs	r0, #0
 8008722:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <Cmd_SetStatus+0x4c>)
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800872a:	e00b      	b.n	8008744 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800872c:	4b08      	ldr	r3, [pc, #32]	; (8008750 <Cmd_SetStatus+0x4c>)
 800872e:	2201      	movs	r2, #1
 8008730:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008732:	4b06      	ldr	r3, [pc, #24]	; (800874c <Cmd_SetStatus+0x48>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800873a:	4b04      	ldr	r3, [pc, #16]	; (800874c <Cmd_SetStatus+0x48>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2001      	movs	r0, #1
 8008740:	4798      	blx	r3
  return;
 8008742:	bf00      	nop
 8008744:	bf00      	nop
}
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20000354 	.word	0x20000354
 8008750:	200000dc 	.word	0x200000dc

08008754 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800875c:	2000      	movs	r0, #0
 800875e:	f7f8 ffb5 	bl	80016cc <shci_cmd_resp_release>

  return;
 8008762:	bf00      	nop
}
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4805      	ldr	r0, [pc, #20]	; (800878c <TlUserEvtReceived+0x20>)
 8008778:	f000 fbc4 	bl	8008f04 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800877c:	4803      	ldr	r0, [pc, #12]	; (800878c <TlUserEvtReceived+0x20>)
 800877e:	f7f8 ff99 	bl	80016b4 <shci_notify_asynch_evt>

  return;
 8008782:	bf00      	nop
}
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200000d4 	.word	0x200000d4

08008790 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a05      	ldr	r2, [pc, #20]	; (80087b0 <shci_register_io_bus+0x20>)
 800879c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a04      	ldr	r2, [pc, #16]	; (80087b4 <shci_register_io_bus+0x24>)
 80087a2:	611a      	str	r2, [r3, #16]

  return;
 80087a4:	bf00      	nop
}
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	0800894d 	.word	0x0800894d
 80087b4:	080089a1 	.word	0x080089a1

080087b8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80087bc:	f002 fe10 	bl	800b3e0 <HW_IPCC_Enable>

  return;
 80087c0:	bf00      	nop
}
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <TL_Init>:


void TL_Init( void )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80087c8:	4b10      	ldr	r3, [pc, #64]	; (800880c <TL_Init+0x48>)
 80087ca:	4a11      	ldr	r2, [pc, #68]	; (8008810 <TL_Init+0x4c>)
 80087cc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80087ce:	4b0f      	ldr	r3, [pc, #60]	; (800880c <TL_Init+0x48>)
 80087d0:	4a10      	ldr	r2, [pc, #64]	; (8008814 <TL_Init+0x50>)
 80087d2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80087d4:	4b0d      	ldr	r3, [pc, #52]	; (800880c <TL_Init+0x48>)
 80087d6:	4a10      	ldr	r2, [pc, #64]	; (8008818 <TL_Init+0x54>)
 80087d8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80087da:	4b0c      	ldr	r3, [pc, #48]	; (800880c <TL_Init+0x48>)
 80087dc:	4a0f      	ldr	r2, [pc, #60]	; (800881c <TL_Init+0x58>)
 80087de:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <TL_Init+0x48>)
 80087e2:	4a0f      	ldr	r2, [pc, #60]	; (8008820 <TL_Init+0x5c>)
 80087e4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <TL_Init+0x48>)
 80087e8:	4a0e      	ldr	r2, [pc, #56]	; (8008824 <TL_Init+0x60>)
 80087ea:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <TL_Init+0x48>)
 80087ee:	4a0e      	ldr	r2, [pc, #56]	; (8008828 <TL_Init+0x64>)
 80087f0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80087f2:	4b06      	ldr	r3, [pc, #24]	; (800880c <TL_Init+0x48>)
 80087f4:	4a0d      	ldr	r2, [pc, #52]	; (800882c <TL_Init+0x68>)
 80087f6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80087f8:	4b04      	ldr	r3, [pc, #16]	; (800880c <TL_Init+0x48>)
 80087fa:	4a0d      	ldr	r2, [pc, #52]	; (8008830 <TL_Init+0x6c>)
 80087fc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80087fe:	4b03      	ldr	r3, [pc, #12]	; (800880c <TL_Init+0x48>)
 8008800:	4a0c      	ldr	r2, [pc, #48]	; (8008834 <TL_Init+0x70>)
 8008802:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008804:	f002 fe00 	bl	800b408 <HW_IPCC_Init>

  return;
 8008808:	bf00      	nop
}
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20030000 	.word	0x20030000
 8008810:	20030028 	.word	0x20030028
 8008814:	20030048 	.word	0x20030048
 8008818:	20030058 	.word	0x20030058
 800881c:	20030068 	.word	0x20030068
 8008820:	20030070 	.word	0x20030070
 8008824:	20030078 	.word	0x20030078
 8008828:	20030080 	.word	0x20030080
 800882c:	2003009c 	.word	0x2003009c
 8008830:	200300a0 	.word	0x200300a0
 8008834:	200300ac 	.word	0x200300ac

08008838 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008844:	4811      	ldr	r0, [pc, #68]	; (800888c <TL_BLE_Init+0x54>)
 8008846:	f000 fb05 	bl	8008e54 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800884a:	4b11      	ldr	r3, [pc, #68]	; (8008890 <TL_BLE_Init+0x58>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4a0c      	ldr	r2, [pc, #48]	; (8008894 <TL_BLE_Init+0x5c>)
 8008864:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	4a08      	ldr	r2, [pc, #32]	; (800888c <TL_BLE_Init+0x54>)
 800886a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800886c:	f002 fde2 	bl	800b434 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a08      	ldr	r2, [pc, #32]	; (8008898 <TL_BLE_Init+0x60>)
 8008876:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a07      	ldr	r2, [pc, #28]	; (800889c <TL_BLE_Init+0x64>)
 800887e:	6013      	str	r3, [r2, #0]

  return 0;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	200300c8 	.word	0x200300c8
 8008890:	20030000 	.word	0x20030000
 8008894:	20030a58 	.word	0x20030a58
 8008898:	20000364 	.word	0x20000364
 800889c:	20000368 	.word	0x20000368

080088a0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <TL_BLE_SendCmd+0x34>)
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2201      	movs	r2, #1
 80088b4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80088b6:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <TL_BLE_SendCmd+0x34>)
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4619      	mov	r1, r3
 80088be:	2001      	movs	r0, #1
 80088c0:	f000 f96c 	bl	8008b9c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80088c4:	f002 fdc0 	bl	800b448 <HW_IPCC_BLE_SendCmd>

  return 0;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20030000 	.word	0x20030000

080088d8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80088de:	e01c      	b.n	800891a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80088e0:	1d3b      	adds	r3, r7, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4812      	ldr	r0, [pc, #72]	; (8008930 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80088e6:	f000 fb54 	bl	8008f92 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	7a5b      	ldrb	r3, [r3, #9]
 80088ee:	2b0f      	cmp	r3, #15
 80088f0:	d003      	beq.n	80088fa <HW_IPCC_BLE_RxEvtNot+0x22>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7a5b      	ldrb	r3, [r3, #9]
 80088f6:	2b0e      	cmp	r3, #14
 80088f8:	d105      	bne.n	8008906 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4619      	mov	r1, r3
 80088fe:	2002      	movs	r0, #2
 8008900:	f000 f94c 	bl	8008b9c <OutputDbgTrace>
 8008904:	e004      	b.n	8008910 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4619      	mov	r1, r3
 800890a:	2003      	movs	r0, #3
 800890c:	f000 f946 	bl	8008b9c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008910:	4b08      	ldr	r3, [pc, #32]	; (8008934 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	4610      	mov	r0, r2
 8008918:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800891a:	4805      	ldr	r0, [pc, #20]	; (8008930 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800891c:	f000 faaa 	bl	8008e74 <LST_is_empty>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0dc      	beq.n	80088e0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008926:	bf00      	nop
}
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200300c8 	.word	0x200300c8
 8008934:	20000364 	.word	0x20000364

08008938 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800893c:	4b02      	ldr	r3, [pc, #8]	; (8008948 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4798      	blx	r3

  return;
 8008942:	bf00      	nop
}
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000368 	.word	0x20000368

0800894c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008958:	480d      	ldr	r0, [pc, #52]	; (8008990 <TL_SYS_Init+0x44>)
 800895a:	f000 fa7b 	bl	8008e54 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <TL_SYS_Init+0x48>)
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4a08      	ldr	r2, [pc, #32]	; (8008990 <TL_SYS_Init+0x44>)
 8008970:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008972:	f002 fd8b 	bl	800b48c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a07      	ldr	r2, [pc, #28]	; (8008998 <TL_SYS_Init+0x4c>)
 800897c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	4a06      	ldr	r2, [pc, #24]	; (800899c <TL_SYS_Init+0x50>)
 8008984:	6013      	str	r3, [r2, #0]

  return 0;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200300d0 	.word	0x200300d0
 8008994:	20030000 	.word	0x20030000
 8008998:	2000036c 	.word	0x2000036c
 800899c:	20000370 	.word	0x20000370

080089a0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <TL_SYS_SendCmd+0x34>)
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2210      	movs	r2, #16
 80089b4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80089b6:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <TL_SYS_SendCmd+0x34>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	2004      	movs	r0, #4
 80089c0:	f000 f8ec 	bl	8008b9c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80089c4:	f002 fd6c 	bl	800b4a0 <HW_IPCC_SYS_SendCmd>

  return 0;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20030000 	.word	0x20030000

080089d8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80089dc:	4b07      	ldr	r3, [pc, #28]	; (80089fc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4619      	mov	r1, r3
 80089e4:	2005      	movs	r0, #5
 80089e6:	f000 f8d9 	bl	8008b9c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80089ea:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a03      	ldr	r2, [pc, #12]	; (80089fc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80089f0:	68d2      	ldr	r2, [r2, #12]
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3

  return;
 80089f8:	bf00      	nop
}
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	20030000 	.word	0x20030000
 8008a00:	2000036c 	.word	0x2000036c

08008a04 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008a0a:	e00e      	b.n	8008a2a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008a0c:	1d3b      	adds	r3, r7, #4
 8008a0e:	4619      	mov	r1, r3
 8008a10:	480b      	ldr	r0, [pc, #44]	; (8008a40 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008a12:	f000 fabe 	bl	8008f92 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	2006      	movs	r0, #6
 8008a1c:	f000 f8be 	bl	8008b9c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008a20:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <HW_IPCC_SYS_EvtNot+0x40>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	4610      	mov	r0, r2
 8008a28:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008a2a:	4805      	ldr	r0, [pc, #20]	; (8008a40 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008a2c:	f000 fa22 	bl	8008e74 <LST_is_empty>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0ea      	beq.n	8008a0c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008a36:	bf00      	nop
}
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	200300d0 	.word	0x200300d0
 8008a44:	20000370 	.word	0x20000370

08008a48 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008a50:	4817      	ldr	r0, [pc, #92]	; (8008ab0 <TL_MM_Init+0x68>)
 8008a52:	f000 f9ff 	bl	8008e54 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008a56:	4817      	ldr	r0, [pc, #92]	; (8008ab4 <TL_MM_Init+0x6c>)
 8008a58:	f000 f9fc 	bl	8008e54 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008a5c:	4b16      	ldr	r3, [pc, #88]	; (8008ab8 <TL_MM_Init+0x70>)
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	4a16      	ldr	r2, [pc, #88]	; (8008abc <TL_MM_Init+0x74>)
 8008a62:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008a64:	4b15      	ldr	r3, [pc, #84]	; (8008abc <TL_MM_Init+0x74>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6892      	ldr	r2, [r2, #8]
 8008a6c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <TL_MM_Init+0x74>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68d2      	ldr	r2, [r2, #12]
 8008a76:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008a78:	4b10      	ldr	r3, [pc, #64]	; (8008abc <TL_MM_Init+0x74>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a0c      	ldr	r2, [pc, #48]	; (8008ab0 <TL_MM_Init+0x68>)
 8008a7e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008a80:	4b0e      	ldr	r3, [pc, #56]	; (8008abc <TL_MM_Init+0x74>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008a8a:	4b0c      	ldr	r3, [pc, #48]	; (8008abc <TL_MM_Init+0x74>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6852      	ldr	r2, [r2, #4]
 8008a92:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008a94:	4b09      	ldr	r3, [pc, #36]	; (8008abc <TL_MM_Init+0x74>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6912      	ldr	r2, [r2, #16]
 8008a9c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008a9e:	4b07      	ldr	r3, [pc, #28]	; (8008abc <TL_MM_Init+0x74>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6952      	ldr	r2, [r2, #20]
 8008aa6:	619a      	str	r2, [r3, #24]

  return;
 8008aa8:	bf00      	nop
}
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	200300b8 	.word	0x200300b8
 8008ab4:	2000035c 	.word	0x2000035c
 8008ab8:	20030000 	.word	0x20030000
 8008abc:	20000374 	.word	0x20000374

08008ac0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	4807      	ldr	r0, [pc, #28]	; (8008ae8 <TL_MM_EvtDone+0x28>)
 8008acc:	f000 fa1a 	bl	8008f04 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f000 f862 	bl	8008b9c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008ad8:	4804      	ldr	r0, [pc, #16]	; (8008aec <TL_MM_EvtDone+0x2c>)
 8008ada:	f002 fd07 	bl	800b4ec <HW_IPCC_MM_SendFreeBuf>

  return;
 8008ade:	bf00      	nop
}
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	2000035c 	.word	0x2000035c
 8008aec:	08008af1 	.word	0x08008af1

08008af0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008af6:	e00c      	b.n	8008b12 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008af8:	1d3b      	adds	r3, r7, #4
 8008afa:	4619      	mov	r1, r3
 8008afc:	480a      	ldr	r0, [pc, #40]	; (8008b28 <SendFreeBuf+0x38>)
 8008afe:	f000 fa48 	bl	8008f92 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008b02:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <SendFreeBuf+0x3c>)
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f9f9 	bl	8008f04 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008b12:	4805      	ldr	r0, [pc, #20]	; (8008b28 <SendFreeBuf+0x38>)
 8008b14:	f000 f9ae 	bl	8008e74 <LST_is_empty>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0ec      	beq.n	8008af8 <SendFreeBuf+0x8>
  }

  return;
 8008b1e:	bf00      	nop
}
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	2000035c 	.word	0x2000035c
 8008b2c:	20030000 	.word	0x20030000

08008b30 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008b34:	4805      	ldr	r0, [pc, #20]	; (8008b4c <TL_TRACES_Init+0x1c>)
 8008b36:	f000 f98d 	bl	8008e54 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008b3a:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <TL_TRACES_Init+0x20>)
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	4a03      	ldr	r2, [pc, #12]	; (8008b4c <TL_TRACES_Init+0x1c>)
 8008b40:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008b42:	f002 fd09 	bl	800b558 <HW_IPCC_TRACES_Init>

  return;
 8008b46:	bf00      	nop
}
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200300c0 	.word	0x200300c0
 8008b50:	20030000 	.word	0x20030000

08008b54 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008b5a:	e008      	b.n	8008b6e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008b5c:	1d3b      	adds	r3, r7, #4
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4808      	ldr	r0, [pc, #32]	; (8008b84 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008b62:	f000 fa16 	bl	8008f92 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 f80d 	bl	8008b88 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008b6e:	4805      	ldr	r0, [pc, #20]	; (8008b84 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008b70:	f000 f980 	bl	8008e74 <LST_is_empty>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0f0      	beq.n	8008b5c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008b7a:	bf00      	nop
}
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	200300c0 	.word	0x200300c0

08008b88 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	2b06      	cmp	r3, #6
 8008bac:	d845      	bhi.n	8008c3a <OutputDbgTrace+0x9e>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <OutputDbgTrace+0x18>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008bd1 	.word	0x08008bd1
 8008bb8:	08008bf5 	.word	0x08008bf5
 8008bbc:	08008bfb 	.word	0x08008bfb
 8008bc0:	08008c0f 	.word	0x08008c0f
 8008bc4:	08008c1b 	.word	0x08008c1b
 8008bc8:	08008c21 	.word	0x08008c21
 8008bcc:	08008c2f 	.word	0x08008c2f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	7a5b      	ldrb	r3, [r3, #9]
 8008bd8:	2bff      	cmp	r3, #255	; 0xff
 8008bda:	d005      	beq.n	8008be8 <OutputDbgTrace+0x4c>
 8008bdc:	2bff      	cmp	r3, #255	; 0xff
 8008bde:	dc05      	bgt.n	8008bec <OutputDbgTrace+0x50>
 8008be0:	2b0e      	cmp	r3, #14
 8008be2:	d005      	beq.n	8008bf0 <OutputDbgTrace+0x54>
 8008be4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008be6:	e001      	b.n	8008bec <OutputDbgTrace+0x50>
          break;
 8008be8:	bf00      	nop
 8008bea:	e027      	b.n	8008c3c <OutputDbgTrace+0xa0>
          break;
 8008bec:	bf00      	nop
 8008bee:	e025      	b.n	8008c3c <OutputDbgTrace+0xa0>
          break;
 8008bf0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008bf2:	e023      	b.n	8008c3c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008bf8:	e020      	b.n	8008c3c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7a5b      	ldrb	r3, [r3, #9]
 8008c02:	2b0e      	cmp	r3, #14
 8008c04:	d001      	beq.n	8008c0a <OutputDbgTrace+0x6e>
 8008c06:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008c08:	e000      	b.n	8008c0c <OutputDbgTrace+0x70>
          break;
 8008c0a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008c0c:	e016      	b.n	8008c3c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	7a5b      	ldrb	r3, [r3, #9]
 8008c16:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008c18:	e010      	b.n	8008c3c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008c1e:	e00d      	b.n	8008c3c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	7a5b      	ldrb	r3, [r3, #9]
 8008c28:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008c2a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008c2c:	e006      	b.n	8008c3c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	7a5b      	ldrb	r3, [r3, #9]
 8008c36:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008c38:	e000      	b.n	8008c3c <OutputDbgTrace+0xa0>

    default:
      break;
 8008c3a:	bf00      	nop
  }

  return;
 8008c3c:	bf00      	nop
}
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8008c54:	215c      	movs	r1, #92	; 0x5c
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f003 f92c 	bl	800beb4 <strrchr>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d007      	beq.n	8008c72 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8008c62:	215c      	movs	r1, #92	; 0x5c
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f003 f925 	bl	800beb4 <strrchr>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e00d      	b.n	8008c8e <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8008c72:	212f      	movs	r1, #47	; 0x2f
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f003 f91d 	bl	800beb4 <strrchr>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d006      	beq.n	8008c8e <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8008c80:	212f      	movs	r1, #47	; 0x2f
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f003 f916 	bl	800beb4 <strrchr>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8008ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ca8:	b672      	cpsid	i
}
 8008caa:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8008cac:	1cbb      	adds	r3, r7, #2
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4812      	ldr	r0, [pc, #72]	; (8008cfc <DbgTrace_TxCpltCallback+0x64>)
 8008cb2:	f000 fbe6 	bl	8009482 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8008cb6:	1cbb      	adds	r3, r7, #2
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4810      	ldr	r0, [pc, #64]	; (8008cfc <DbgTrace_TxCpltCallback+0x64>)
 8008cbc:	f000 fcd2 	bl	8009664 <CircularQueue_Sense>
 8008cc0:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00c      	beq.n	8008ce2 <DbgTrace_TxCpltCallback+0x4a>
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f383 8810 	msr	PRIMASK, r3
}
 8008cd2:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8008cd4:	887b      	ldrh	r3, [r7, #2]
 8008cd6:	4a0a      	ldr	r2, [pc, #40]	; (8008d00 <DbgTrace_TxCpltCallback+0x68>)
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6938      	ldr	r0, [r7, #16]
 8008cdc:	f7f8 f87c 	bl	8000dd8 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8008ce0:	e008      	b.n	8008cf4 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8008ce2:	4b08      	ldr	r3, [pc, #32]	; (8008d04 <DbgTrace_TxCpltCallback+0x6c>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f383 8810 	msr	PRIMASK, r3
}
 8008cf2:	bf00      	nop
}
 8008cf4:	bf00      	nop
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20000378 	.word	0x20000378
 8008d00:	08008c99 	.word	0x08008c99
 8008d04:	2000001d 	.word	0x2000001d

08008d08 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8008d0e:	f7f8 f85d 	bl	8000dcc <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8008d12:	2302      	movs	r3, #2
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d1c:	4903      	ldr	r1, [pc, #12]	; (8008d2c <DbgTraceInit+0x24>)
 8008d1e:	4804      	ldr	r0, [pc, #16]	; (8008d30 <DbgTraceInit+0x28>)
 8008d20:	f000 f956 	bl	8008fd0 <CircularQueue_Init>
#endif 
#endif
  return;
 8008d24:	bf00      	nop
}
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000398 	.word	0x20000398
 8008d30:	20000378 	.word	0x20000378

08008d34 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 f805 	bl	8008d54 <DbgTraceWrite>
 8008d4a:	4603      	mov	r3, r0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08a      	sub	sp, #40	; 0x28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d64:	f3ef 8310 	mrs	r3, PRIMASK
 8008d68:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d6a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8008d6c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d74:	d102      	bne.n	8008d7c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7a:	e037      	b.n	8008dec <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d006      	beq.n	8008d90 <DbgTraceWrite+0x3c>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d003      	beq.n	8008d90 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d8e:	e02d      	b.n	8008dec <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d02a      	beq.n	8008dec <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8008d9a:	b672      	cpsid	i
}
 8008d9c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	2301      	movs	r3, #1
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	4814      	ldr	r0, [pc, #80]	; (8008df8 <DbgTraceWrite+0xa4>)
 8008da8:	f000 f944 	bl	8009034 <CircularQueue_Add>
 8008dac:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d015      	beq.n	8008de0 <DbgTraceWrite+0x8c>
 8008db4:	4b11      	ldr	r3, [pc, #68]	; (8008dfc <DbgTraceWrite+0xa8>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d010      	beq.n	8008de0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <DbgTraceWrite+0xa8>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	701a      	strb	r2, [r3, #0]
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f383 8810 	msr	PRIMASK, r3
}
 8008dce:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	4a0a      	ldr	r2, [pc, #40]	; (8008e00 <DbgTraceWrite+0xac>)
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	69f8      	ldr	r0, [r7, #28]
 8008dda:	f7f7 fffd 	bl	8000dd8 <DbgOutputTraces>
 8008dde:	e005      	b.n	8008dec <DbgTraceWrite+0x98>
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f383 8810 	msr	PRIMASK, r3
}
 8008dea:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000378 	.word	0x20000378
 8008dfc:	2000001d 	.word	0x2000001d
 8008e00:	08008c99 	.word	0x08008c99

08008e04 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <OTP_Read+0x48>)
 8008e10:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008e12:	e002      	b.n	8008e1a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3b08      	subs	r3, #8
 8008e18:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3307      	adds	r3, #7
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	79fa      	ldrb	r2, [r7, #7]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d003      	beq.n	8008e2e <OTP_Read+0x2a>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4a09      	ldr	r2, [pc, #36]	; (8008e50 <OTP_Read+0x4c>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d1f2      	bne.n	8008e14 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3307      	adds	r3, #7
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	79fa      	ldrb	r2, [r7, #7]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d001      	beq.n	8008e3e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	1fff73f8 	.word	0x1fff73f8
 8008e50:	1fff7000 	.word	0x1fff7000

08008e54 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	605a      	str	r2, [r3, #4]
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e80:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e82:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008e84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e86:	b672      	cpsid	i
}
 8008e88:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d102      	bne.n	8008e9a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008e94:	2301      	movs	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
 8008e98:	e001      	b.n	8008e9e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75fb      	strb	r3, [r7, #23]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f383 8810 	msr	PRIMASK, r3
}
 8008ea8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ecc:	b672      	cpsid	i
}
 8008ece:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	605a      	str	r2, [r3, #4]
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f383 8810 	msr	PRIMASK, r3
}
 8008ef6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008ef8:	bf00      	nop
 8008efa:	371c      	adds	r7, #28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f12:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f14:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f18:	b672      	cpsid	i
}
 8008f1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f383 8810 	msr	PRIMASK, r3
}
 8008f42:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f44:	bf00      	nop
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f58:	f3ef 8310 	mrs	r3, PRIMASK
 8008f5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f62:	b672      	cpsid	i
}
 8008f64:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	6852      	ldr	r2, [r2, #4]
 8008f78:	605a      	str	r2, [r3, #4]
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f383 8810 	msr	PRIMASK, r3
}
 8008f84:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008fa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fa6:	b672      	cpsid	i
}
 8008fa8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff ffca 	bl	8008f50 <LST_remove_node>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f383 8810 	msr	PRIMASK, r3
}
 8008fc6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008fc8:	bf00      	nop
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	887a      	ldrh	r2, [r7, #2]
 8009006:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	7e3a      	ldrb	r2, [r7, #24]
 800900c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800900e:	7e3b      	ldrb	r3, [r7, #24]
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d006      	beq.n	8009026 <CircularQueue_Init+0x56>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	891b      	ldrh	r3, [r3, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009020:	f04f 33ff 	mov.w	r3, #4294967295
 8009024:	e000      	b.n	8009028 <CircularQueue_Init+0x58>
  }
  return 0;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08e      	sub	sp, #56	; 0x38
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	4613      	mov	r3, r2
 8009042:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009044:	2300      	movs	r3, #0
 8009046:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009048:	2300      	movs	r3, #0
 800904a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800904c:	2300      	movs	r3, #0
 800904e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009050:	2300      	movs	r3, #0
 8009052:	62bb      	str	r3, [r7, #40]	; 0x28
 8009054:	2300      	movs	r3, #0
 8009056:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009058:	2300      	movs	r3, #0
 800905a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800905c:	2300      	movs	r3, #0
 800905e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	891b      	ldrh	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <CircularQueue_Add+0x38>
 8009068:	2302      	movs	r3, #2
 800906a:	e000      	b.n	800906e <CircularQueue_Add+0x3a>
 800906c:	2300      	movs	r3, #0
 800906e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d02a      	beq.n	80090ce <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	891b      	ldrh	r3, [r3, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d123      	bne.n	80090c8 <CircularQueue_Add+0x94>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	4413      	add	r3, r2
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	b29a      	uxth	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6819      	ldr	r1, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	1c58      	adds	r0, r3, #1
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4298      	cmp	r0, r3
 800909e:	d306      	bcc.n	80090ae <CircularQueue_Add+0x7a>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6918      	ldr	r0, [r3, #16]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	1ac3      	subs	r3, r0, r3
 80090aa:	3301      	adds	r3, #1
 80090ac:	e002      	b.n	80090b4 <CircularQueue_Add+0x80>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	3301      	adds	r3, #1
 80090b4:	440b      	add	r3, r1
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	021b      	lsls	r3, r3, #8
 80090bc:	b29b      	uxth	r3, r3
 80090be:	4413      	add	r3, r2
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	3302      	adds	r3, #2
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	e001      	b.n	80090cc <CircularQueue_Add+0x98>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	891b      	ldrh	r3, [r3, #8]
 80090cc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	891b      	ldrh	r3, [r3, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	891b      	ldrh	r3, [r3, #8]
 80090da:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d307      	bcc.n	80090f8 <CircularQueue_Add+0xc4>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6919      	ldr	r1, [r3, #16]
 80090f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090f2:	440b      	add	r3, r1
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	e000      	b.n	80090fa <CircularQueue_Add+0xc6>
 80090f8:	2300      	movs	r3, #0
 80090fa:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80090fc:	88fa      	ldrh	r2, [r7, #6]
 80090fe:	7ffb      	ldrb	r3, [r7, #31]
 8009100:	4413      	add	r3, r2
 8009102:	461a      	mov	r2, r3
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	fb02 f303 	mul.w	r3, r2, r3
 800910a:	69ba      	ldr	r2, [r7, #24]
 800910c:	429a      	cmp	r2, r3
 800910e:	d80b      	bhi.n	8009128 <CircularQueue_Add+0xf4>
 8009110:	88fa      	ldrh	r2, [r7, #6]
 8009112:	7ffb      	ldrb	r3, [r7, #31]
 8009114:	4413      	add	r3, r2
 8009116:	461a      	mov	r2, r3
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	fbb3 f1f2 	udiv	r1, r3, r2
 800911e:	fb01 f202 	mul.w	r2, r1, r2
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	b2db      	uxtb	r3, r3
 8009126:	e000      	b.n	800912a <CircularQueue_Add+0xf6>
 8009128:	2300      	movs	r3, #0
 800912a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800912c:	7dfa      	ldrb	r2, [r7, #23]
 800912e:	7ffb      	ldrb	r3, [r7, #31]
 8009130:	429a      	cmp	r2, r3
 8009132:	bf8c      	ite	hi
 8009134:	2301      	movhi	r3, #1
 8009136:	2300      	movls	r3, #0
 8009138:	b2db      	uxtb	r3, r3
 800913a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800913c:	7fbb      	ldrb	r3, [r7, #30]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d008      	beq.n	8009154 <CircularQueue_Add+0x120>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	7f1b      	ldrb	r3, [r3, #28]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <CircularQueue_Add+0x120>
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	b29b      	uxth	r3, r3
 8009152:	e000      	b.n	8009156 <CircularQueue_Add+0x122>
 8009154:	8bbb      	ldrh	r3, [r7, #28]
 8009156:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009158:	7fbb      	ldrb	r3, [r7, #30]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d008      	beq.n	8009170 <CircularQueue_Add+0x13c>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	7f1b      	ldrb	r3, [r3, #28]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <CircularQueue_Add+0x13c>
 800916a:	7ffb      	ldrb	r3, [r7, #31]
 800916c:	b29b      	uxth	r3, r3
 800916e:	e000      	b.n	8009172 <CircularQueue_Add+0x13e>
 8009170:	8bbb      	ldrh	r3, [r7, #28]
 8009172:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 817e 	beq.w	8009478 <CircularQueue_Add+0x444>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	695a      	ldr	r2, [r3, #20]
 8009180:	88f9      	ldrh	r1, [r7, #6]
 8009182:	7ffb      	ldrb	r3, [r7, #31]
 8009184:	440b      	add	r3, r1
 8009186:	4619      	mov	r1, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	441a      	add	r2, r3
 8009190:	8bbb      	ldrh	r3, [r7, #28]
 8009192:	441a      	add	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	f200 816d 	bhi.w	8009478 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800919e:	2300      	movs	r3, #0
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091a2:	e14a      	b.n	800943a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	691a      	ldr	r2, [r3, #16]
 80091a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091aa:	441a      	add	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d307      	bcc.n	80091c4 <CircularQueue_Add+0x190>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	691a      	ldr	r2, [r3, #16]
 80091b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091ba:	441a      	add	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	e003      	b.n	80091cc <CircularQueue_Add+0x198>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091ca:	4413      	add	r3, r2
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	891b      	ldrh	r3, [r3, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d130      	bne.n	8009240 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	1c59      	adds	r1, r3, #1
 80091e6:	6339      	str	r1, [r7, #48]	; 0x30
 80091e8:	4413      	add	r3, r2
 80091ea:	88fa      	ldrh	r2, [r7, #6]
 80091ec:	b2d2      	uxtb	r2, r2
 80091ee:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d304      	bcc.n	8009204 <CircularQueue_Add+0x1d0>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	e000      	b.n	8009206 <CircularQueue_Add+0x1d2>
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	b298      	uxth	r0, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	1c59      	adds	r1, r3, #1
 8009216:	6339      	str	r1, [r7, #48]	; 0x30
 8009218:	4413      	add	r3, r2
 800921a:	b2c2      	uxtb	r2, r0
 800921c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009224:	429a      	cmp	r2, r3
 8009226:	d304      	bcc.n	8009232 <CircularQueue_Add+0x1fe>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	e000      	b.n	8009234 <CircularQueue_Add+0x200>
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	1c9a      	adds	r2, r3, #2
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009240:	88fa      	ldrh	r2, [r7, #6]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6859      	ldr	r1, [r3, #4]
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	1acb      	subs	r3, r1, r3
 800924a:	4293      	cmp	r3, r2
 800924c:	bf28      	it	cs
 800924e:	4613      	movcs	r3, r2
 8009250:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009252:	88fb      	ldrh	r3, [r7, #6]
 8009254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009256:	429a      	cmp	r2, r3
 8009258:	d007      	beq.n	800926a <CircularQueue_Add+0x236>
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800925e:	429a      	cmp	r2, r3
 8009260:	d225      	bcs.n	80092ae <CircularQueue_Add+0x27a>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	7f1b      	ldrb	r3, [r3, #28]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d121      	bne.n	80092ae <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	18d0      	adds	r0, r2, r3
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009276:	fb02 f303 	mul.w	r3, r2, r3
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	4413      	add	r3, r2
 800927e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009280:	4619      	mov	r1, r3
 8009282:	f002 fea2 	bl	800bfca <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	695a      	ldr	r2, [r3, #20]
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	441a      	add	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009292:	2300      	movs	r3, #0
 8009294:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80092a2:	7ffb      	ldrb	r3, [r7, #31]
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	88fb      	ldrh	r3, [r7, #6]
 80092a8:	4413      	add	r3, r2
 80092aa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80092ac:	e0a4      	b.n	80093f8 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 80a1 	beq.w	80093f8 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	7f1b      	ldrb	r3, [r3, #28]
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d03a      	beq.n	8009338 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	891b      	ldrh	r3, [r3, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10d      	bne.n	80092e6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	3b02      	subs	r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	22ff      	movs	r2, #255	; 0xff
 80092d6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	3b01      	subs	r3, #1
 80092e0:	4413      	add	r3, r2
 80092e2:	22ff      	movs	r2, #255	; 0xff
 80092e4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	695a      	ldr	r2, [r3, #20]
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	441a      	add	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80092fa:	2300      	movs	r3, #0
 80092fc:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	891b      	ldrh	r3, [r3, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d16f      	bne.n	80093e6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	1c59      	adds	r1, r3, #1
 800930e:	6339      	str	r1, [r7, #48]	; 0x30
 8009310:	4413      	add	r3, r2
 8009312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009314:	b2d2      	uxtb	r2, r2
 8009316:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	0a18      	lsrs	r0, r3, #8
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	1c59      	adds	r1, r3, #1
 8009324:	6339      	str	r1, [r7, #48]	; 0x30
 8009326:	4413      	add	r3, r2
 8009328:	b2c2      	uxtb	r2, r0
 800932a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	1c9a      	adds	r2, r3, #2
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	615a      	str	r2, [r3, #20]
 8009336:	e056      	b.n	80093e6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	7f1b      	ldrb	r3, [r3, #28]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d050      	beq.n	80093e6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	891b      	ldrh	r3, [r3, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d14a      	bne.n	80093e2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	3b02      	subs	r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	0a19      	lsrs	r1, r3, #8
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	3b01      	subs	r3, #1
 8009368:	4413      	add	r3, r2
 800936a:	b2ca      	uxtb	r2, r1
 800936c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	18d0      	adds	r0, r2, r3
 8009376:	88fb      	ldrh	r3, [r7, #6]
 8009378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937a:	fb02 f303 	mul.w	r3, r2, r3
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	4413      	add	r3, r2
 8009382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009384:	4619      	mov	r1, r3
 8009386:	f002 fe20 	bl	800bfca <memcpy>
             q->byteCount += NbBytesToCopy; 
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	695a      	ldr	r2, [r3, #20]
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	441a      	add	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800939a:	88fa      	ldrh	r2, [r7, #6]
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 80093ac:	2300      	movs	r3, #0
 80093ae:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	1c59      	adds	r1, r3, #1
 80093b8:	6339      	str	r1, [r7, #48]	; 0x30
 80093ba:	4413      	add	r3, r2
 80093bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	0a18      	lsrs	r0, r3, #8
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	1c59      	adds	r1, r3, #1
 80093ce:	6339      	str	r1, [r7, #48]	; 0x30
 80093d0:	4413      	add	r3, r2
 80093d2:	b2c2      	uxtb	r2, r0
 80093d4:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	1c9a      	adds	r2, r3, #2
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	615a      	str	r2, [r3, #20]
 80093e0:	e001      	b.n	80093e6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	e049      	b.n	800947a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80093e6:	7ffb      	ldrb	r3, [r7, #31]
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	4413      	add	r3, r2
 80093f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d015      	beq.n	800942a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	18d0      	adds	r0, r2, r3
 8009406:	88fb      	ldrh	r3, [r7, #6]
 8009408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800940a:	fb03 f202 	mul.w	r2, r3, r2
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	4413      	add	r3, r2
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	4413      	add	r3, r2
 8009416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009418:	4619      	mov	r1, r3
 800941a:	f002 fdd6 	bl	800bfca <memcpy>
        q->byteCount += NbBytesToCopy;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	695a      	ldr	r2, [r3, #20]
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	441a      	add	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	3301      	adds	r3, #1
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800943a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	f4ff aeb0 	bcc.w	80091a4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6919      	ldr	r1, [r3, #16]
 800944c:	7ffb      	ldrb	r3, [r7, #31]
 800944e:	4419      	add	r1, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	4299      	cmp	r1, r3
 8009456:	d307      	bcc.n	8009468 <CircularQueue_Add+0x434>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6919      	ldr	r1, [r3, #16]
 800945c:	7ffb      	ldrb	r3, [r7, #31]
 800945e:	4419      	add	r1, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	1acb      	subs	r3, r1, r3
 8009466:	e003      	b.n	8009470 <CircularQueue_Add+0x43c>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6919      	ldr	r1, [r3, #16]
 800946c:	7ffb      	ldrb	r3, [r7, #31]
 800946e:	440b      	add	r3, r1
 8009470:	4413      	add	r3, r2
 8009472:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	e000      	b.n	800947a <CircularQueue_Add+0x446>
    return NULL;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3738      	adds	r7, #56	; 0x38
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	891b      	ldrh	r3, [r3, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <CircularQueue_Remove+0x1e>
 800949c:	2302      	movs	r3, #2
 800949e:	e000      	b.n	80094a2 <CircularQueue_Remove+0x20>
 80094a0:	2300      	movs	r3, #0
 80094a2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 80cc 	beq.w	800964a <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	891b      	ldrh	r3, [r3, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d121      	bne.n	80094fe <CircularQueue_Remove+0x7c>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6819      	ldr	r1, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	1c58      	adds	r0, r3, #1
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	4298      	cmp	r0, r3
 80094d8:	d306      	bcc.n	80094e8 <CircularQueue_Remove+0x66>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68d8      	ldr	r0, [r3, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	1ac3      	subs	r3, r0, r3
 80094e4:	3301      	adds	r3, #1
 80094e6:	e002      	b.n	80094ee <CircularQueue_Remove+0x6c>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	3301      	adds	r3, #1
 80094ee:	440b      	add	r3, r1
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	021b      	lsls	r3, r3, #8
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	4413      	add	r3, r2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	e001      	b.n	8009502 <CircularQueue_Remove+0x80>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	891b      	ldrh	r3, [r3, #8]
 8009502:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	7f1b      	ldrb	r3, [r3, #28]
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d057      	beq.n	80095c0 <CircularQueue_Remove+0x13e>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7f1b      	ldrb	r3, [r3, #28]
 8009514:	f003 0302 	and.w	r3, r3, #2
 8009518:	2b00      	cmp	r3, #0
 800951a:	d151      	bne.n	80095c0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800951c:	897b      	ldrh	r3, [r7, #10]
 800951e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009522:	4293      	cmp	r3, r2
 8009524:	d103      	bne.n	800952e <CircularQueue_Remove+0xac>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	891b      	ldrh	r3, [r3, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d012      	beq.n	8009554 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009536:	429a      	cmp	r2, r3
 8009538:	d942      	bls.n	80095c0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	891b      	ldrh	r3, [r3, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d03e      	beq.n	80095c0 <CircularQueue_Remove+0x13e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	8912      	ldrh	r2, [r2, #8]
 8009550:	4293      	cmp	r3, r2
 8009552:	d235      	bcs.n	80095c0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	695a      	ldr	r2, [r3, #20]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68d9      	ldr	r1, [r3, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	1acb      	subs	r3, r1, r3
 8009562:	441a      	add	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	891b      	ldrh	r3, [r3, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d121      	bne.n	80095ba <CircularQueue_Remove+0x138>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	4413      	add	r3, r2
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6819      	ldr	r1, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	1c58      	adds	r0, r3, #1
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	4298      	cmp	r0, r3
 8009594:	d306      	bcc.n	80095a4 <CircularQueue_Remove+0x122>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68d8      	ldr	r0, [r3, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	1ac3      	subs	r3, r0, r3
 80095a0:	3301      	adds	r3, #1
 80095a2:	e002      	b.n	80095aa <CircularQueue_Remove+0x128>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	440b      	add	r3, r1
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	4413      	add	r3, r2
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	e001      	b.n	80095be <CircularQueue_Remove+0x13c>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	891b      	ldrh	r3, [r3, #8]
 80095be:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68d9      	ldr	r1, [r3, #12]
 80095c8:	7a7b      	ldrb	r3, [r7, #9]
 80095ca:	4419      	add	r1, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	4299      	cmp	r1, r3
 80095d2:	d307      	bcc.n	80095e4 <CircularQueue_Remove+0x162>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68d9      	ldr	r1, [r3, #12]
 80095d8:	7a7b      	ldrb	r3, [r7, #9]
 80095da:	4419      	add	r1, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	1acb      	subs	r3, r1, r3
 80095e2:	e003      	b.n	80095ec <CircularQueue_Remove+0x16a>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68d9      	ldr	r1, [r3, #12]
 80095e8:	7a7b      	ldrb	r3, [r7, #9]
 80095ea:	440b      	add	r3, r1
 80095ec:	4413      	add	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	8979      	ldrh	r1, [r7, #10]
 80095f6:	7a7a      	ldrb	r2, [r7, #9]
 80095f8:	440a      	add	r2, r1
 80095fa:	1a9a      	subs	r2, r3, r2
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01b      	beq.n	8009640 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	897b      	ldrh	r3, [r7, #10]
 800960e:	441a      	add	r2, r3
 8009610:	7a7b      	ldrb	r3, [r7, #9]
 8009612:	441a      	add	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	429a      	cmp	r2, r3
 800961a:	d309      	bcc.n	8009630 <CircularQueue_Remove+0x1ae>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	897b      	ldrh	r3, [r7, #10]
 8009622:	441a      	add	r2, r3
 8009624:	7a7b      	ldrb	r3, [r7, #9]
 8009626:	441a      	add	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	e005      	b.n	800963c <CircularQueue_Remove+0x1ba>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	897b      	ldrh	r3, [r7, #10]
 8009636:	441a      	add	r2, r3
 8009638:	7a7b      	ldrb	r3, [r7, #9]
 800963a:	4413      	add	r3, r2
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	1e5a      	subs	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	897a      	ldrh	r2, [r7, #10]
 8009654:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8009656:	68fb      	ldr	r3, [r7, #12]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	891b      	ldrh	r3, [r3, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <CircularQueue_Sense+0x1e>
 800967e:	2302      	movs	r3, #2
 8009680:	e000      	b.n	8009684 <CircularQueue_Sense+0x20>
 8009682:	2300      	movs	r3, #0
 8009684:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 8090 	beq.w	80097b8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	891b      	ldrh	r3, [r3, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d121      	bne.n	80096ea <CircularQueue_Sense+0x86>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6819      	ldr	r1, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	1c58      	adds	r0, r3, #1
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	4298      	cmp	r0, r3
 80096c4:	d306      	bcc.n	80096d4 <CircularQueue_Sense+0x70>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68d8      	ldr	r0, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	1ac3      	subs	r3, r0, r3
 80096d0:	3301      	adds	r3, #1
 80096d2:	e002      	b.n	80096da <CircularQueue_Sense+0x76>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	440b      	add	r3, r1
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	4413      	add	r3, r2
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	e001      	b.n	80096ee <CircularQueue_Sense+0x8a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	891b      	ldrh	r3, [r3, #8]
 80096ee:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	7f1b      	ldrb	r3, [r3, #28]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d048      	beq.n	800978e <CircularQueue_Sense+0x12a>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7f1b      	ldrb	r3, [r3, #28]
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d142      	bne.n	800978e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009708:	8a7b      	ldrh	r3, [r7, #18]
 800970a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800970e:	4293      	cmp	r3, r2
 8009710:	d103      	bne.n	800971a <CircularQueue_Sense+0xb6>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	891b      	ldrh	r3, [r3, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d012      	beq.n	8009740 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009722:	429a      	cmp	r2, r3
 8009724:	d933      	bls.n	800978e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	891b      	ldrh	r3, [r3, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d02f      	beq.n	800978e <CircularQueue_Sense+0x12a>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	8912      	ldrh	r2, [r2, #8]
 800973c:	4293      	cmp	r3, r2
 800973e:	d226      	bcs.n	800978e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	891b      	ldrh	r3, [r3, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d11d      	bne.n	8009788 <CircularQueue_Sense+0x124>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6819      	ldr	r1, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	1c58      	adds	r0, r3, #1
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	4298      	cmp	r0, r3
 8009766:	d305      	bcc.n	8009774 <CircularQueue_Sense+0x110>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	1ac3      	subs	r3, r0, r3
 8009770:	3301      	adds	r3, #1
 8009772:	e001      	b.n	8009778 <CircularQueue_Sense+0x114>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	440b      	add	r3, r1
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b29b      	uxth	r3, r3
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	b29b      	uxth	r3, r3
 8009782:	4413      	add	r3, r2
 8009784:	b29b      	uxth	r3, r3
 8009786:	e001      	b.n	800978c <CircularQueue_Sense+0x128>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	891b      	ldrh	r3, [r3, #8]
 800978c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	7af9      	ldrb	r1, [r7, #11]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4419      	add	r1, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	4299      	cmp	r1, r3
 800979e:	d306      	bcc.n	80097ae <CircularQueue_Sense+0x14a>
 80097a0:	7af9      	ldrb	r1, [r7, #11]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4419      	add	r1, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	1acb      	subs	r3, r1, r3
 80097ac:	e002      	b.n	80097b4 <CircularQueue_Sense+0x150>
 80097ae:	7af9      	ldrb	r1, [r7, #11]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	440b      	add	r3, r1
 80097b4:	4413      	add	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	8a7a      	ldrh	r2, [r7, #18]
 80097c2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80097c4:	697b      	ldr	r3, [r7, #20]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
	...

080097d4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80097d8:	4b03      	ldr	r3, [pc, #12]	; (80097e8 <LL_FLASH_GetUDN+0x14>)
 80097da:	681b      	ldr	r3, [r3, #0]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	1fff7580 	.word	0x1fff7580

080097ec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80097f0:	4b03      	ldr	r3, [pc, #12]	; (8009800 <LL_FLASH_GetDeviceID+0x14>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	b2db      	uxtb	r3, r3
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	1fff7584 	.word	0x1fff7584

08009804 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009804:	b480      	push	{r7}
 8009806:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8009808:	4b03      	ldr	r3, [pc, #12]	; (8009818 <LL_FLASH_GetSTCompanyID+0x14>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	0a1b      	lsrs	r3, r3, #8
}
 800980e:	4618      	mov	r0, r3
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	1fff7584 	.word	0x1fff7584

0800981c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800981c:	b5b0      	push	{r4, r5, r7, lr}
 800981e:	b090      	sub	sp, #64	; 0x40
 8009820:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009822:	2392      	movs	r3, #146	; 0x92
 8009824:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009828:	4b45      	ldr	r3, [pc, #276]	; (8009940 <APP_BLE_Init+0x124>)
 800982a:	1d3c      	adds	r4, r7, #4
 800982c:	461d      	mov	r5, r3
 800982e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800983a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800983e:	c403      	stmia	r4!, {r0, r1}
 8009840:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8009842:	f000 fb39 	bl	8009eb8 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009846:	2101      	movs	r1, #1
 8009848:	2002      	movs	r0, #2
 800984a:	f001 fead 	bl	800b5a8 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800984e:	4a3d      	ldr	r2, [pc, #244]	; (8009944 <APP_BLE_Init+0x128>)
 8009850:	2100      	movs	r1, #0
 8009852:	2002      	movs	r0, #2
 8009854:	f001 ffd4 	bl	800b800 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009858:	1d3b      	adds	r3, r7, #4
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fbe6 	bl	800802c <SHCI_C2_BLE_Init>
 8009860:	4603      	mov	r3, r0
 8009862:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8009866:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800986a:	2b00      	cmp	r3, #0
 800986c:	d012      	beq.n	8009894 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800986e:	4836      	ldr	r0, [pc, #216]	; (8009948 <APP_BLE_Init+0x12c>)
 8009870:	f7ff f9ea 	bl	8008c48 <DbgTraceGetFileName>
 8009874:	4601      	mov	r1, r0
 8009876:	f240 1347 	movw	r3, #327	; 0x147
 800987a:	4a34      	ldr	r2, [pc, #208]	; (800994c <APP_BLE_Init+0x130>)
 800987c:	4834      	ldr	r0, [pc, #208]	; (8009950 <APP_BLE_Init+0x134>)
 800987e:	f002 f9c3 	bl	800bc08 <iprintf>
 8009882:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009886:	4619      	mov	r1, r3
 8009888:	4832      	ldr	r0, [pc, #200]	; (8009954 <APP_BLE_Init+0x138>)
 800988a:	f002 f9bd 	bl	800bc08 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800988e:	f7f8 ff81 	bl	8002794 <Error_Handler>
 8009892:	e00c      	b.n	80098ae <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8009894:	482c      	ldr	r0, [pc, #176]	; (8009948 <APP_BLE_Init+0x12c>)
 8009896:	f7ff f9d7 	bl	8008c48 <DbgTraceGetFileName>
 800989a:	4601      	mov	r1, r0
 800989c:	f240 134d 	movw	r3, #333	; 0x14d
 80098a0:	4a2a      	ldr	r2, [pc, #168]	; (800994c <APP_BLE_Init+0x130>)
 80098a2:	482b      	ldr	r0, [pc, #172]	; (8009950 <APP_BLE_Init+0x134>)
 80098a4:	f002 f9b0 	bl	800bc08 <iprintf>
 80098a8:	482b      	ldr	r0, [pc, #172]	; (8009958 <APP_BLE_Init+0x13c>)
 80098aa:	f002 f9ad 	bl	800bc08 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80098ae:	f000 fb19 	bl	8009ee4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80098b2:	f7fe fb15 	bl	8007ee0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80098b6:	4b29      	ldr	r3, [pc, #164]	; (800995c <APP_BLE_Init+0x140>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80098be:	4b27      	ldr	r3, [pc, #156]	; (800995c <APP_BLE_Init+0x140>)
 80098c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098c4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80098c6:	4a26      	ldr	r2, [pc, #152]	; (8009960 <APP_BLE_Init+0x144>)
 80098c8:	2100      	movs	r1, #0
 80098ca:	2001      	movs	r0, #1
 80098cc:	f001 ff98 	bl	800b800 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80098d0:	2006      	movs	r0, #6
 80098d2:	f7fe f978 	bl	8007bc6 <aci_hal_set_radio_activity_mask>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 80098dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d010      	beq.n	8009906 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80098e4:	4818      	ldr	r0, [pc, #96]	; (8009948 <APP_BLE_Init+0x12c>)
 80098e6:	f7ff f9af 	bl	8008c48 <DbgTraceGetFileName>
 80098ea:	4601      	mov	r1, r0
 80098ec:	f240 1371 	movw	r3, #369	; 0x171
 80098f0:	4a16      	ldr	r2, [pc, #88]	; (800994c <APP_BLE_Init+0x130>)
 80098f2:	4817      	ldr	r0, [pc, #92]	; (8009950 <APP_BLE_Init+0x134>)
 80098f4:	f002 f988 	bl	800bc08 <iprintf>
 80098f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098fc:	4619      	mov	r1, r3
 80098fe:	4819      	ldr	r0, [pc, #100]	; (8009964 <APP_BLE_Init+0x148>)
 8009900:	f002 f982 	bl	800bc08 <iprintf>
 8009904:	e00c      	b.n	8009920 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8009906:	4810      	ldr	r0, [pc, #64]	; (8009948 <APP_BLE_Init+0x12c>)
 8009908:	f7ff f99e 	bl	8008c48 <DbgTraceGetFileName>
 800990c:	4601      	mov	r1, r0
 800990e:	f240 1375 	movw	r3, #373	; 0x175
 8009912:	4a0e      	ldr	r2, [pc, #56]	; (800994c <APP_BLE_Init+0x130>)
 8009914:	480e      	ldr	r0, [pc, #56]	; (8009950 <APP_BLE_Init+0x134>)
 8009916:	f002 f977 	bl	800bc08 <iprintf>
 800991a:	4813      	ldr	r0, [pc, #76]	; (8009968 <APP_BLE_Init+0x14c>)
 800991c:	f002 f974 	bl	800bc08 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009920:	f000 ffae 	bl	800a880 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8009924:	4b0d      	ldr	r3, [pc, #52]	; (800995c <APP_BLE_Init+0x140>)
 8009926:	2200      	movs	r2, #0
 8009928:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800992a:	4b0c      	ldr	r3, [pc, #48]	; (800995c <APP_BLE_Init+0x140>)
 800992c:	2200      	movs	r2, #0
 800992e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8009930:	2001      	movs	r0, #1
 8009932:	f000 fd6b 	bl	800a40c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8009936:	bf00      	nop
}
 8009938:	3740      	adds	r7, #64	; 0x40
 800993a:	46bd      	mov	sp, r7
 800993c:	bdb0      	pop	{r4, r5, r7, pc}
 800993e:	bf00      	nop
 8009940:	0800cf54 	.word	0x0800cf54
 8009944:	08008249 	.word	0x08008249
 8009948:	0800ce48 	.word	0x0800ce48
 800994c:	0800e41c 	.word	0x0800e41c
 8009950:	0800ce64 	.word	0x0800ce64
 8009954:	0800ce78 	.word	0x0800ce78
 8009958:	0800ceb0 	.word	0x0800ceb0
 800995c:	200013a0 	.word	0x200013a0
 8009960:	0800a591 	.word	0x0800a591
 8009964:	0800ced8 	.word	0x0800ced8
 8009968:	0800cf1c 	.word	0x0800cf1c

0800996c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800996c:	b5b0      	push	{r4, r5, r7, lr}
 800996e:	b08e      	sub	sp, #56	; 0x38
 8009970:	af04      	add	r7, sp, #16
 8009972:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009974:	2392      	movs	r3, #146	; 0x92
 8009976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3301      	adds	r3, #1
 800997e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2bff      	cmp	r3, #255	; 0xff
 8009986:	f000 811d 	beq.w	8009bc4 <SVCCTL_App_Notification+0x258>
 800998a:	2bff      	cmp	r3, #255	; 0xff
 800998c:	f300 826b 	bgt.w	8009e66 <SVCCTL_App_Notification+0x4fa>
 8009990:	2b05      	cmp	r3, #5
 8009992:	d002      	beq.n	800999a <SVCCTL_App_Notification+0x2e>
 8009994:	2b3e      	cmp	r3, #62	; 0x3e
 8009996:	d042      	beq.n	8009a1e <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009998:	e265      	b.n	8009e66 <SVCCTL_App_Notification+0x4fa>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	3302      	adds	r3, #2
 800999e:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	4bb1      	ldr	r3, [pc, #708]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 80099aa:	8adb      	ldrh	r3, [r3, #22]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d128      	bne.n	8009a02 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80099b0:	4baf      	ldr	r3, [pc, #700]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80099b6:	4bae      	ldr	r3, [pc, #696]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80099be:	48ad      	ldr	r0, [pc, #692]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 80099c0:	f7ff f942 	bl	8008c48 <DbgTraceGetFileName>
 80099c4:	4601      	mov	r1, r0
 80099c6:	f240 13b9 	movw	r3, #441	; 0x1b9
 80099ca:	4aab      	ldr	r2, [pc, #684]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 80099cc:	48ab      	ldr	r0, [pc, #684]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 80099ce:	f002 f91b 	bl	800bc08 <iprintf>
 80099d2:	48ab      	ldr	r0, [pc, #684]	; (8009c80 <SVCCTL_App_Notification+0x314>)
 80099d4:	f002 f986 	bl	800bce4 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 80099d8:	48a6      	ldr	r0, [pc, #664]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 80099da:	f7ff f935 	bl	8008c48 <DbgTraceGetFileName>
 80099de:	4601      	mov	r1, r0
 80099e0:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80099e4:	4aa4      	ldr	r2, [pc, #656]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 80099e6:	48a5      	ldr	r0, [pc, #660]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 80099e8:	f002 f90e 	bl	800bc08 <iprintf>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	4619      	mov	r1, r3
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	78db      	ldrb	r3, [r3, #3]
 80099fa:	461a      	mov	r2, r3
 80099fc:	48a1      	ldr	r0, [pc, #644]	; (8009c84 <SVCCTL_App_Notification+0x318>)
 80099fe:	f002 f903 	bl	800bc08 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8009a02:	2001      	movs	r0, #1
 8009a04:	f000 fd02 	bl	800a40c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8009a08:	4b9f      	ldr	r3, [pc, #636]	; (8009c88 <SVCCTL_App_Notification+0x31c>)
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009a0e:	4b98      	ldr	r3, [pc, #608]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 8009a10:	8ada      	ldrh	r2, [r3, #22]
 8009a12:	4b9d      	ldr	r3, [pc, #628]	; (8009c88 <SVCCTL_App_Notification+0x31c>)
 8009a14:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8009a16:	489c      	ldr	r0, [pc, #624]	; (8009c88 <SVCCTL_App_Notification+0x31c>)
 8009a18:	f000 ff1e 	bl	800a858 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009a1c:	e226      	b.n	8009e6c <SVCCTL_App_Notification+0x500>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	3302      	adds	r3, #2
 8009a22:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d042      	beq.n	8009ab2 <SVCCTL_App_Notification+0x146>
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	f040 80c7 	bne.w	8009bc0 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	3301      	adds	r3, #1
 8009a36:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8009a38:	488e      	ldr	r0, [pc, #568]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 8009a3a:	f7ff f905 	bl	8008c48 <DbgTraceGetFileName>
 8009a3e:	4601      	mov	r1, r0
 8009a40:	f240 13e1 	movw	r3, #481	; 0x1e1
 8009a44:	4a8c      	ldr	r2, [pc, #560]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 8009a46:	488d      	ldr	r0, [pc, #564]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 8009a48:	f002 f8de 	bl	800bc08 <iprintf>
 8009a4c:	488f      	ldr	r0, [pc, #572]	; (8009c8c <SVCCTL_App_Notification+0x320>)
 8009a4e:	f002 f949 	bl	800bce4 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009a52:	4888      	ldr	r0, [pc, #544]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 8009a54:	f7ff f8f8 	bl	8008c48 <DbgTraceGetFileName>
 8009a58:	4601      	mov	r1, r0
 8009a5a:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8009a5e:	4a86      	ldr	r2, [pc, #536]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 8009a60:	4886      	ldr	r0, [pc, #536]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 8009a62:	f002 f8d1 	bl	800bc08 <iprintf>
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f6 fe5a 	bl	8000728 <__aeabi_i2d>
 8009a74:	f04f 0200 	mov.w	r2, #0
 8009a78:	4b85      	ldr	r3, [pc, #532]	; (8009c90 <SVCCTL_App_Notification+0x324>)
 8009a7a:	f7f6 fbd9 	bl	8000230 <__aeabi_dmul>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4610      	mov	r0, r2
 8009a84:	4619      	mov	r1, r3
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461c      	mov	r4, r3
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	9400      	str	r4, [sp, #0]
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	487a      	ldr	r0, [pc, #488]	; (8009c94 <SVCCTL_App_Notification+0x328>)
 8009aac:	f002 f8ac 	bl	800bc08 <iprintf>
          break;
 8009ab0:	e087      	b.n	8009bc2 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8009ab8:	486e      	ldr	r0, [pc, #440]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 8009aba:	f7ff f8c5 	bl	8008c48 <DbgTraceGetFileName>
 8009abe:	4601      	mov	r1, r0
 8009ac0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009ac4:	4a6c      	ldr	r2, [pc, #432]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 8009ac6:	486d      	ldr	r0, [pc, #436]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 8009ac8:	f002 f89e 	bl	800bc08 <iprintf>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4870      	ldr	r0, [pc, #448]	; (8009c98 <SVCCTL_App_Notification+0x32c>)
 8009ad8:	f002 f896 	bl	800bc08 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009adc:	4865      	ldr	r0, [pc, #404]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 8009ade:	f7ff f8b3 	bl	8008c48 <DbgTraceGetFileName>
 8009ae2:	4601      	mov	r1, r0
 8009ae4:	f240 13f5 	movw	r3, #501	; 0x1f5
 8009ae8:	4a63      	ldr	r2, [pc, #396]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 8009aea:	4864      	ldr	r0, [pc, #400]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 8009aec:	f002 f88c 	bl	800bc08 <iprintf>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	7a9b      	ldrb	r3, [r3, #10]
 8009af4:	4618      	mov	r0, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	7a5b      	ldrb	r3, [r3, #9]
 8009afa:	461c      	mov	r4, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	7a1b      	ldrb	r3, [r3, #8]
 8009b00:	461d      	mov	r5, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	79db      	ldrb	r3, [r3, #7]
 8009b06:	461a      	mov	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	799b      	ldrb	r3, [r3, #6]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	795b      	ldrb	r3, [r3, #5]
 8009b12:	9302      	str	r3, [sp, #8]
 8009b14:	9101      	str	r1, [sp, #4]
 8009b16:	9200      	str	r2, [sp, #0]
 8009b18:	462b      	mov	r3, r5
 8009b1a:	4622      	mov	r2, r4
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	485f      	ldr	r0, [pc, #380]	; (8009c9c <SVCCTL_App_Notification+0x330>)
 8009b20:	f002 f872 	bl	800bc08 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n- Connection latency:    %d\n- Supervision Timeout: %d ms\n\r",
 8009b24:	4853      	ldr	r0, [pc, #332]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 8009b26:	f7ff f88f 	bl	8008c48 <DbgTraceGetFileName>
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8009b30:	4a51      	ldr	r2, [pc, #324]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 8009b32:	4852      	ldr	r0, [pc, #328]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 8009b34:	f002 f868 	bl	800bc08 <iprintf>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7f6 fdf1 	bl	8000728 <__aeabi_i2d>
 8009b46:	f04f 0200 	mov.w	r2, #0
 8009b4a:	4b51      	ldr	r3, [pc, #324]	; (8009c90 <SVCCTL_App_Notification+0x324>)
 8009b4c:	f7f6 fb70 	bl	8000230 <__aeabi_dmul>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4610      	mov	r0, r2
 8009b56:	4619      	mov	r1, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	461c      	mov	r4, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	9400      	str	r4, [sp, #0]
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4848      	ldr	r0, [pc, #288]	; (8009ca0 <SVCCTL_App_Notification+0x334>)
 8009b7e:	f002 f843 	bl	800bc08 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009b82:	4b3b      	ldr	r3, [pc, #236]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 8009b84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d104      	bne.n	8009b96 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009b8c:	4b38      	ldr	r3, [pc, #224]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 8009b8e:	2206      	movs	r2, #6
 8009b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009b94:	e003      	b.n	8009b9e <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009b96:	4b36      	ldr	r3, [pc, #216]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 8009b98:	2205      	movs	r2, #5
 8009b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	4b32      	ldr	r3, [pc, #200]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 8009ba8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009baa:	4b37      	ldr	r3, [pc, #220]	; (8009c88 <SVCCTL_App_Notification+0x31c>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009bb0:	4b2f      	ldr	r3, [pc, #188]	; (8009c70 <SVCCTL_App_Notification+0x304>)
 8009bb2:	8ada      	ldrh	r2, [r3, #22]
 8009bb4:	4b34      	ldr	r3, [pc, #208]	; (8009c88 <SVCCTL_App_Notification+0x31c>)
 8009bb6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009bb8:	4833      	ldr	r0, [pc, #204]	; (8009c88 <SVCCTL_App_Notification+0x31c>)
 8009bba:	f000 fe4d 	bl	800a858 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009bbe:	e000      	b.n	8009bc2 <SVCCTL_App_Notification+0x256>
          break;
 8009bc0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8009bc2:	e153      	b.n	8009e6c <SVCCTL_App_Notification+0x500>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	3302      	adds	r3, #2
 8009bc8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bd4:	f000 8143 	beq.w	8009e5e <SVCCTL_App_Notification+0x4f2>
 8009bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bdc:	f300 8145 	bgt.w	8009e6a <SVCCTL_App_Notification+0x4fe>
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	f000 813e 	beq.w	8009e62 <SVCCTL_App_Notification+0x4f6>
 8009be6:	2b04      	cmp	r3, #4
 8009be8:	f2c0 813f 	blt.w	8009e6a <SVCCTL_App_Notification+0x4fe>
 8009bec:	f240 420a 	movw	r2, #1034	; 0x40a
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	f300 813a 	bgt.w	8009e6a <SVCCTL_App_Notification+0x4fe>
 8009bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bfa:	f340 8136 	ble.w	8009e6a <SVCCTL_App_Notification+0x4fe>
 8009bfe:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8009c02:	2b09      	cmp	r3, #9
 8009c04:	f200 8131 	bhi.w	8009e6a <SVCCTL_App_Notification+0x4fe>
 8009c08:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <SVCCTL_App_Notification+0x2a4>)
 8009c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009dd9 	.word	0x08009dd9
 8009c14:	08009cad 	.word	0x08009cad
 8009c18:	08009e6b 	.word	0x08009e6b
 8009c1c:	08009e6b 	.word	0x08009e6b
 8009c20:	08009e6b 	.word	0x08009e6b
 8009c24:	08009e6b 	.word	0x08009e6b
 8009c28:	08009c39 	.word	0x08009c39
 8009c2c:	08009e6b 	.word	0x08009e6b
 8009c30:	08009d1f 	.word	0x08009d1f
 8009c34:	08009c55 	.word	0x08009c55
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8009c38:	480e      	ldr	r0, [pc, #56]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 8009c3a:	f7ff f805 	bl	8008c48 <DbgTraceGetFileName>
 8009c3e:	4601      	mov	r1, r0
 8009c40:	f240 233e 	movw	r3, #574	; 0x23e
 8009c44:	4a0c      	ldr	r2, [pc, #48]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 8009c46:	480d      	ldr	r0, [pc, #52]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 8009c48:	f001 ffde 	bl	800bc08 <iprintf>
 8009c4c:	4815      	ldr	r0, [pc, #84]	; (8009ca4 <SVCCTL_App_Notification+0x338>)
 8009c4e:	f001 ffdb 	bl	800bc08 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009c52:	e107      	b.n	8009e64 <SVCCTL_App_Notification+0x4f8>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8009c54:	4807      	ldr	r0, [pc, #28]	; (8009c74 <SVCCTL_App_Notification+0x308>)
 8009c56:	f7fe fff7 	bl	8008c48 <DbgTraceGetFileName>
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	f240 234e 	movw	r3, #590	; 0x24e
 8009c60:	4a05      	ldr	r2, [pc, #20]	; (8009c78 <SVCCTL_App_Notification+0x30c>)
 8009c62:	4806      	ldr	r0, [pc, #24]	; (8009c7c <SVCCTL_App_Notification+0x310>)
 8009c64:	f001 ffd0 	bl	800bc08 <iprintf>
 8009c68:	480f      	ldr	r0, [pc, #60]	; (8009ca8 <SVCCTL_App_Notification+0x33c>)
 8009c6a:	f002 f83b 	bl	800bce4 <puts>
          break;
 8009c6e:	e0f9      	b.n	8009e64 <SVCCTL_App_Notification+0x4f8>
 8009c70:	200013a0 	.word	0x200013a0
 8009c74:	0800ce48 	.word	0x0800ce48
 8009c78:	0800e42c 	.word	0x0800e42c
 8009c7c:	0800ce64 	.word	0x0800ce64
 8009c80:	0800cf90 	.word	0x0800cf90
 8009c84:	0800cfbc 	.word	0x0800cfbc
 8009c88:	20001424 	.word	0x20001424
 8009c8c:	0800cff8 	.word	0x0800cff8
 8009c90:	3ff40000 	.word	0x3ff40000
 8009c94:	0800d02c 	.word	0x0800d02c
 8009c98:	0800d098 	.word	0x0800d098
 8009c9c:	0800d0e0 	.word	0x0800d0e0
 8009ca0:	0800d130 	.word	0x0800d130
 8009ca4:	0800d194 	.word	0x0800d194
 8009ca8:	0800d1bc 	.word	0x0800d1bc
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8009cac:	4872      	ldr	r0, [pc, #456]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009cae:	f7fe ffcb 	bl	8008c48 <DbgTraceGetFileName>
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	f240 2355 	movw	r3, #597	; 0x255
 8009cb8:	4a70      	ldr	r2, [pc, #448]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009cba:	4871      	ldr	r0, [pc, #452]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009cbc:	f001 ffa4 	bl	800bc08 <iprintf>
 8009cc0:	4870      	ldr	r0, [pc, #448]	; (8009e84 <SVCCTL_App_Notification+0x518>)
 8009cc2:	f002 f80f 	bl	800bce4 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009cc6:	4b70      	ldr	r3, [pc, #448]	; (8009e88 <SVCCTL_App_Notification+0x51c>)
 8009cc8:	8adb      	ldrh	r3, [r3, #22]
 8009cca:	4970      	ldr	r1, [pc, #448]	; (8009e8c <SVCCTL_App_Notification+0x520>)
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fd f9d1 	bl	8007074 <aci_gap_pass_key_resp>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8009cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d010      	beq.n	8009d02 <SVCCTL_App_Notification+0x396>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8009ce0:	4865      	ldr	r0, [pc, #404]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009ce2:	f7fe ffb1 	bl	8008c48 <DbgTraceGetFileName>
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	f240 235a 	movw	r3, #602	; 0x25a
 8009cec:	4a63      	ldr	r2, [pc, #396]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009cee:	4864      	ldr	r0, [pc, #400]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009cf0:	f001 ff8a 	bl	800bc08 <iprintf>
 8009cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4865      	ldr	r0, [pc, #404]	; (8009e90 <SVCCTL_App_Notification+0x524>)
 8009cfc:	f001 ff84 	bl	800bc08 <iprintf>
          break;
 8009d00:	e0b0      	b.n	8009e64 <SVCCTL_App_Notification+0x4f8>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8009d02:	485d      	ldr	r0, [pc, #372]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009d04:	f7fe ffa0 	bl	8008c48 <DbgTraceGetFileName>
 8009d08:	4601      	mov	r1, r0
 8009d0a:	f240 235e 	movw	r3, #606	; 0x25e
 8009d0e:	4a5b      	ldr	r2, [pc, #364]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009d10:	485b      	ldr	r0, [pc, #364]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009d12:	f001 ff79 	bl	800bc08 <iprintf>
 8009d16:	485f      	ldr	r0, [pc, #380]	; (8009e94 <SVCCTL_App_Notification+0x528>)
 8009d18:	f001 ffe4 	bl	800bce4 <puts>
          break;
 8009d1c:	e0a2      	b.n	8009e64 <SVCCTL_App_Notification+0x4f8>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8009d1e:	4856      	ldr	r0, [pc, #344]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009d20:	f7fe ff92 	bl	8008c48 <DbgTraceGetFileName>
 8009d24:	4601      	mov	r1, r0
 8009d26:	f240 2366 	movw	r3, #614	; 0x266
 8009d2a:	4a54      	ldr	r2, [pc, #336]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009d2c:	4854      	ldr	r0, [pc, #336]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009d2e:	f001 ff6b 	bl	800bc08 <iprintf>
 8009d32:	4859      	ldr	r0, [pc, #356]	; (8009e98 <SVCCTL_App_Notification+0x52c>)
 8009d34:	f001 ffd6 	bl	800bce4 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8009d38:	484f      	ldr	r0, [pc, #316]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009d3a:	f7fe ff85 	bl	8008c48 <DbgTraceGetFileName>
 8009d3e:	4601      	mov	r1, r0
 8009d40:	f240 2367 	movw	r3, #615	; 0x267
 8009d44:	4a4d      	ldr	r2, [pc, #308]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009d46:	484e      	ldr	r0, [pc, #312]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009d48:	f001 ff5e 	bl	800bc08 <iprintf>
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	3302      	adds	r3, #2
 8009d50:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009d54:	4619      	mov	r1, r3
 8009d56:	4851      	ldr	r0, [pc, #324]	; (8009e9c <SVCCTL_App_Notification+0x530>)
 8009d58:	f001 ff56 	bl	800bc08 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8009d5c:	4846      	ldr	r0, [pc, #280]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009d5e:	f7fe ff73 	bl	8008c48 <DbgTraceGetFileName>
 8009d62:	4601      	mov	r1, r0
 8009d64:	f240 2369 	movw	r3, #617	; 0x269
 8009d68:	4a44      	ldr	r2, [pc, #272]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009d6a:	4845      	ldr	r0, [pc, #276]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009d6c:	f001 ff4c 	bl	800bc08 <iprintf>
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	3302      	adds	r3, #2
 8009d74:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4849      	ldr	r0, [pc, #292]	; (8009ea0 <SVCCTL_App_Notification+0x534>)
 8009d7c:	f001 ff44 	bl	800bc08 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009d80:	4b41      	ldr	r3, [pc, #260]	; (8009e88 <SVCCTL_App_Notification+0x51c>)
 8009d82:	8adb      	ldrh	r3, [r3, #22]
 8009d84:	2101      	movs	r1, #1
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fd fb1e 	bl	80073c8 <aci_gap_numeric_comparison_value_confirm_yesno>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8009d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d010      	beq.n	8009dbc <SVCCTL_App_Notification+0x450>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8009d9a:	4837      	ldr	r0, [pc, #220]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009d9c:	f7fe ff54 	bl	8008c48 <DbgTraceGetFileName>
 8009da0:	4601      	mov	r1, r0
 8009da2:	f240 236e 	movw	r3, #622	; 0x26e
 8009da6:	4a35      	ldr	r2, [pc, #212]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009da8:	4835      	ldr	r0, [pc, #212]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009daa:	f001 ff2d 	bl	800bc08 <iprintf>
 8009dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009db2:	4619      	mov	r1, r3
 8009db4:	483b      	ldr	r0, [pc, #236]	; (8009ea4 <SVCCTL_App_Notification+0x538>)
 8009db6:	f001 ff27 	bl	800bc08 <iprintf>
          break;
 8009dba:	e053      	b.n	8009e64 <SVCCTL_App_Notification+0x4f8>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8009dbc:	482e      	ldr	r0, [pc, #184]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009dbe:	f7fe ff43 	bl	8008c48 <DbgTraceGetFileName>
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	f240 2372 	movw	r3, #626	; 0x272
 8009dc8:	4a2c      	ldr	r2, [pc, #176]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009dca:	482d      	ldr	r0, [pc, #180]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009dcc:	f001 ff1c 	bl	800bc08 <iprintf>
 8009dd0:	4835      	ldr	r0, [pc, #212]	; (8009ea8 <SVCCTL_App_Notification+0x53c>)
 8009dd2:	f001 ff87 	bl	800bce4 <puts>
          break;
 8009dd6:	e045      	b.n	8009e64 <SVCCTL_App_Notification+0x4f8>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	3302      	adds	r3, #2
 8009ddc:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8009dde:	4826      	ldr	r0, [pc, #152]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009de0:	f7fe ff32 	bl	8008c48 <DbgTraceGetFileName>
 8009de4:	4601      	mov	r1, r0
 8009de6:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8009dea:	4a24      	ldr	r2, [pc, #144]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009dec:	4824      	ldr	r0, [pc, #144]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009dee:	f001 ff0b 	bl	800bc08 <iprintf>
 8009df2:	482e      	ldr	r0, [pc, #184]	; (8009eac <SVCCTL_App_Notification+0x540>)
 8009df4:	f001 ff76 	bl	800bce4 <puts>
          if (p_pairing_complete->Status != 0)
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	789b      	ldrb	r3, [r3, #2]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d013      	beq.n	8009e28 <SVCCTL_App_Notification+0x4bc>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8009e00:	481d      	ldr	r0, [pc, #116]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009e02:	f7fe ff21 	bl	8008c48 <DbgTraceGetFileName>
 8009e06:	4601      	mov	r1, r0
 8009e08:	f240 237f 	movw	r3, #639	; 0x27f
 8009e0c:	4a1b      	ldr	r2, [pc, #108]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009e0e:	481c      	ldr	r0, [pc, #112]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009e10:	f001 fefa 	bl	800bc08 <iprintf>
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	789b      	ldrb	r3, [r3, #2]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	78db      	ldrb	r3, [r3, #3]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4823      	ldr	r0, [pc, #140]	; (8009eb0 <SVCCTL_App_Notification+0x544>)
 8009e22:	f001 fef1 	bl	800bc08 <iprintf>
 8009e26:	e00c      	b.n	8009e42 <SVCCTL_App_Notification+0x4d6>
            APP_DBG_MSG("     - Pairing Success\n");
 8009e28:	4813      	ldr	r0, [pc, #76]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009e2a:	f7fe ff0d 	bl	8008c48 <DbgTraceGetFileName>
 8009e2e:	4601      	mov	r1, r0
 8009e30:	f240 2383 	movw	r3, #643	; 0x283
 8009e34:	4a11      	ldr	r2, [pc, #68]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009e36:	4812      	ldr	r0, [pc, #72]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009e38:	f001 fee6 	bl	800bc08 <iprintf>
 8009e3c:	481d      	ldr	r0, [pc, #116]	; (8009eb4 <SVCCTL_App_Notification+0x548>)
 8009e3e:	f001 ff51 	bl	800bce4 <puts>
          APP_DBG_MSG("\n");
 8009e42:	480d      	ldr	r0, [pc, #52]	; (8009e78 <SVCCTL_App_Notification+0x50c>)
 8009e44:	f7fe ff00 	bl	8008c48 <DbgTraceGetFileName>
 8009e48:	4601      	mov	r1, r0
 8009e4a:	f240 2385 	movw	r3, #645	; 0x285
 8009e4e:	4a0b      	ldr	r2, [pc, #44]	; (8009e7c <SVCCTL_App_Notification+0x510>)
 8009e50:	480b      	ldr	r0, [pc, #44]	; (8009e80 <SVCCTL_App_Notification+0x514>)
 8009e52:	f001 fed9 	bl	800bc08 <iprintf>
 8009e56:	200a      	movs	r0, #10
 8009e58:	f001 fee8 	bl	800bc2c <putchar>
          break;
 8009e5c:	e002      	b.n	8009e64 <SVCCTL_App_Notification+0x4f8>
          break;
 8009e5e:	bf00      	nop
 8009e60:	e003      	b.n	8009e6a <SVCCTL_App_Notification+0x4fe>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009e62:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009e64:	e001      	b.n	8009e6a <SVCCTL_App_Notification+0x4fe>
      break;
 8009e66:	bf00      	nop
 8009e68:	e000      	b.n	8009e6c <SVCCTL_App_Notification+0x500>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009e6a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009e6c:	2301      	movs	r3, #1
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3728      	adds	r7, #40	; 0x28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bdb0      	pop	{r4, r5, r7, pc}
 8009e76:	bf00      	nop
 8009e78:	0800ce48 	.word	0x0800ce48
 8009e7c:	0800e42c 	.word	0x0800e42c
 8009e80:	0800ce64 	.word	0x0800ce64
 8009e84:	0800d1ec 	.word	0x0800d1ec
 8009e88:	200013a0 	.word	0x200013a0
 8009e8c:	0001b207 	.word	0x0001b207
 8009e90:	0800d214 	.word	0x0800d214
 8009e94:	0800d248 	.word	0x0800d248
 8009e98:	0800d270 	.word	0x0800d270
 8009e9c:	0800d2a4 	.word	0x0800d2a4
 8009ea0:	0800d2c0 	.word	0x0800d2c0
 8009ea4:	0800d2d8 	.word	0x0800d2d8
 8009ea8:	0800d328 	.word	0x0800d328
 8009eac:	0800d370 	.word	0x0800d370
 8009eb0:	0800d39c 	.word	0x0800d39c
 8009eb4:	0800d3d8 	.word	0x0800d3d8

08009eb8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009ebe:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <Ble_Tl_Init+0x20>)
 8009ec0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009ec2:	4b06      	ldr	r3, [pc, #24]	; (8009edc <Ble_Tl_Init+0x24>)
 8009ec4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009ec6:	463b      	mov	r3, r7
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <Ble_Tl_Init+0x28>)
 8009ecc:	f7fe f9a0 	bl	8008210 <hci_init>

  return;
 8009ed0:	bf00      	nop
}
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	200300d8 	.word	0x200300d8
 8009edc:	0800a6b9 	.word	0x0800a6b9
 8009ee0:	0800a681 	.word	0x0800a681

08009ee4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ee6:	b08d      	sub	sp, #52	; 0x34
 8009ee8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8009eea:	2300      	movs	r3, #0
 8009eec:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009eee:	2392      	movs	r3, #146	; 0x92
 8009ef0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8009ef2:	48a3      	ldr	r0, [pc, #652]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009ef4:	f7fe fea8 	bl	8008c48 <DbgTraceGetFileName>
 8009ef8:	4601      	mov	r1, r0
 8009efa:	f240 23c5 	movw	r3, #709	; 0x2c5
 8009efe:	4aa1      	ldr	r2, [pc, #644]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009f00:	48a1      	ldr	r0, [pc, #644]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009f02:	f001 fe81 	bl	800bc08 <iprintf>
 8009f06:	48a1      	ldr	r0, [pc, #644]	; (800a18c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8009f08:	f001 feec 	bl	800bce4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009f0c:	f7fd feaf 	bl	8007c6e <hci_reset>
 8009f10:	4603      	mov	r3, r0
 8009f12:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00f      	beq.n	8009f3a <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8009f1a:	4899      	ldr	r0, [pc, #612]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009f1c:	f7fe fe94 	bl	8008c48 <DbgTraceGetFileName>
 8009f20:	4601      	mov	r1, r0
 8009f22:	f240 23ce 	movw	r3, #718	; 0x2ce
 8009f26:	4a97      	ldr	r2, [pc, #604]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009f28:	4897      	ldr	r0, [pc, #604]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009f2a:	f001 fe6d 	bl	800bc08 <iprintf>
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	4619      	mov	r1, r3
 8009f32:	4897      	ldr	r0, [pc, #604]	; (800a190 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8009f34:	f001 fe68 	bl	800bc08 <iprintf>
 8009f38:	e00c      	b.n	8009f54 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8009f3a:	4891      	ldr	r0, [pc, #580]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009f3c:	f7fe fe84 	bl	8008c48 <DbgTraceGetFileName>
 8009f40:	4601      	mov	r1, r0
 8009f42:	f240 23d2 	movw	r3, #722	; 0x2d2
 8009f46:	4a8f      	ldr	r2, [pc, #572]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009f48:	488f      	ldr	r0, [pc, #572]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009f4a:	f001 fe5d 	bl	800bc08 <iprintf>
 8009f4e:	4891      	ldr	r0, [pc, #580]	; (800a194 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8009f50:	f001 fec8 	bl	800bce4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009f54:	f000 fad8 	bl	800a508 <BleGetBdAddress>
 8009f58:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	2106      	movs	r1, #6
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7fd fd45 	bl	80079ee <aci_hal_write_config_data>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00f      	beq.n	8009f8e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8009f6e:	4884      	ldr	r0, [pc, #528]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009f70:	f7fe fe6a 	bl	8008c48 <DbgTraceGetFileName>
 8009f74:	4601      	mov	r1, r0
 8009f76:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 8009f7a:	4a82      	ldr	r2, [pc, #520]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009f7c:	4882      	ldr	r0, [pc, #520]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009f7e:	f001 fe43 	bl	800bc08 <iprintf>
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	4619      	mov	r1, r3
 8009f86:	4884      	ldr	r0, [pc, #528]	; (800a198 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8009f88:	f001 fe3e 	bl	800bc08 <iprintf>
 8009f8c:	e035      	b.n	8009ffa <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8009f8e:	487c      	ldr	r0, [pc, #496]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009f90:	f7fe fe5a 	bl	8008c48 <DbgTraceGetFileName>
 8009f94:	4601      	mov	r1, r0
 8009f96:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8009f9a:	4a7a      	ldr	r2, [pc, #488]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009f9c:	487a      	ldr	r0, [pc, #488]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009f9e:	f001 fe33 	bl	800bc08 <iprintf>
 8009fa2:	487e      	ldr	r0, [pc, #504]	; (800a19c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8009fa4:	f001 fe9e 	bl	800bce4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8009fa8:	4875      	ldr	r0, [pc, #468]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009faa:	f7fe fe4d 	bl	8008c48 <DbgTraceGetFileName>
 8009fae:	4601      	mov	r1, r0
 8009fb0:	f240 23e1 	movw	r3, #737	; 0x2e1
 8009fb4:	4a73      	ldr	r2, [pc, #460]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009fb6:	4874      	ldr	r0, [pc, #464]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009fb8:	f001 fe26 	bl	800bc08 <iprintf>
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	3305      	adds	r3, #5
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	461c      	mov	r4, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	3303      	adds	r3, #3
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	461d      	mov	r5, r3
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	3302      	adds	r3, #2
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	9302      	str	r3, [sp, #8]
 8009fea:	9101      	str	r1, [sp, #4]
 8009fec:	9200      	str	r2, [sp, #0]
 8009fee:	462b      	mov	r3, r5
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4601      	mov	r1, r0
 8009ff4:	486a      	ldr	r0, [pc, #424]	; (800a1a0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8009ff6:	f001 fe07 	bl	800bc08 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8009ffa:	4a6a      	ldr	r2, [pc, #424]	; (800a1a4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8009ffc:	2110      	movs	r1, #16
 8009ffe:	2018      	movs	r0, #24
 800a000:	f7fd fcf5 	bl	80079ee <aci_hal_write_config_data>
 800a004:	4603      	mov	r3, r0
 800a006:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00f      	beq.n	800a02e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800a00e:	485c      	ldr	r0, [pc, #368]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a010:	f7fe fe1a 	bl	8008c48 <DbgTraceGetFileName>
 800a014:	4601      	mov	r1, r0
 800a016:	f240 3323 	movw	r3, #803	; 0x323
 800a01a:	4a5a      	ldr	r2, [pc, #360]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a01c:	485a      	ldr	r0, [pc, #360]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a01e:	f001 fdf3 	bl	800bc08 <iprintf>
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	4619      	mov	r1, r3
 800a026:	4860      	ldr	r0, [pc, #384]	; (800a1a8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800a028:	f001 fdee 	bl	800bc08 <iprintf>
 800a02c:	e00c      	b.n	800a048 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800a02e:	4854      	ldr	r0, [pc, #336]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a030:	f7fe fe0a 	bl	8008c48 <DbgTraceGetFileName>
 800a034:	4601      	mov	r1, r0
 800a036:	f240 3327 	movw	r3, #807	; 0x327
 800a03a:	4a52      	ldr	r2, [pc, #328]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a03c:	4852      	ldr	r0, [pc, #328]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a03e:	f001 fde3 	bl	800bc08 <iprintf>
 800a042:	485a      	ldr	r0, [pc, #360]	; (800a1ac <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800a044:	f001 fe4e 	bl	800bce4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800a048:	4a59      	ldr	r2, [pc, #356]	; (800a1b0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800a04a:	2110      	movs	r1, #16
 800a04c:	2008      	movs	r0, #8
 800a04e:	f7fd fcce 	bl	80079ee <aci_hal_write_config_data>
 800a052:	4603      	mov	r3, r0
 800a054:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a056:	7dfb      	ldrb	r3, [r7, #23]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00f      	beq.n	800a07c <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800a05c:	4848      	ldr	r0, [pc, #288]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a05e:	f7fe fdf3 	bl	8008c48 <DbgTraceGetFileName>
 800a062:	4601      	mov	r1, r0
 800a064:	f44f 734c 	mov.w	r3, #816	; 0x330
 800a068:	4a46      	ldr	r2, [pc, #280]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a06a:	4847      	ldr	r0, [pc, #284]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a06c:	f001 fdcc 	bl	800bc08 <iprintf>
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	4619      	mov	r1, r3
 800a074:	484f      	ldr	r0, [pc, #316]	; (800a1b4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800a076:	f001 fdc7 	bl	800bc08 <iprintf>
 800a07a:	e00c      	b.n	800a096 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800a07c:	4840      	ldr	r0, [pc, #256]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a07e:	f7fe fde3 	bl	8008c48 <DbgTraceGetFileName>
 800a082:	4601      	mov	r1, r0
 800a084:	f44f 734d 	mov.w	r3, #820	; 0x334
 800a088:	4a3e      	ldr	r2, [pc, #248]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a08a:	483f      	ldr	r0, [pc, #252]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a08c:	f001 fdbc 	bl	800bc08 <iprintf>
 800a090:	4849      	ldr	r0, [pc, #292]	; (800a1b8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800a092:	f001 fe27 	bl	800bce4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800a096:	2118      	movs	r1, #24
 800a098:	2001      	movs	r0, #1
 800a09a:	f7fd fd2d 	bl	8007af8 <aci_hal_set_tx_power_level>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00f      	beq.n	800a0c8 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800a0a8:	4835      	ldr	r0, [pc, #212]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a0aa:	f7fe fdcd 	bl	8008c48 <DbgTraceGetFileName>
 800a0ae:	4601      	mov	r1, r0
 800a0b0:	f240 333d 	movw	r3, #829	; 0x33d
 800a0b4:	4a33      	ldr	r2, [pc, #204]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a0b6:	4834      	ldr	r0, [pc, #208]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a0b8:	f001 fda6 	bl	800bc08 <iprintf>
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	483e      	ldr	r0, [pc, #248]	; (800a1bc <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800a0c2:	f001 fda1 	bl	800bc08 <iprintf>
 800a0c6:	e00c      	b.n	800a0e2 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800a0c8:	482d      	ldr	r0, [pc, #180]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a0ca:	f7fe fdbd 	bl	8008c48 <DbgTraceGetFileName>
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	f240 3341 	movw	r3, #833	; 0x341
 800a0d4:	4a2b      	ldr	r2, [pc, #172]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a0d6:	482c      	ldr	r0, [pc, #176]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a0d8:	f001 fd96 	bl	800bc08 <iprintf>
 800a0dc:	4838      	ldr	r0, [pc, #224]	; (800a1c0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800a0de:	f001 fe01 	bl	800bce4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800a0e2:	f7fd f9d8 	bl	8007496 <aci_gatt_init>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00f      	beq.n	800a110 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800a0f0:	4823      	ldr	r0, [pc, #140]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a0f2:	f7fe fda9 	bl	8008c48 <DbgTraceGetFileName>
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	f240 334a 	movw	r3, #842	; 0x34a
 800a0fc:	4a21      	ldr	r2, [pc, #132]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a0fe:	4822      	ldr	r0, [pc, #136]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a100:	f001 fd82 	bl	800bc08 <iprintf>
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	4619      	mov	r1, r3
 800a108:	482e      	ldr	r0, [pc, #184]	; (800a1c4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800a10a:	f001 fd7d 	bl	800bc08 <iprintf>
 800a10e:	e00c      	b.n	800a12a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800a110:	481b      	ldr	r0, [pc, #108]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a112:	f7fe fd99 	bl	8008c48 <DbgTraceGetFileName>
 800a116:	4601      	mov	r1, r0
 800a118:	f240 334e 	movw	r3, #846	; 0x34e
 800a11c:	4a19      	ldr	r2, [pc, #100]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a11e:	481a      	ldr	r0, [pc, #104]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a120:	f001 fd72 	bl	800bc08 <iprintf>
 800a124:	4828      	ldr	r0, [pc, #160]	; (800a1c8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800a126:	f001 fddd 	bl	800bce4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	f043 0301 	orr.w	r3, r3, #1
 800a134:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d069      	beq.n	800a210 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800a13c:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800a13e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800a140:	1dba      	adds	r2, r7, #6
 800a142:	7bf8      	ldrb	r0, [r7, #15]
 800a144:	1cbb      	adds	r3, r7, #2
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	1d3b      	adds	r3, r7, #4
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	4613      	mov	r3, r2
 800a14e:	2205      	movs	r2, #5
 800a150:	2100      	movs	r1, #0
 800a152:	f7fc fff6 	bl	8007142 <aci_gap_init>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d039      	beq.n	800a1d4 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800a160:	4807      	ldr	r0, [pc, #28]	; (800a180 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a162:	f7fe fd71 	bl	8008c48 <DbgTraceGetFileName>
 800a166:	4601      	mov	r1, r0
 800a168:	f240 336e 	movw	r3, #878	; 0x36e
 800a16c:	4a05      	ldr	r2, [pc, #20]	; (800a184 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a16e:	4806      	ldr	r0, [pc, #24]	; (800a188 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a170:	f001 fd4a 	bl	800bc08 <iprintf>
 800a174:	7dfb      	ldrb	r3, [r7, #23]
 800a176:	4619      	mov	r1, r3
 800a178:	4815      	ldr	r0, [pc, #84]	; (800a1d0 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800a17a:	f001 fd45 	bl	800bc08 <iprintf>
 800a17e:	e036      	b.n	800a1ee <Ble_Hci_Gap_Gatt_Init+0x30a>
 800a180:	0800ce48 	.word	0x0800ce48
 800a184:	0800e444 	.word	0x0800e444
 800a188:	0800ce64 	.word	0x0800ce64
 800a18c:	0800d3f0 	.word	0x0800d3f0
 800a190:	0800d41c 	.word	0x0800d41c
 800a194:	0800d44c 	.word	0x0800d44c
 800a198:	0800d46c 	.word	0x0800d46c
 800a19c:	0800d4c8 	.word	0x0800d4c8
 800a1a0:	0800d514 	.word	0x0800d514
 800a1a4:	0800e3fc 	.word	0x0800e3fc
 800a1a8:	0800d550 	.word	0x0800d550
 800a1ac:	0800d5a8 	.word	0x0800d5a8
 800a1b0:	0800e40c 	.word	0x0800e40c
 800a1b4:	0800d5f0 	.word	0x0800d5f0
 800a1b8:	0800d648 	.word	0x0800d648
 800a1bc:	0800d690 	.word	0x0800d690
 800a1c0:	0800d6d0 	.word	0x0800d6d0
 800a1c4:	0800d700 	.word	0x0800d700
 800a1c8:	0800d734 	.word	0x0800d734
 800a1cc:	0800d758 	.word	0x0800d758
 800a1d0:	0800d760 	.word	0x0800d760
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800a1d4:	487e      	ldr	r0, [pc, #504]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a1d6:	f7fe fd37 	bl	8008c48 <DbgTraceGetFileName>
 800a1da:	4601      	mov	r1, r0
 800a1dc:	f240 3372 	movw	r3, #882	; 0x372
 800a1e0:	4a7c      	ldr	r2, [pc, #496]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a1e2:	487d      	ldr	r0, [pc, #500]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a1e4:	f001 fd10 	bl	800bc08 <iprintf>
 800a1e8:	487c      	ldr	r0, [pc, #496]	; (800a3dc <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800a1ea:	f001 fd7b 	bl	800bce4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800a1ee:	88fc      	ldrh	r4, [r7, #6]
 800a1f0:	88bd      	ldrh	r5, [r7, #4]
 800a1f2:	68b8      	ldr	r0, [r7, #8]
 800a1f4:	f7f5 ffc4 	bl	8000180 <strlen>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	4613      	mov	r3, r2
 800a202:	2200      	movs	r2, #0
 800a204:	4629      	mov	r1, r5
 800a206:	4620      	mov	r0, r4
 800a208:	f7fd fb48 	bl	800789c <aci_gatt_update_char_value>
 800a20c:	4603      	mov	r3, r0
 800a20e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800a210:	88f8      	ldrh	r0, [r7, #6]
 800a212:	8879      	ldrh	r1, [r7, #2]
 800a214:	463b      	mov	r3, r7
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2302      	movs	r3, #2
 800a21a:	2200      	movs	r2, #0
 800a21c:	f7fd fb3e 	bl	800789c <aci_gatt_update_char_value>
 800a220:	4603      	mov	r3, r0
 800a222:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800a224:	2202      	movs	r2, #2
 800a226:	2102      	movs	r1, #2
 800a228:	2000      	movs	r0, #0
 800a22a:	f7fd fd44 	bl	8007cb6 <hci_le_set_default_phy>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00f      	beq.n	800a258 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800a238:	4865      	ldr	r0, [pc, #404]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a23a:	f7fe fd05 	bl	8008c48 <DbgTraceGetFileName>
 800a23e:	4601      	mov	r1, r0
 800a240:	f44f 7365 	mov.w	r3, #916	; 0x394
 800a244:	4a63      	ldr	r2, [pc, #396]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a246:	4864      	ldr	r0, [pc, #400]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a248:	f001 fcde 	bl	800bc08 <iprintf>
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	4619      	mov	r1, r3
 800a250:	4863      	ldr	r0, [pc, #396]	; (800a3e0 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800a252:	f001 fcd9 	bl	800bc08 <iprintf>
 800a256:	e00c      	b.n	800a272 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800a258:	485d      	ldr	r0, [pc, #372]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a25a:	f7fe fcf5 	bl	8008c48 <DbgTraceGetFileName>
 800a25e:	4601      	mov	r1, r0
 800a260:	f44f 7366 	mov.w	r3, #920	; 0x398
 800a264:	4a5b      	ldr	r2, [pc, #364]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a266:	485c      	ldr	r0, [pc, #368]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a268:	f001 fcce 	bl	800bc08 <iprintf>
 800a26c:	485d      	ldr	r0, [pc, #372]	; (800a3e4 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800a26e:	f001 fd39 	bl	800bce4 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800a272:	4b5d      	ldr	r3, [pc, #372]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a274:	2201      	movs	r2, #1
 800a276:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800a278:	4b5b      	ldr	r3, [pc, #364]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fc fde1 	bl	8006e44 <aci_gap_set_io_capability>
 800a282:	4603      	mov	r3, r0
 800a284:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a286:	7dfb      	ldrb	r3, [r7, #23]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00f      	beq.n	800a2ac <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800a28c:	4850      	ldr	r0, [pc, #320]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a28e:	f7fe fcdb 	bl	8008c48 <DbgTraceGetFileName>
 800a292:	4601      	mov	r1, r0
 800a294:	f240 33a2 	movw	r3, #930	; 0x3a2
 800a298:	4a4e      	ldr	r2, [pc, #312]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a29a:	484f      	ldr	r0, [pc, #316]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a29c:	f001 fcb4 	bl	800bc08 <iprintf>
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	4851      	ldr	r0, [pc, #324]	; (800a3ec <Ble_Hci_Gap_Gatt_Init+0x508>)
 800a2a6:	f001 fcaf 	bl	800bc08 <iprintf>
 800a2aa:	e00c      	b.n	800a2c6 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800a2ac:	4848      	ldr	r0, [pc, #288]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a2ae:	f7fe fccb 	bl	8008c48 <DbgTraceGetFileName>
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	f240 33a6 	movw	r3, #934	; 0x3a6
 800a2b8:	4a46      	ldr	r2, [pc, #280]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a2ba:	4847      	ldr	r0, [pc, #284]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a2bc:	f001 fca4 	bl	800bc08 <iprintf>
 800a2c0:	484b      	ldr	r0, [pc, #300]	; (800a3f0 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800a2c2:	f001 fd0f 	bl	800bce4 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800a2c6:	4b48      	ldr	r3, [pc, #288]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800a2cc:	4b46      	ldr	r3, [pc, #280]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2ce:	2208      	movs	r2, #8
 800a2d0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800a2d2:	4b45      	ldr	r3, [pc, #276]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2d4:	2210      	movs	r2, #16
 800a2d6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800a2d8:	4b43      	ldr	r3, [pc, #268]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800a2de:	4b42      	ldr	r3, [pc, #264]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2e0:	4a44      	ldr	r2, [pc, #272]	; (800a3f4 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800a2e2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800a2e4:	4b40      	ldr	r3, [pc, #256]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800a2ea:	4b3f      	ldr	r3, [pc, #252]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2ec:	789c      	ldrb	r4, [r3, #2]
 800a2ee:	4b3e      	ldr	r3, [pc, #248]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2f0:	785d      	ldrb	r5, [r3, #1]
 800a2f2:	4b3d      	ldr	r3, [pc, #244]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2f4:	791b      	ldrb	r3, [r3, #4]
 800a2f6:	4a3c      	ldr	r2, [pc, #240]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2f8:	7952      	ldrb	r2, [r2, #5]
 800a2fa:	493b      	ldr	r1, [pc, #236]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a2fc:	78c9      	ldrb	r1, [r1, #3]
 800a2fe:	483a      	ldr	r0, [pc, #232]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a300:	6880      	ldr	r0, [r0, #8]
 800a302:	2600      	movs	r6, #0
 800a304:	9604      	str	r6, [sp, #16]
 800a306:	9003      	str	r0, [sp, #12]
 800a308:	9102      	str	r1, [sp, #8]
 800a30a:	9201      	str	r2, [sp, #4]
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	2300      	movs	r3, #0
 800a310:	2201      	movs	r2, #1
 800a312:	4629      	mov	r1, r5
 800a314:	4620      	mov	r0, r4
 800a316:	f7fc fde9 	bl	8006eec <aci_gap_set_authentication_requirement>
 800a31a:	4603      	mov	r3, r0
 800a31c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00f      	beq.n	800a344 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800a324:	482a      	ldr	r0, [pc, #168]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a326:	f7fe fc8f 	bl	8008c48 <DbgTraceGetFileName>
 800a32a:	4601      	mov	r1, r0
 800a32c:	f240 33c1 	movw	r3, #961	; 0x3c1
 800a330:	4a28      	ldr	r2, [pc, #160]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a332:	4829      	ldr	r0, [pc, #164]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a334:	f001 fc68 	bl	800bc08 <iprintf>
 800a338:	7dfb      	ldrb	r3, [r7, #23]
 800a33a:	4619      	mov	r1, r3
 800a33c:	482e      	ldr	r0, [pc, #184]	; (800a3f8 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800a33e:	f001 fc63 	bl	800bc08 <iprintf>
 800a342:	e00c      	b.n	800a35e <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800a344:	4822      	ldr	r0, [pc, #136]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a346:	f7fe fc7f 	bl	8008c48 <DbgTraceGetFileName>
 800a34a:	4601      	mov	r1, r0
 800a34c:	f240 33c5 	movw	r3, #965	; 0x3c5
 800a350:	4a20      	ldr	r2, [pc, #128]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a352:	4821      	ldr	r0, [pc, #132]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a354:	f001 fc58 	bl	800bc08 <iprintf>
 800a358:	4828      	ldr	r0, [pc, #160]	; (800a3fc <Ble_Hci_Gap_Gatt_Init+0x518>)
 800a35a:	f001 fcc3 	bl	800bce4 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800a35e:	4b22      	ldr	r3, [pc, #136]	; (800a3e8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a360:	789b      	ldrb	r3, [r3, #2]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d023      	beq.n	800a3ae <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800a366:	f7fd f80b 	bl	8007380 <aci_gap_configure_filter_accept_list>
 800a36a:	4603      	mov	r3, r0
 800a36c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00f      	beq.n	800a394 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800a374:	4816      	ldr	r0, [pc, #88]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a376:	f7fe fc67 	bl	8008c48 <DbgTraceGetFileName>
 800a37a:	4601      	mov	r1, r0
 800a37c:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 800a380:	4a14      	ldr	r2, [pc, #80]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a382:	4815      	ldr	r0, [pc, #84]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a384:	f001 fc40 	bl	800bc08 <iprintf>
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	4619      	mov	r1, r3
 800a38c:	481c      	ldr	r0, [pc, #112]	; (800a400 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800a38e:	f001 fc3b 	bl	800bc08 <iprintf>
 800a392:	e00c      	b.n	800a3ae <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800a394:	480e      	ldr	r0, [pc, #56]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a396:	f7fe fc57 	bl	8008c48 <DbgTraceGetFileName>
 800a39a:	4601      	mov	r1, r0
 800a39c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800a3a0:	4a0c      	ldr	r2, [pc, #48]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a3a2:	480d      	ldr	r0, [pc, #52]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a3a4:	f001 fc30 	bl	800bc08 <iprintf>
 800a3a8:	4816      	ldr	r0, [pc, #88]	; (800a404 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800a3aa:	f001 fc9b 	bl	800bce4 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800a3ae:	4808      	ldr	r0, [pc, #32]	; (800a3d0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a3b0:	f7fe fc4a 	bl	8008c48 <DbgTraceGetFileName>
 800a3b4:	4601      	mov	r1, r0
 800a3b6:	f240 33d7 	movw	r3, #983	; 0x3d7
 800a3ba:	4a06      	ldr	r2, [pc, #24]	; (800a3d4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a3bc:	4806      	ldr	r0, [pc, #24]	; (800a3d8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a3be:	f001 fc23 	bl	800bc08 <iprintf>
 800a3c2:	4811      	ldr	r0, [pc, #68]	; (800a408 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800a3c4:	f001 fc20 	bl	800bc08 <iprintf>
}
 800a3c8:	bf00      	nop
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d0:	0800ce48 	.word	0x0800ce48
 800a3d4:	0800e444 	.word	0x0800e444
 800a3d8:	0800ce64 	.word	0x0800ce64
 800a3dc:	0800d790 	.word	0x0800d790
 800a3e0:	0800d7b0 	.word	0x0800d7b0
 800a3e4:	0800d7ec 	.word	0x0800d7ec
 800a3e8:	200013a0 	.word	0x200013a0
 800a3ec:	0800d818 	.word	0x0800d818
 800a3f0:	0800d858 	.word	0x0800d858
 800a3f4:	0001b207 	.word	0x0001b207
 800a3f8:	0800d888 	.word	0x0800d888
 800a3fc:	0800d8d4 	.word	0x0800d8d4
 800a400:	0800d910 	.word	0x0800d910
 800a404:	0800d950 	.word	0x0800d950
 800a408:	0800d980 	.word	0x0800d980

0800a40c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08c      	sub	sp, #48	; 0x30
 800a410:	af08      	add	r7, sp, #32
 800a412:	4603      	mov	r3, r0
 800a414:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a416:	2392      	movs	r3, #146	; 0x92
 800a418:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800a41a:	4a32      	ldr	r2, [pc, #200]	; (800a4e4 <Adv_Request+0xd8>)
 800a41c:	79fb      	ldrb	r3, [r7, #7]
 800a41e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800a422:	2300      	movs	r3, #0
 800a424:	9306      	str	r3, [sp, #24]
 800a426:	2300      	movs	r3, #0
 800a428:	9305      	str	r3, [sp, #20]
 800a42a:	2300      	movs	r3, #0
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	2300      	movs	r3, #0
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	2300      	movs	r3, #0
 800a434:	9302      	str	r3, [sp, #8]
 800a436:	2300      	movs	r3, #0
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	2300      	movs	r3, #0
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	2300      	movs	r3, #0
 800a440:	22a0      	movs	r2, #160	; 0xa0
 800a442:	2180      	movs	r1, #128	; 0x80
 800a444:	2000      	movs	r0, #0
 800a446:	f7fc fc03 	bl	8006c50 <aci_gap_set_discoverable>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00f      	beq.n	800a474 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800a454:	4824      	ldr	r0, [pc, #144]	; (800a4e8 <Adv_Request+0xdc>)
 800a456:	f7fe fbf7 	bl	8008c48 <DbgTraceGetFileName>
 800a45a:	4601      	mov	r1, r0
 800a45c:	f240 33ed 	movw	r3, #1005	; 0x3ed
 800a460:	4a22      	ldr	r2, [pc, #136]	; (800a4ec <Adv_Request+0xe0>)
 800a462:	4823      	ldr	r0, [pc, #140]	; (800a4f0 <Adv_Request+0xe4>)
 800a464:	f001 fbd0 	bl	800bc08 <iprintf>
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	4619      	mov	r1, r3
 800a46c:	4821      	ldr	r0, [pc, #132]	; (800a4f4 <Adv_Request+0xe8>)
 800a46e:	f001 fbcb 	bl	800bc08 <iprintf>
 800a472:	e00c      	b.n	800a48e <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800a474:	481c      	ldr	r0, [pc, #112]	; (800a4e8 <Adv_Request+0xdc>)
 800a476:	f7fe fbe7 	bl	8008c48 <DbgTraceGetFileName>
 800a47a:	4601      	mov	r1, r0
 800a47c:	f240 33f1 	movw	r3, #1009	; 0x3f1
 800a480:	4a1a      	ldr	r2, [pc, #104]	; (800a4ec <Adv_Request+0xe0>)
 800a482:	481b      	ldr	r0, [pc, #108]	; (800a4f0 <Adv_Request+0xe4>)
 800a484:	f001 fbc0 	bl	800bc08 <iprintf>
 800a488:	481b      	ldr	r0, [pc, #108]	; (800a4f8 <Adv_Request+0xec>)
 800a48a:	f001 fc2b 	bl	800bce4 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800a48e:	491b      	ldr	r1, [pc, #108]	; (800a4fc <Adv_Request+0xf0>)
 800a490:	2013      	movs	r0, #19
 800a492:	f7fc ff03 	bl	800729c <aci_gap_update_adv_data>
 800a496:	4603      	mov	r3, r0
 800a498:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00f      	beq.n	800a4c0 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800a4a0:	4811      	ldr	r0, [pc, #68]	; (800a4e8 <Adv_Request+0xdc>)
 800a4a2:	f7fe fbd1 	bl	8008c48 <DbgTraceGetFileName>
 800a4a6:	4601      	mov	r1, r0
 800a4a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800a4ac:	4a0f      	ldr	r2, [pc, #60]	; (800a4ec <Adv_Request+0xe0>)
 800a4ae:	4810      	ldr	r0, [pc, #64]	; (800a4f0 <Adv_Request+0xe4>)
 800a4b0:	f001 fbaa 	bl	800bc08 <iprintf>
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4811      	ldr	r0, [pc, #68]	; (800a500 <Adv_Request+0xf4>)
 800a4ba:	f001 fba5 	bl	800bc08 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800a4be:	e00d      	b.n	800a4dc <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800a4c0:	4809      	ldr	r0, [pc, #36]	; (800a4e8 <Adv_Request+0xdc>)
 800a4c2:	f7fe fbc1 	bl	8008c48 <DbgTraceGetFileName>
 800a4c6:	4601      	mov	r1, r0
 800a4c8:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800a4cc:	4a07      	ldr	r2, [pc, #28]	; (800a4ec <Adv_Request+0xe0>)
 800a4ce:	4808      	ldr	r0, [pc, #32]	; (800a4f0 <Adv_Request+0xe4>)
 800a4d0:	f001 fb9a 	bl	800bc08 <iprintf>
 800a4d4:	480b      	ldr	r0, [pc, #44]	; (800a504 <Adv_Request+0xf8>)
 800a4d6:	f001 fb97 	bl	800bc08 <iprintf>
  return;
 800a4da:	bf00      	nop
}
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	200013a0 	.word	0x200013a0
 800a4e8:	0800ce48 	.word	0x0800ce48
 800a4ec:	0800e45c 	.word	0x0800e45c
 800a4f0:	0800ce64 	.word	0x0800ce64
 800a4f4:	0800d9ac 	.word	0x0800d9ac
 800a4f8:	0800d9e4 	.word	0x0800d9e4
 800a4fc:	20000020 	.word	0x20000020
 800a500:	0800da0c 	.word	0x0800da0c
 800a504:	0800da40 	.word	0x0800da40

0800a508 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800a50e:	f7ff f961 	bl	80097d4 <LL_FLASH_GetUDN>
 800a512:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51a:	d023      	beq.n	800a564 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800a51c:	f7ff f972 	bl	8009804 <LL_FLASH_GetSTCompanyID>
 800a520:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800a522:	f7ff f963 	bl	80097ec <LL_FLASH_GetDeviceID>
 800a526:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	4b16      	ldr	r3, [pc, #88]	; (800a588 <BleGetBdAddress+0x80>)
 800a52e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	b2da      	uxtb	r2, r3
 800a536:	4b14      	ldr	r3, [pc, #80]	; (800a588 <BleGetBdAddress+0x80>)
 800a538:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	4b12      	ldr	r3, [pc, #72]	; (800a588 <BleGetBdAddress+0x80>)
 800a540:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	b2da      	uxtb	r2, r3
 800a546:	4b10      	ldr	r3, [pc, #64]	; (800a588 <BleGetBdAddress+0x80>)
 800a548:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	0a1b      	lsrs	r3, r3, #8
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	4b0d      	ldr	r3, [pc, #52]	; (800a588 <BleGetBdAddress+0x80>)
 800a552:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	0c1b      	lsrs	r3, r3, #16
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	4b0b      	ldr	r3, [pc, #44]	; (800a588 <BleGetBdAddress+0x80>)
 800a55c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800a55e:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <BleGetBdAddress+0x80>)
 800a560:	617b      	str	r3, [r7, #20]
 800a562:	e00b      	b.n	800a57c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800a564:	2000      	movs	r0, #0
 800a566:	f7fe fc4d 	bl	8008e04 <OTP_Read>
 800a56a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d002      	beq.n	800a578 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	e001      	b.n	800a57c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <BleGetBdAddress+0x84>)
 800a57a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800a57c:	697b      	ldr	r3, [r7, #20]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3718      	adds	r7, #24
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20001398 	.word	0x20001398
 800a58c:	0800e3f4 	.word	0x0800e3f4

0800a590 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800a596:	4b1f      	ldr	r3, [pc, #124]	; (800a614 <Adv_Cancel+0x84>)
 800a598:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	d035      	beq.n	800a60c <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a5a0:	2392      	movs	r3, #146	; 0x92
 800a5a2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800a5a4:	f7fc fb30 	bl	8006c08 <aci_gap_set_non_discoverable>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a5ac:	4b19      	ldr	r3, [pc, #100]	; (800a614 <Adv_Cancel+0x84>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00d      	beq.n	800a5d6 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800a5ba:	4817      	ldr	r0, [pc, #92]	; (800a618 <Adv_Cancel+0x88>)
 800a5bc:	f7fe fb44 	bl	8008c48 <DbgTraceGetFileName>
 800a5c0:	4601      	mov	r1, r0
 800a5c2:	f240 434a 	movw	r3, #1098	; 0x44a
 800a5c6:	4a15      	ldr	r2, [pc, #84]	; (800a61c <Adv_Cancel+0x8c>)
 800a5c8:	4815      	ldr	r0, [pc, #84]	; (800a620 <Adv_Cancel+0x90>)
 800a5ca:	f001 fb1d 	bl	800bc08 <iprintf>
 800a5ce:	4815      	ldr	r0, [pc, #84]	; (800a624 <Adv_Cancel+0x94>)
 800a5d0:	f001 fb1a 	bl	800bc08 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800a5d4:	e01a      	b.n	800a60c <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800a5d6:	4810      	ldr	r0, [pc, #64]	; (800a618 <Adv_Cancel+0x88>)
 800a5d8:	f7fe fb36 	bl	8008c48 <DbgTraceGetFileName>
 800a5dc:	4601      	mov	r1, r0
 800a5de:	f240 434e 	movw	r3, #1102	; 0x44e
 800a5e2:	4a0e      	ldr	r2, [pc, #56]	; (800a61c <Adv_Cancel+0x8c>)
 800a5e4:	480e      	ldr	r0, [pc, #56]	; (800a620 <Adv_Cancel+0x90>)
 800a5e6:	f001 fb0f 	bl	800bc08 <iprintf>
 800a5ea:	480f      	ldr	r0, [pc, #60]	; (800a628 <Adv_Cancel+0x98>)
 800a5ec:	f001 fb0c 	bl	800bc08 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800a5f0:	4809      	ldr	r0, [pc, #36]	; (800a618 <Adv_Cancel+0x88>)
 800a5f2:	f7fe fb29 	bl	8008c48 <DbgTraceGetFileName>
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	f240 434f 	movw	r3, #1103	; 0x44f
 800a5fc:	4a07      	ldr	r2, [pc, #28]	; (800a61c <Adv_Cancel+0x8c>)
 800a5fe:	4808      	ldr	r0, [pc, #32]	; (800a620 <Adv_Cancel+0x90>)
 800a600:	f001 fb02 	bl	800bc08 <iprintf>
 800a604:	4809      	ldr	r0, [pc, #36]	; (800a62c <Adv_Cancel+0x9c>)
 800a606:	f001 faff 	bl	800bc08 <iprintf>
  return;
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
}
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	200013a0 	.word	0x200013a0
 800a618:	0800ce48 	.word	0x0800ce48
 800a61c:	0800e468 	.word	0x0800e468
 800a620:	0800ce64 	.word	0x0800ce64
 800a624:	0800da68 	.word	0x0800da68
 800a628:	0800da8c 	.word	0x0800da8c
 800a62c:	0800da94 	.word	0x0800da94

0800a630 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
 P2PS_APP_SW1_Button_Action();
 800a634:	f000 f94c 	bl	800a8d0 <P2PS_APP_SW1_Button_Action>
	// APP_DBG_MSG("Button pressed inside appblekeybuttonaction \r\n\r");
//   HAL_GPIO_TogglePin (Blue_LED_GPIO_Port, Blue_LED_Pin);
}
 800a638:	bf00      	nop
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a644:	2100      	movs	r1, #0
 800a646:	2002      	movs	r0, #2
 800a648:	f001 f8fc 	bl	800b844 <UTIL_SEQ_SetTask>

  return;
 800a64c:	bf00      	nop
}
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a65c:	2001      	movs	r0, #1
 800a65e:	f001 f95d 	bl	800b91c <UTIL_SEQ_SetEvt>

  return;
 800a662:	bf00      	nop
}
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a672:	2001      	movs	r0, #1
 800a674:	f001 f972 	bl	800b95c <UTIL_SEQ_WaitEvt>

  return;
 800a678:	bf00      	nop
}
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	3308      	adds	r3, #8
 800a692:	4618      	mov	r0, r3
 800a694:	f7fd fc76 	bl	8007f84 <SVCCTL_UserEvtRx>
 800a698:	4603      	mov	r3, r0
 800a69a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800a69c:	7afb      	ldrb	r3, [r7, #11]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800a6a8:	e003      	b.n	800a6b2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	701a      	strb	r2, [r3, #0]
  return;
 800a6b0:	bf00      	nop
}
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d002      	beq.n	800a6ce <BLE_StatusNot+0x16>
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d006      	beq.n	800a6da <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800a6cc:	e00b      	b.n	800a6e6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a6ce:	2307      	movs	r3, #7
 800a6d0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f001 f8e2 	bl	800b89c <UTIL_SEQ_PauseTask>
      break;
 800a6d8:	e005      	b.n	800a6e6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a6da:	2307      	movs	r3, #7
 800a6dc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f001 f8fc 	bl	800b8dc <UTIL_SEQ_ResumeTask>
      break;
 800a6e4:	bf00      	nop
  }

  return;
 800a6e6:	bf00      	nop
}
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b07      	cmp	r3, #7
 800a6fe:	f200 808d 	bhi.w	800a81c <Custom_STM_App_Notification+0x12c>
 800a702:	a201      	add	r2, pc, #4	; (adr r2, 800a708 <Custom_STM_App_Notification+0x18>)
 800a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a708:	0800a81d 	.word	0x0800a81d
 800a70c:	0800a729 	.word	0x0800a729
 800a710:	0800a7dd 	.word	0x0800a7dd
 800a714:	0800a7fd 	.word	0x0800a7fd
 800a718:	0800a81d 	.word	0x0800a81d
 800a71c:	0800a81d 	.word	0x0800a81d
 800a720:	0800a81d 	.word	0x0800a81d
 800a724:	0800a81d 	.word	0x0800a81d
      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT \n");
 800a728:	4840      	ldr	r0, [pc, #256]	; (800a82c <Custom_STM_App_Notification+0x13c>)
 800a72a:	f7fe fa8d 	bl	8008c48 <DbgTraceGetFileName>
 800a72e:	4601      	mov	r1, r0
 800a730:	2372      	movs	r3, #114	; 0x72
 800a732:	4a3f      	ldr	r2, [pc, #252]	; (800a830 <Custom_STM_App_Notification+0x140>)
 800a734:	483f      	ldr	r0, [pc, #252]	; (800a834 <Custom_STM_App_Notification+0x144>)
 800a736:	f001 fa67 	bl	800bc08 <iprintf>
 800a73a:	483f      	ldr	r0, [pc, #252]	; (800a838 <Custom_STM_App_Notification+0x148>)
 800a73c:	f001 fad2 	bl	800bce4 <puts>
    			int i;
    			APP_DBG_MSG("ICard Data: ");
 800a740:	483a      	ldr	r0, [pc, #232]	; (800a82c <Custom_STM_App_Notification+0x13c>)
 800a742:	f7fe fa81 	bl	8008c48 <DbgTraceGetFileName>
 800a746:	4601      	mov	r1, r0
 800a748:	2374      	movs	r3, #116	; 0x74
 800a74a:	4a39      	ldr	r2, [pc, #228]	; (800a830 <Custom_STM_App_Notification+0x140>)
 800a74c:	4839      	ldr	r0, [pc, #228]	; (800a834 <Custom_STM_App_Notification+0x144>)
 800a74e:	f001 fa5b 	bl	800bc08 <iprintf>
 800a752:	483a      	ldr	r0, [pc, #232]	; (800a83c <Custom_STM_App_Notification+0x14c>)
 800a754:	f001 fa58 	bl	800bc08 <iprintf>
    			for (i = 0; i < pNotification->DataTransfered.Length; i++){
 800a758:	2300      	movs	r3, #0
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e014      	b.n	800a788 <Custom_STM_App_Notification+0x98>
    				APP_DBG_MSG("%02X", *(pNotification->DataTransfered.pPayload+i));
 800a75e:	4833      	ldr	r0, [pc, #204]	; (800a82c <Custom_STM_App_Notification+0x13c>)
 800a760:	f7fe fa72 	bl	8008c48 <DbgTraceGetFileName>
 800a764:	4601      	mov	r1, r0
 800a766:	2376      	movs	r3, #118	; 0x76
 800a768:	4a31      	ldr	r2, [pc, #196]	; (800a830 <Custom_STM_App_Notification+0x140>)
 800a76a:	4832      	ldr	r0, [pc, #200]	; (800a834 <Custom_STM_App_Notification+0x144>)
 800a76c:	f001 fa4c 	bl	800bc08 <iprintf>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	4619      	mov	r1, r3
 800a77c:	4830      	ldr	r0, [pc, #192]	; (800a840 <Custom_STM_App_Notification+0x150>)
 800a77e:	f001 fa43 	bl	800bc08 <iprintf>
    			for (i = 0; i < pNotification->DataTransfered.Length; i++){
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7a1b      	ldrb	r3, [r3, #8]
 800a78c:	461a      	mov	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4293      	cmp	r3, r2
 800a792:	dbe4      	blt.n	800a75e <Custom_STM_App_Notification+0x6e>
    			}
//    	      APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
    	      APP_DBG_MSG("Size of data: %u\n", pNotification->DataTransfered.Length );
 800a794:	4825      	ldr	r0, [pc, #148]	; (800a82c <Custom_STM_App_Notification+0x13c>)
 800a796:	f7fe fa57 	bl	8008c48 <DbgTraceGetFileName>
 800a79a:	4601      	mov	r1, r0
 800a79c:	2379      	movs	r3, #121	; 0x79
 800a79e:	4a24      	ldr	r2, [pc, #144]	; (800a830 <Custom_STM_App_Notification+0x140>)
 800a7a0:	4824      	ldr	r0, [pc, #144]	; (800a834 <Custom_STM_App_Notification+0x144>)
 800a7a2:	f001 fa31 	bl	800bc08 <iprintf>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	7a1b      	ldrb	r3, [r3, #8]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4825      	ldr	r0, [pc, #148]	; (800a844 <Custom_STM_App_Notification+0x154>)
 800a7ae:	f001 fa2b 	bl	800bc08 <iprintf>
    	      if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d103      	bne.n	800a7c6 <Custom_STM_App_Notification+0xd6>
    	      {
//    	        BSP_LED_On(Blue_LED_Pin);
    	    	  HAL_GPIO_TogglePin (Blue_LED_GPIO_Port, Blue_LED_Pin);
 800a7be:	2120      	movs	r1, #32
 800a7c0:	4821      	ldr	r0, [pc, #132]	; (800a848 <Custom_STM_App_Notification+0x158>)
 800a7c2:	f7f9 f97f 	bl	8003ac4 <HAL_GPIO_TogglePin>
    	      }
    	      if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d126      	bne.n	800a820 <Custom_STM_App_Notification+0x130>
    	      {
//    	        BSP_LED_Off(Blue_LED_Pin);
    	    	  HAL_GPIO_TogglePin (Blue_LED_GPIO_Port, Blue_LED_Pin);
 800a7d2:	2120      	movs	r1, #32
 800a7d4:	481c      	ldr	r0, [pc, #112]	; (800a848 <Custom_STM_App_Notification+0x158>)
 800a7d6:	f7f9 f975 	bl	8003ac4 <HAL_GPIO_TogglePin>
    	      }
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 800a7da:	e021      	b.n	800a820 <Custom_STM_App_Notification+0x130>

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");
 800a7dc:	4813      	ldr	r0, [pc, #76]	; (800a82c <Custom_STM_App_Notification+0x13c>)
 800a7de:	f7fe fa33 	bl	8008c48 <DbgTraceGetFileName>
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	2389      	movs	r3, #137	; 0x89
 800a7e6:	4a12      	ldr	r2, [pc, #72]	; (800a830 <Custom_STM_App_Notification+0x140>)
 800a7e8:	4812      	ldr	r0, [pc, #72]	; (800a834 <Custom_STM_App_Notification+0x144>)
 800a7ea:	f001 fa0d 	bl	800bc08 <iprintf>
 800a7ee:	4817      	ldr	r0, [pc, #92]	; (800a84c <Custom_STM_App_Notification+0x15c>)
 800a7f0:	f001 fa78 	bl	800bce4 <puts>

    	      Custom_App_Context.Switch_c_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800a7f4:	4b16      	ldr	r3, [pc, #88]	; (800a850 <Custom_STM_App_Notification+0x160>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	701a      	strb	r2, [r3, #0]

      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 800a7fa:	e012      	b.n	800a822 <Custom_STM_App_Notification+0x132>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
    	 APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT \n");
 800a7fc:	480b      	ldr	r0, [pc, #44]	; (800a82c <Custom_STM_App_Notification+0x13c>)
 800a7fe:	f7fe fa23 	bl	8008c48 <DbgTraceGetFileName>
 800a802:	4601      	mov	r1, r0
 800a804:	2392      	movs	r3, #146	; 0x92
 800a806:	4a0a      	ldr	r2, [pc, #40]	; (800a830 <Custom_STM_App_Notification+0x140>)
 800a808:	480a      	ldr	r0, [pc, #40]	; (800a834 <Custom_STM_App_Notification+0x144>)
 800a80a:	f001 f9fd 	bl	800bc08 <iprintf>
 800a80e:	4811      	ldr	r0, [pc, #68]	; (800a854 <Custom_STM_App_Notification+0x164>)
 800a810:	f001 fa68 	bl	800bce4 <puts>

    	      Custom_App_Context.Switch_c_Notification_Status = 0;        /* My_Switch_Char notification status has been disabled */
 800a814:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <Custom_STM_App_Notification+0x160>)
 800a816:	2200      	movs	r2, #0
 800a818:	701a      	strb	r2, [r3, #0]

      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 800a81a:	e002      	b.n	800a822 <Custom_STM_App_Notification+0x132>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800a81c:	bf00      	nop
 800a81e:	e000      	b.n	800a822 <Custom_STM_App_Notification+0x132>
      break;
 800a820:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800a822:	bf00      	nop
}
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	0800dab0 	.word	0x0800dab0
 800a830:	0800e474 	.word	0x0800e474
 800a834:	0800dad0 	.word	0x0800dad0
 800a838:	0800dae4 	.word	0x0800dae4
 800a83c:	0800db10 	.word	0x0800db10
 800a840:	0800db20 	.word	0x0800db20
 800a844:	0800db28 	.word	0x0800db28
 800a848:	48000400 	.word	0x48000400
 800a84c:	0800db3c 	.word	0x0800db3c
 800a850:	20001428 	.word	0x20001428
 800a854:	0800db6c 	.word	0x0800db6c

0800a858 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <Custom_APP_Notification+0x16>
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d002      	beq.n	800a872 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800a86c:	e002      	b.n	800a874 <Custom_APP_Notification+0x1c>
      break;
 800a86e:	bf00      	nop
 800a870:	e000      	b.n	800a874 <Custom_APP_Notification+0x1c>
      break;
 800a872:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800a874:	bf00      	nop
}
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_Switch_c_Send_Notification);
 800a884:	4a06      	ldr	r2, [pc, #24]	; (800a8a0 <Custom_APP_Init+0x20>)
 800a886:	2100      	movs	r1, #0
 800a888:	2004      	movs	r0, #4
 800a88a:	f000 ffb9 	bl	800b800 <UTIL_SEQ_RegTask>

	  Custom_App_Context.Switch_c_Notification_Status = 0;
 800a88e:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <Custom_APP_Init+0x24>)
 800a890:	2200      	movs	r2, #0
 800a892:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.SW1_Status = 0;
 800a894:	4b03      	ldr	r3, [pc, #12]	; (800a8a4 <Custom_APP_Init+0x24>)
 800a896:	2200      	movs	r2, #0
 800a898:	709a      	strb	r2, [r3, #2]

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800a89a:	bf00      	nop
}
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	0800a8a9 	.word	0x0800a8a9
 800a8a4:	20001428 	.word	0x20001428

0800a8a8 <Custom_Switch_c_Send_Notification>:
  /* USER CODE END Switch_c_UC_Last*/
  return;
}

void Custom_Switch_c_Send_Notification(void) /* Property Notification */
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Switch_c_NS_1*/

  /* USER CODE END Switch_c_NS_1*/

  if (updateflag != 0)
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <Custom_Switch_c_Send_Notification+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 800a8b8:	4904      	ldr	r1, [pc, #16]	; (800a8cc <Custom_Switch_c_Send_Notification+0x24>)
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	f000 fae8 	bl	800ae90 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Switch_c_NS_Last*/

  /* USER CODE END Switch_c_NS_Last*/

  return;
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
}
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20001430 	.word	0x20001430

0800a8d0 <P2PS_APP_SW1_Button_Action>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_SW1_Button_Action(void)
  {
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	2004      	movs	r0, #4
 800a8d8:	f000 ffb4 	bl	800b844 <UTIL_SEQ_SetTask>

    return;
 800a8dc:	bf00      	nop
  }
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08c      	sub	sp, #48	; 0x30
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2bff      	cmp	r3, #255	; 0xff
 800a8fa:	f040 8097 	bne.w	800aa2c <Custom_STM_Event_Handler+0x14c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	3302      	adds	r3, #2
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	f640 4214 	movw	r2, #3092	; 0xc14
 800a90e:	4293      	cmp	r3, r2
 800a910:	f000 8084 	beq.w	800aa1c <Custom_STM_Event_Handler+0x13c>
 800a914:	f640 4214 	movw	r2, #3092	; 0xc14
 800a918:	4293      	cmp	r3, r2
 800a91a:	f300 8081 	bgt.w	800aa20 <Custom_STM_Event_Handler+0x140>
 800a91e:	f640 4201 	movw	r2, #3073	; 0xc01
 800a922:	4293      	cmp	r3, r2
 800a924:	d004      	beq.n	800a930 <Custom_STM_Event_Handler+0x50>
 800a926:	f640 4213 	movw	r2, #3091	; 0xc13
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d066      	beq.n	800a9fc <Custom_STM_Event_Handler+0x11c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800a92e:	e077      	b.n	800aa20 <Custom_STM_Event_Handler+0x140>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	3302      	adds	r3, #2
 800a934:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	885b      	ldrh	r3, [r3, #2]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	461a      	mov	r2, r3
 800a93e:	4b3f      	ldr	r3, [pc, #252]	; (800aa3c <Custom_STM_Event_Handler+0x15c>)
 800a940:	889b      	ldrh	r3, [r3, #4]
 800a942:	3302      	adds	r3, #2
 800a944:	429a      	cmp	r2, r3
 800a946:	d119      	bne.n	800a97c <Custom_STM_Event_Handler+0x9c>
            return_value = SVCCTL_EvtAckFlowEnable;
 800a948:	2301      	movs	r3, #1
 800a94a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	7a1b      	ldrb	r3, [r3, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <Custom_STM_Event_Handler+0x7c>
 800a956:	2b01      	cmp	r3, #1
 800a958:	d008      	beq.n	800a96c <Custom_STM_Event_Handler+0x8c>
              break;
 800a95a:	e04e      	b.n	800a9fa <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800a960:	f107 030c 	add.w	r3, r7, #12
 800a964:	4618      	mov	r0, r3
 800a966:	f7ff fec3 	bl	800a6f0 <Custom_STM_App_Notification>
                break;
 800a96a:	e046      	b.n	800a9fa <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 800a96c:	2302      	movs	r3, #2
 800a96e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800a970:	f107 030c 	add.w	r3, r7, #12
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff febb 	bl	800a6f0 <Custom_STM_App_Notification>
                break;
 800a97a:	e03e      	b.n	800a9fa <Custom_STM_Event_Handler+0x11a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	885b      	ldrh	r3, [r3, #2]
 800a980:	b29b      	uxth	r3, r3
 800a982:	461a      	mov	r2, r3
 800a984:	4b2d      	ldr	r3, [pc, #180]	; (800aa3c <Custom_STM_Event_Handler+0x15c>)
 800a986:	891b      	ldrh	r3, [r3, #8]
 800a988:	3302      	adds	r3, #2
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d119      	bne.n	800a9c2 <Custom_STM_Event_Handler+0xe2>
            return_value = SVCCTL_EvtAckFlowEnable;
 800a98e:	2301      	movs	r3, #1
 800a990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	7a1b      	ldrb	r3, [r3, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <Custom_STM_Event_Handler+0xc2>
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d008      	beq.n	800a9b2 <Custom_STM_Event_Handler+0xd2>
              break;
 800a9a0:	e02b      	b.n	800a9fa <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT;
 800a9a2:	2305      	movs	r3, #5
 800a9a4:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800a9a6:	f107 030c 	add.w	r3, r7, #12
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff fea0 	bl	800a6f0 <Custom_STM_App_Notification>
                break;
 800a9b0:	e023      	b.n	800a9fa <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT;
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff fe98 	bl	800a6f0 <Custom_STM_App_Notification>
                break;
 800a9c0:	e01b      	b.n	800a9fa <Custom_STM_Event_Handler+0x11a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	885b      	ldrh	r3, [r3, #2]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	4b1c      	ldr	r3, [pc, #112]	; (800aa3c <Custom_STM_Event_Handler+0x15c>)
 800a9cc:	885b      	ldrh	r3, [r3, #2]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d127      	bne.n	800aa24 <Custom_STM_Event_Handler+0x144>
            return_value = SVCCTL_EvtAckFlowEnable;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	733b      	strb	r3, [r7, #12]
                        Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	88db      	ldrh	r3, [r3, #6]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	753b      	strb	r3, [r7, #20]
                        Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	613b      	str	r3, [r7, #16]
                        Custom_STM_App_Notification(&Notification);
 800a9ee:	f107 030c 	add.w	r3, r7, #12
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff fe7c 	bl	800a6f0 <Custom_STM_App_Notification>
          break;
 800a9f8:	e014      	b.n	800aa24 <Custom_STM_Event_Handler+0x144>
 800a9fa:	e013      	b.n	800aa24 <Custom_STM_Event_Handler+0x144>
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	3302      	adds	r3, #2
 800aa00:	623b      	str	r3, [r7, #32]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	885b      	ldrh	r3, [r3, #2]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	461a      	mov	r2, r3
 800aa0a:	4b0c      	ldr	r3, [pc, #48]	; (800aa3c <Custom_STM_Event_Handler+0x15c>)
 800aa0c:	899b      	ldrh	r3, [r3, #12]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d109      	bne.n	800aa28 <Custom_STM_Event_Handler+0x148>
            return_value = SVCCTL_EvtAckFlowEnable;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 800aa1a:	e005      	b.n	800aa28 <Custom_STM_Event_Handler+0x148>
          break;
 800aa1c:	bf00      	nop
 800aa1e:	e006      	b.n	800aa2e <Custom_STM_Event_Handler+0x14e>
          break;
 800aa20:	bf00      	nop
 800aa22:	e004      	b.n	800aa2e <Custom_STM_Event_Handler+0x14e>
          break;
 800aa24:	bf00      	nop
 800aa26:	e002      	b.n	800aa2e <Custom_STM_Event_Handler+0x14e>
          break;
 800aa28:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800aa2a:	e000      	b.n	800aa2e <Custom_STM_Event_Handler+0x14e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800aa2c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800aa2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 800aa32:	4618      	mov	r0, r3
 800aa34:	3730      	adds	r7, #48	; 0x30
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20001528 	.word	0x20001528

0800aa40 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08c      	sub	sp, #48	; 0x30
 800aa44:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800aa46:	2392      	movs	r3, #146	; 0x92
 800aa48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800aa4a:	48ac      	ldr	r0, [pc, #688]	; (800acfc <SVCCTL_InitCustomSvc+0x2bc>)
 800aa4c:	f7fd fa80 	bl	8007f50 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800aa50:	2306      	movs	r3, #6
 800aa52:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 800aa54:	238f      	movs	r3, #143	; 0x8f
 800aa56:	713b      	strb	r3, [r7, #4]
 800aa58:	23e5      	movs	r3, #229	; 0xe5
 800aa5a:	717b      	strb	r3, [r7, #5]
 800aa5c:	23b3      	movs	r3, #179	; 0xb3
 800aa5e:	71bb      	strb	r3, [r7, #6]
 800aa60:	23d5      	movs	r3, #213	; 0xd5
 800aa62:	71fb      	strb	r3, [r7, #7]
 800aa64:	232e      	movs	r3, #46	; 0x2e
 800aa66:	723b      	strb	r3, [r7, #8]
 800aa68:	237f      	movs	r3, #127	; 0x7f
 800aa6a:	727b      	strb	r3, [r7, #9]
 800aa6c:	234a      	movs	r3, #74	; 0x4a
 800aa6e:	72bb      	strb	r3, [r7, #10]
 800aa70:	2398      	movs	r3, #152	; 0x98
 800aa72:	72fb      	strb	r3, [r7, #11]
 800aa74:	232a      	movs	r3, #42	; 0x2a
 800aa76:	733b      	strb	r3, [r7, #12]
 800aa78:	2348      	movs	r3, #72	; 0x48
 800aa7a:	737b      	strb	r3, [r7, #13]
 800aa7c:	237a      	movs	r3, #122	; 0x7a
 800aa7e:	73bb      	strb	r3, [r7, #14]
 800aa80:	23cc      	movs	r3, #204	; 0xcc
 800aa82:	73fb      	strb	r3, [r7, #15]
 800aa84:	2340      	movs	r3, #64	; 0x40
 800aa86:	743b      	strb	r3, [r7, #16]
 800aa88:	23fe      	movs	r3, #254	; 0xfe
 800aa8a:	747b      	strb	r3, [r7, #17]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	74bb      	strb	r3, [r7, #18]
 800aa90:	2300      	movs	r3, #0
 800aa92:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800aa94:	7dbb      	ldrb	r3, [r7, #22]
 800aa96:	1d39      	adds	r1, r7, #4
 800aa98:	4a99      	ldr	r2, [pc, #612]	; (800ad00 <SVCCTL_InitCustomSvc+0x2c0>)
 800aa9a:	9200      	str	r2, [sp, #0]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	2002      	movs	r0, #2
 800aaa0:	f7fc fd1e 	bl	80074e0 <aci_gatt_add_service>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomP2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00f      	beq.n	800aace <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: P2PS, error code: 0x%x \n\r", ret);
 800aaae:	4895      	ldr	r0, [pc, #596]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800aab0:	f7fe f8ca 	bl	8008c48 <DbgTraceGetFileName>
 800aab4:	4601      	mov	r1, r0
 800aab6:	f44f 73ba 	mov.w	r3, #372	; 0x174
 800aaba:	4a93      	ldr	r2, [pc, #588]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800aabc:	4893      	ldr	r0, [pc, #588]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800aabe:	f001 f8a3 	bl	800bc08 <iprintf>
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	4619      	mov	r1, r3
 800aac6:	4892      	ldr	r0, [pc, #584]	; (800ad10 <SVCCTL_InitCustomSvc+0x2d0>)
 800aac8:	f001 f89e 	bl	800bc08 <iprintf>
 800aacc:	e00c      	b.n	800aae8 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: P2PS \n\r");
 800aace:	488d      	ldr	r0, [pc, #564]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800aad0:	f7fe f8ba 	bl	8008c48 <DbgTraceGetFileName>
 800aad4:	4601      	mov	r1, r0
 800aad6:	f44f 73bc 	mov.w	r3, #376	; 0x178
 800aada:	4a8b      	ldr	r2, [pc, #556]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800aadc:	488b      	ldr	r0, [pc, #556]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800aade:	f001 f893 	bl	800bc08 <iprintf>
 800aae2:	488c      	ldr	r0, [pc, #560]	; (800ad14 <SVCCTL_InitCustomSvc+0x2d4>)
 800aae4:	f001 f890 	bl	800bc08 <iprintf>
  }

  /**
   *  LED_Char
   */
  COPY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800aae8:	2319      	movs	r3, #25
 800aaea:	713b      	strb	r3, [r7, #4]
 800aaec:	23ed      	movs	r3, #237	; 0xed
 800aaee:	717b      	strb	r3, [r7, #5]
 800aaf0:	2382      	movs	r3, #130	; 0x82
 800aaf2:	71bb      	strb	r3, [r7, #6]
 800aaf4:	23ae      	movs	r3, #174	; 0xae
 800aaf6:	71fb      	strb	r3, [r7, #7]
 800aaf8:	23ed      	movs	r3, #237	; 0xed
 800aafa:	723b      	strb	r3, [r7, #8]
 800aafc:	2321      	movs	r3, #33	; 0x21
 800aafe:	727b      	strb	r3, [r7, #9]
 800ab00:	234c      	movs	r3, #76	; 0x4c
 800ab02:	72bb      	strb	r3, [r7, #10]
 800ab04:	239d      	movs	r3, #157	; 0x9d
 800ab06:	72fb      	strb	r3, [r7, #11]
 800ab08:	2341      	movs	r3, #65	; 0x41
 800ab0a:	733b      	strb	r3, [r7, #12]
 800ab0c:	2345      	movs	r3, #69	; 0x45
 800ab0e:	737b      	strb	r3, [r7, #13]
 800ab10:	2322      	movs	r3, #34	; 0x22
 800ab12:	73bb      	strb	r3, [r7, #14]
 800ab14:	238e      	movs	r3, #142	; 0x8e
 800ab16:	73fb      	strb	r3, [r7, #15]
 800ab18:	2341      	movs	r3, #65	; 0x41
 800ab1a:	743b      	strb	r3, [r7, #16]
 800ab1c:	23fe      	movs	r3, #254	; 0xfe
 800ab1e:	747b      	strb	r3, [r7, #17]
 800ab20:	2300      	movs	r3, #0
 800ab22:	74bb      	strb	r3, [r7, #18]
 800ab24:	2300      	movs	r3, #0
 800ab26:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 800ab28:	4b75      	ldr	r3, [pc, #468]	; (800ad00 <SVCCTL_InitCustomSvc+0x2c0>)
 800ab2a:	8818      	ldrh	r0, [r3, #0]
 800ab2c:	4b7a      	ldr	r3, [pc, #488]	; (800ad18 <SVCCTL_InitCustomSvc+0x2d8>)
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	1d3a      	adds	r2, r7, #4
 800ab34:	4979      	ldr	r1, [pc, #484]	; (800ad1c <SVCCTL_InitCustomSvc+0x2dc>)
 800ab36:	9105      	str	r1, [sp, #20]
 800ab38:	2101      	movs	r1, #1
 800ab3a:	9104      	str	r1, [sp, #16]
 800ab3c:	2110      	movs	r1, #16
 800ab3e:	9103      	str	r1, [sp, #12]
 800ab40:	2101      	movs	r1, #1
 800ab42:	9102      	str	r1, [sp, #8]
 800ab44:	2100      	movs	r1, #0
 800ab46:	9101      	str	r1, [sp, #4]
 800ab48:	2106      	movs	r1, #6
 800ab4a:	9100      	str	r1, [sp, #0]
 800ab4c:	2102      	movs	r1, #2
 800ab4e:	f7fc fd9d 	bl	800768c <aci_gatt_add_char>
 800ab52:	4603      	mov	r3, r0
 800ab54:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00f      	beq.n	800ab7c <SVCCTL_InitCustomSvc+0x13c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 800ab5c:	4869      	ldr	r0, [pc, #420]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800ab5e:	f7fe f873 	bl	8008c48 <DbgTraceGetFileName>
 800ab62:	4601      	mov	r1, r0
 800ab64:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 800ab68:	4a67      	ldr	r2, [pc, #412]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800ab6a:	4868      	ldr	r0, [pc, #416]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800ab6c:	f001 f84c 	bl	800bc08 <iprintf>
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	4619      	mov	r1, r3
 800ab74:	486a      	ldr	r0, [pc, #424]	; (800ad20 <SVCCTL_InitCustomSvc+0x2e0>)
 800ab76:	f001 f847 	bl	800bc08 <iprintf>
 800ab7a:	e00c      	b.n	800ab96 <SVCCTL_InitCustomSvc+0x156>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 800ab7c:	4861      	ldr	r0, [pc, #388]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800ab7e:	f7fe f863 	bl	8008c48 <DbgTraceGetFileName>
 800ab82:	4601      	mov	r1, r0
 800ab84:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 800ab88:	4a5f      	ldr	r2, [pc, #380]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800ab8a:	4860      	ldr	r0, [pc, #384]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800ab8c:	f001 f83c 	bl	800bc08 <iprintf>
 800ab90:	4864      	ldr	r0, [pc, #400]	; (800ad24 <SVCCTL_InitCustomSvc+0x2e4>)
 800ab92:	f001 f839 	bl	800bc08 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Switch_Char
   */
  COPY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 800ab96:	2319      	movs	r3, #25
 800ab98:	713b      	strb	r3, [r7, #4]
 800ab9a:	23ed      	movs	r3, #237	; 0xed
 800ab9c:	717b      	strb	r3, [r7, #5]
 800ab9e:	2382      	movs	r3, #130	; 0x82
 800aba0:	71bb      	strb	r3, [r7, #6]
 800aba2:	23ae      	movs	r3, #174	; 0xae
 800aba4:	71fb      	strb	r3, [r7, #7]
 800aba6:	23ed      	movs	r3, #237	; 0xed
 800aba8:	723b      	strb	r3, [r7, #8]
 800abaa:	2321      	movs	r3, #33	; 0x21
 800abac:	727b      	strb	r3, [r7, #9]
 800abae:	234c      	movs	r3, #76	; 0x4c
 800abb0:	72bb      	strb	r3, [r7, #10]
 800abb2:	239d      	movs	r3, #157	; 0x9d
 800abb4:	72fb      	strb	r3, [r7, #11]
 800abb6:	2341      	movs	r3, #65	; 0x41
 800abb8:	733b      	strb	r3, [r7, #12]
 800abba:	2345      	movs	r3, #69	; 0x45
 800abbc:	737b      	strb	r3, [r7, #13]
 800abbe:	2322      	movs	r3, #34	; 0x22
 800abc0:	73bb      	strb	r3, [r7, #14]
 800abc2:	238e      	movs	r3, #142	; 0x8e
 800abc4:	73fb      	strb	r3, [r7, #15]
 800abc6:	2342      	movs	r3, #66	; 0x42
 800abc8:	743b      	strb	r3, [r7, #16]
 800abca:	23fe      	movs	r3, #254	; 0xfe
 800abcc:	747b      	strb	r3, [r7, #17]
 800abce:	2300      	movs	r3, #0
 800abd0:	74bb      	strb	r3, [r7, #18]
 800abd2:	2300      	movs	r3, #0
 800abd4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 800abd6:	4b4a      	ldr	r3, [pc, #296]	; (800ad00 <SVCCTL_InitCustomSvc+0x2c0>)
 800abd8:	8818      	ldrh	r0, [r3, #0]
 800abda:	4b53      	ldr	r3, [pc, #332]	; (800ad28 <SVCCTL_InitCustomSvc+0x2e8>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b29b      	uxth	r3, r3
 800abe0:	1d3a      	adds	r2, r7, #4
 800abe2:	4952      	ldr	r1, [pc, #328]	; (800ad2c <SVCCTL_InitCustomSvc+0x2ec>)
 800abe4:	9105      	str	r1, [sp, #20]
 800abe6:	2101      	movs	r1, #1
 800abe8:	9104      	str	r1, [sp, #16]
 800abea:	2110      	movs	r1, #16
 800abec:	9103      	str	r1, [sp, #12]
 800abee:	2101      	movs	r1, #1
 800abf0:	9102      	str	r1, [sp, #8]
 800abf2:	2100      	movs	r1, #0
 800abf4:	9101      	str	r1, [sp, #4]
 800abf6:	2110      	movs	r1, #16
 800abf8:	9100      	str	r1, [sp, #0]
 800abfa:	2102      	movs	r1, #2
 800abfc:	f7fc fd46 	bl	800768c <aci_gatt_add_char>
 800ac00:	4603      	mov	r3, r0
 800ac02:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ac04:	7dfb      	ldrb	r3, [r7, #23]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00f      	beq.n	800ac2a <SVCCTL_InitCustomSvc+0x1ea>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 800ac0a:	483e      	ldr	r0, [pc, #248]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800ac0c:	f7fe f81c 	bl	8008c48 <DbgTraceGetFileName>
 800ac10:	4601      	mov	r1, r0
 800ac12:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800ac16:	4a3c      	ldr	r2, [pc, #240]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800ac18:	483c      	ldr	r0, [pc, #240]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800ac1a:	f000 fff5 	bl	800bc08 <iprintf>
 800ac1e:	7dfb      	ldrb	r3, [r7, #23]
 800ac20:	4619      	mov	r1, r3
 800ac22:	4843      	ldr	r0, [pc, #268]	; (800ad30 <SVCCTL_InitCustomSvc+0x2f0>)
 800ac24:	f000 fff0 	bl	800bc08 <iprintf>
 800ac28:	e00c      	b.n	800ac44 <SVCCTL_InitCustomSvc+0x204>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 800ac2a:	4836      	ldr	r0, [pc, #216]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800ac2c:	f7fe f80c 	bl	8008c48 <DbgTraceGetFileName>
 800ac30:	4601      	mov	r1, r0
 800ac32:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800ac36:	4a34      	ldr	r2, [pc, #208]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800ac38:	4834      	ldr	r0, [pc, #208]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800ac3a:	f000 ffe5 	bl	800bc08 <iprintf>
 800ac3e:	483d      	ldr	r0, [pc, #244]	; (800ad34 <SVCCTL_InitCustomSvc+0x2f4>)
 800ac40:	f000 ffe2 	bl	800bc08 <iprintf>
   *                              = 8
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 8;
 800ac44:	2308      	movs	r3, #8
 800ac46:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x180d;
 800ac48:	f641 030d 	movw	r3, #6157	; 0x180d
 800ac4c:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800ac4e:	7dbb      	ldrb	r3, [r7, #22]
 800ac50:	1d39      	adds	r1, r7, #4
 800ac52:	4a39      	ldr	r2, [pc, #228]	; (800ad38 <SVCCTL_InitCustomSvc+0x2f8>)
 800ac54:	9200      	str	r2, [sp, #0]
 800ac56:	2201      	movs	r2, #1
 800ac58:	2001      	movs	r0, #1
 800ac5a:	f7fc fc41 	bl	80074e0 <aci_gatt_add_service>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomHrsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00f      	beq.n	800ac88 <SVCCTL_InitCustomSvc+0x248>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: HRS, error code: 0x%x \n\r", ret);
 800ac68:	4826      	ldr	r0, [pc, #152]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800ac6a:	f7fd ffed 	bl	8008c48 <DbgTraceGetFileName>
 800ac6e:	4601      	mov	r1, r0
 800ac70:	f240 13cd 	movw	r3, #461	; 0x1cd
 800ac74:	4a24      	ldr	r2, [pc, #144]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800ac76:	4825      	ldr	r0, [pc, #148]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800ac78:	f000 ffc6 	bl	800bc08 <iprintf>
 800ac7c:	7dfb      	ldrb	r3, [r7, #23]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	482e      	ldr	r0, [pc, #184]	; (800ad3c <SVCCTL_InitCustomSvc+0x2fc>)
 800ac82:	f000 ffc1 	bl	800bc08 <iprintf>
 800ac86:	e00c      	b.n	800aca2 <SVCCTL_InitCustomSvc+0x262>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: HRS \n\r");
 800ac88:	481e      	ldr	r0, [pc, #120]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800ac8a:	f7fd ffdd 	bl	8008c48 <DbgTraceGetFileName>
 800ac8e:	4601      	mov	r1, r0
 800ac90:	f240 13d1 	movw	r3, #465	; 0x1d1
 800ac94:	4a1c      	ldr	r2, [pc, #112]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800ac96:	481d      	ldr	r0, [pc, #116]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800ac98:	f000 ffb6 	bl	800bc08 <iprintf>
 800ac9c:	4828      	ldr	r0, [pc, #160]	; (800ad40 <SVCCTL_InitCustomSvc+0x300>)
 800ac9e:	f000 ffb3 	bl	800bc08 <iprintf>
  }

  /**
   *  HRS_Meas
   */
  uuid.Char_UUID_16 = 0x2a37;
 800aca2:	f642 2337 	movw	r3, #10807	; 0x2a37
 800aca6:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomHrsHdle,
 800aca8:	4b15      	ldr	r3, [pc, #84]	; (800ad00 <SVCCTL_InitCustomSvc+0x2c0>)
 800acaa:	88d8      	ldrh	r0, [r3, #6]
 800acac:	4b25      	ldr	r3, [pc, #148]	; (800ad44 <SVCCTL_InitCustomSvc+0x304>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	1d3a      	adds	r2, r7, #4
 800acb4:	4924      	ldr	r1, [pc, #144]	; (800ad48 <SVCCTL_InitCustomSvc+0x308>)
 800acb6:	9105      	str	r1, [sp, #20]
 800acb8:	2101      	movs	r1, #1
 800acba:	9104      	str	r1, [sp, #16]
 800acbc:	2110      	movs	r1, #16
 800acbe:	9103      	str	r1, [sp, #12]
 800acc0:	2100      	movs	r1, #0
 800acc2:	9102      	str	r1, [sp, #8]
 800acc4:	2100      	movs	r1, #0
 800acc6:	9101      	str	r1, [sp, #4]
 800acc8:	2110      	movs	r1, #16
 800acca:	9100      	str	r1, [sp, #0]
 800accc:	2101      	movs	r1, #1
 800acce:	f7fc fcdd 	bl	800768c <aci_gatt_add_char>
 800acd2:	4603      	mov	r3, r0
 800acd4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomHrs_MHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d039      	beq.n	800ad50 <SVCCTL_InitCustomSvc+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_M, error code: 0x%x \n\r", ret);
 800acdc:	4809      	ldr	r0, [pc, #36]	; (800ad04 <SVCCTL_InitCustomSvc+0x2c4>)
 800acde:	f7fd ffb3 	bl	8008c48 <DbgTraceGetFileName>
 800ace2:	4601      	mov	r1, r0
 800ace4:	f240 13e3 	movw	r3, #483	; 0x1e3
 800ace8:	4a07      	ldr	r2, [pc, #28]	; (800ad08 <SVCCTL_InitCustomSvc+0x2c8>)
 800acea:	4808      	ldr	r0, [pc, #32]	; (800ad0c <SVCCTL_InitCustomSvc+0x2cc>)
 800acec:	f000 ff8c 	bl	800bc08 <iprintf>
 800acf0:	7dfb      	ldrb	r3, [r7, #23]
 800acf2:	4619      	mov	r1, r3
 800acf4:	4815      	ldr	r0, [pc, #84]	; (800ad4c <SVCCTL_InitCustomSvc+0x30c>)
 800acf6:	f000 ff87 	bl	800bc08 <iprintf>
 800acfa:	e036      	b.n	800ad6a <SVCCTL_InitCustomSvc+0x32a>
 800acfc:	0800a8e1 	.word	0x0800a8e1
 800ad00:	20001528 	.word	0x20001528
 800ad04:	0800db9c 	.word	0x0800db9c
 800ad08:	0800e490 	.word	0x0800e490
 800ad0c:	0800dbbc 	.word	0x0800dbbc
 800ad10:	0800dbd0 	.word	0x0800dbd0
 800ad14:	0800dc14 	.word	0x0800dc14
 800ad18:	20000033 	.word	0x20000033
 800ad1c:	2000152a 	.word	0x2000152a
 800ad20:	0800dc48 	.word	0x0800dc48
 800ad24:	0800dc8c 	.word	0x0800dc8c
 800ad28:	20000034 	.word	0x20000034
 800ad2c:	2000152c 	.word	0x2000152c
 800ad30:	0800dcc0 	.word	0x0800dcc0
 800ad34:	0800dd08 	.word	0x0800dd08
 800ad38:	2000152e 	.word	0x2000152e
 800ad3c:	0800dd40 	.word	0x0800dd40
 800ad40:	0800dd84 	.word	0x0800dd84
 800ad44:	20000035 	.word	0x20000035
 800ad48:	20001530 	.word	0x20001530
 800ad4c:	0800ddb4 	.word	0x0800ddb4
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_M \n\r");
 800ad50:	4842      	ldr	r0, [pc, #264]	; (800ae5c <SVCCTL_InitCustomSvc+0x41c>)
 800ad52:	f7fd ff79 	bl	8008c48 <DbgTraceGetFileName>
 800ad56:	4601      	mov	r1, r0
 800ad58:	f240 13e7 	movw	r3, #487	; 0x1e7
 800ad5c:	4a40      	ldr	r2, [pc, #256]	; (800ae60 <SVCCTL_InitCustomSvc+0x420>)
 800ad5e:	4841      	ldr	r0, [pc, #260]	; (800ae64 <SVCCTL_InitCustomSvc+0x424>)
 800ad60:	f000 ff52 	bl	800bc08 <iprintf>
 800ad64:	4840      	ldr	r0, [pc, #256]	; (800ae68 <SVCCTL_InitCustomSvc+0x428>)
 800ad66:	f000 ff4f 	bl	800bc08 <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char1 */
  /**
   *  Sensor_Loc
   */
  uuid.Char_UUID_16 = 0x2a38;
 800ad6a:	f642 2338 	movw	r3, #10808	; 0x2a38
 800ad6e:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomHrsHdle,
 800ad70:	4b3e      	ldr	r3, [pc, #248]	; (800ae6c <SVCCTL_InitCustomSvc+0x42c>)
 800ad72:	88d8      	ldrh	r0, [r3, #6]
 800ad74:	4b3e      	ldr	r3, [pc, #248]	; (800ae70 <SVCCTL_InitCustomSvc+0x430>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	1d3a      	adds	r2, r7, #4
 800ad7c:	493d      	ldr	r1, [pc, #244]	; (800ae74 <SVCCTL_InitCustomSvc+0x434>)
 800ad7e:	9105      	str	r1, [sp, #20]
 800ad80:	2100      	movs	r1, #0
 800ad82:	9104      	str	r1, [sp, #16]
 800ad84:	2110      	movs	r1, #16
 800ad86:	9103      	str	r1, [sp, #12]
 800ad88:	2100      	movs	r1, #0
 800ad8a:	9102      	str	r1, [sp, #8]
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	9101      	str	r1, [sp, #4]
 800ad90:	2102      	movs	r1, #2
 800ad92:	9100      	str	r1, [sp, #0]
 800ad94:	2101      	movs	r1, #1
 800ad96:	f7fc fc79 	bl	800768c <aci_gatt_add_char>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomHrs_SlHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00f      	beq.n	800adc4 <SVCCTL_InitCustomSvc+0x384>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_SL, error code: 0x%x \n\r", ret);
 800ada4:	482d      	ldr	r0, [pc, #180]	; (800ae5c <SVCCTL_InitCustomSvc+0x41c>)
 800ada6:	f7fd ff4f 	bl	8008c48 <DbgTraceGetFileName>
 800adaa:	4601      	mov	r1, r0
 800adac:	f240 13fd 	movw	r3, #509	; 0x1fd
 800adb0:	4a2b      	ldr	r2, [pc, #172]	; (800ae60 <SVCCTL_InitCustomSvc+0x420>)
 800adb2:	482c      	ldr	r0, [pc, #176]	; (800ae64 <SVCCTL_InitCustomSvc+0x424>)
 800adb4:	f000 ff28 	bl	800bc08 <iprintf>
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	4619      	mov	r1, r3
 800adbc:	482e      	ldr	r0, [pc, #184]	; (800ae78 <SVCCTL_InitCustomSvc+0x438>)
 800adbe:	f000 ff23 	bl	800bc08 <iprintf>
 800adc2:	e00c      	b.n	800adde <SVCCTL_InitCustomSvc+0x39e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_SL \n\r");
 800adc4:	4825      	ldr	r0, [pc, #148]	; (800ae5c <SVCCTL_InitCustomSvc+0x41c>)
 800adc6:	f7fd ff3f 	bl	8008c48 <DbgTraceGetFileName>
 800adca:	4601      	mov	r1, r0
 800adcc:	f240 2301 	movw	r3, #513	; 0x201
 800add0:	4a23      	ldr	r2, [pc, #140]	; (800ae60 <SVCCTL_InitCustomSvc+0x420>)
 800add2:	4824      	ldr	r0, [pc, #144]	; (800ae64 <SVCCTL_InitCustomSvc+0x424>)
 800add4:	f000 ff18 	bl	800bc08 <iprintf>
 800add8:	4828      	ldr	r0, [pc, #160]	; (800ae7c <SVCCTL_InitCustomSvc+0x43c>)
 800adda:	f000 ff15 	bl	800bc08 <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char2 */
  /**
   *  HRS_CTRL_Point
   */
  uuid.Char_UUID_16 = 0x2a39;
 800adde:	f642 2339 	movw	r3, #10809	; 0x2a39
 800ade2:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomHrsHdle,
 800ade4:	4b21      	ldr	r3, [pc, #132]	; (800ae6c <SVCCTL_InitCustomSvc+0x42c>)
 800ade6:	88d8      	ldrh	r0, [r3, #6]
 800ade8:	4b25      	ldr	r3, [pc, #148]	; (800ae80 <SVCCTL_InitCustomSvc+0x440>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	b29b      	uxth	r3, r3
 800adee:	1d3a      	adds	r2, r7, #4
 800adf0:	4924      	ldr	r1, [pc, #144]	; (800ae84 <SVCCTL_InitCustomSvc+0x444>)
 800adf2:	9105      	str	r1, [sp, #20]
 800adf4:	2100      	movs	r1, #0
 800adf6:	9104      	str	r1, [sp, #16]
 800adf8:	2110      	movs	r1, #16
 800adfa:	9103      	str	r1, [sp, #12]
 800adfc:	2102      	movs	r1, #2
 800adfe:	9102      	str	r1, [sp, #8]
 800ae00:	2100      	movs	r1, #0
 800ae02:	9101      	str	r1, [sp, #4]
 800ae04:	2108      	movs	r1, #8
 800ae06:	9100      	str	r1, [sp, #0]
 800ae08:	2101      	movs	r1, #1
 800ae0a:	f7fc fc3f 	bl	800768c <aci_gatt_add_char>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomHrs_CtrlHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00f      	beq.n	800ae38 <SVCCTL_InitCustomSvc+0x3f8>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_CTRL, error code: 0x%x \n\r", ret);
 800ae18:	4810      	ldr	r0, [pc, #64]	; (800ae5c <SVCCTL_InitCustomSvc+0x41c>)
 800ae1a:	f7fd ff15 	bl	8008c48 <DbgTraceGetFileName>
 800ae1e:	4601      	mov	r1, r0
 800ae20:	f240 2317 	movw	r3, #535	; 0x217
 800ae24:	4a0e      	ldr	r2, [pc, #56]	; (800ae60 <SVCCTL_InitCustomSvc+0x420>)
 800ae26:	480f      	ldr	r0, [pc, #60]	; (800ae64 <SVCCTL_InitCustomSvc+0x424>)
 800ae28:	f000 feee 	bl	800bc08 <iprintf>
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4815      	ldr	r0, [pc, #84]	; (800ae88 <SVCCTL_InitCustomSvc+0x448>)
 800ae32:	f000 fee9 	bl	800bc08 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800ae36:	e00d      	b.n	800ae54 <SVCCTL_InitCustomSvc+0x414>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_CTRL \n\r");
 800ae38:	4808      	ldr	r0, [pc, #32]	; (800ae5c <SVCCTL_InitCustomSvc+0x41c>)
 800ae3a:	f7fd ff05 	bl	8008c48 <DbgTraceGetFileName>
 800ae3e:	4601      	mov	r1, r0
 800ae40:	f240 231b 	movw	r3, #539	; 0x21b
 800ae44:	4a06      	ldr	r2, [pc, #24]	; (800ae60 <SVCCTL_InitCustomSvc+0x420>)
 800ae46:	4807      	ldr	r0, [pc, #28]	; (800ae64 <SVCCTL_InitCustomSvc+0x424>)
 800ae48:	f000 fede 	bl	800bc08 <iprintf>
 800ae4c:	480f      	ldr	r0, [pc, #60]	; (800ae8c <SVCCTL_InitCustomSvc+0x44c>)
 800ae4e:	f000 fedb 	bl	800bc08 <iprintf>
  return;
 800ae52:	bf00      	nop
}
 800ae54:	3718      	adds	r7, #24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	0800db9c 	.word	0x0800db9c
 800ae60:	0800e490 	.word	0x0800e490
 800ae64:	0800dbbc 	.word	0x0800dbbc
 800ae68:	0800ddf8 	.word	0x0800ddf8
 800ae6c:	20001528 	.word	0x20001528
 800ae70:	20000036 	.word	0x20000036
 800ae74:	20001532 	.word	0x20001532
 800ae78:	0800de2c 	.word	0x0800de2c
 800ae7c:	0800de74 	.word	0x0800de74
 800ae80:	20000037 	.word	0x20000037
 800ae84:	20001534 	.word	0x20001534
 800ae88:	0800dea8 	.word	0x0800dea8
 800ae8c:	0800def0 	.word	0x0800def0

0800ae90 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ae9c:	2392      	movs	r3, #146	; 0x92
 800ae9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	f200 80f9 	bhi.w	800b09a <Custom_STM_App_Update_Char+0x20a>
 800aea8:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <Custom_STM_App_Update_Char+0x20>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800aec5 	.word	0x0800aec5
 800aeb4:	0800af23 	.word	0x0800af23
 800aeb8:	0800af81 	.word	0x0800af81
 800aebc:	0800afdf 	.word	0x0800afdf
 800aec0:	0800b03d 	.word	0x0800b03d
  {

    case CUSTOM_STM_LED_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomP2PsHdle,
 800aec4:	4b78      	ldr	r3, [pc, #480]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800aec6:	8818      	ldrh	r0, [r3, #0]
 800aec8:	4b77      	ldr	r3, [pc, #476]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800aeca:	8859      	ldrh	r1, [r3, #2]
 800aecc:	4b77      	ldr	r3, [pc, #476]	; (800b0ac <Custom_STM_App_Update_Char+0x21c>)
 800aece:	781a      	ldrb	r2, [r3, #0]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	4613      	mov	r3, r2
 800aed6:	2200      	movs	r2, #0
 800aed8:	f7fc fce0 	bl	800789c <aci_gatt_update_char_value>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomLed_CHdle,
                                       0, /* charValOffset */
                                       SizeLed_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00f      	beq.n	800af06 <Custom_STM_App_Update_Char+0x76>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LED_C command, result : 0x%x \n\r", ret);
 800aee6:	4872      	ldr	r0, [pc, #456]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800aee8:	f7fd feae 	bl	8008c48 <DbgTraceGetFileName>
 800aeec:	4601      	mov	r1, r0
 800aeee:	f240 2342 	movw	r3, #578	; 0x242
 800aef2:	4a70      	ldr	r2, [pc, #448]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800aef4:	4870      	ldr	r0, [pc, #448]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800aef6:	f000 fe87 	bl	800bc08 <iprintf>
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
 800aefc:	4619      	mov	r1, r3
 800aefe:	486f      	ldr	r0, [pc, #444]	; (800b0bc <Custom_STM_App_Update_Char+0x22c>)
 800af00:	f000 fe82 	bl	800bc08 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800af04:	e0ca      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
 800af06:	486a      	ldr	r0, [pc, #424]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800af08:	f7fd fe9e 	bl	8008c48 <DbgTraceGetFileName>
 800af0c:	4601      	mov	r1, r0
 800af0e:	f240 2346 	movw	r3, #582	; 0x246
 800af12:	4a68      	ldr	r2, [pc, #416]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800af14:	4868      	ldr	r0, [pc, #416]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800af16:	f000 fe77 	bl	800bc08 <iprintf>
 800af1a:	4869      	ldr	r0, [pc, #420]	; (800b0c0 <Custom_STM_App_Update_Char+0x230>)
 800af1c:	f000 fe74 	bl	800bc08 <iprintf>
      break;
 800af20:	e0bc      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>

    case CUSTOM_STM_SWITCH_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomP2PsHdle,
 800af22:	4b61      	ldr	r3, [pc, #388]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800af24:	8818      	ldrh	r0, [r3, #0]
 800af26:	4b60      	ldr	r3, [pc, #384]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800af28:	8899      	ldrh	r1, [r3, #4]
 800af2a:	4b66      	ldr	r3, [pc, #408]	; (800b0c4 <Custom_STM_App_Update_Char+0x234>)
 800af2c:	781a      	ldrb	r2, [r3, #0]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	4613      	mov	r3, r2
 800af34:	2200      	movs	r2, #0
 800af36:	f7fc fcb1 	bl	800789c <aci_gatt_update_char_value>
 800af3a:	4603      	mov	r3, r0
 800af3c:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomSwitch_CHdle,
                                       0, /* charValOffset */
                                       SizeSwitch_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00f      	beq.n	800af64 <Custom_STM_App_Update_Char+0xd4>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value SWITCH_C command, result : 0x%x \n\r", ret);
 800af44:	485a      	ldr	r0, [pc, #360]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800af46:	f7fd fe7f 	bl	8008c48 <DbgTraceGetFileName>
 800af4a:	4601      	mov	r1, r0
 800af4c:	f240 2355 	movw	r3, #597	; 0x255
 800af50:	4a58      	ldr	r2, [pc, #352]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800af52:	4859      	ldr	r0, [pc, #356]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800af54:	f000 fe58 	bl	800bc08 <iprintf>
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	4619      	mov	r1, r3
 800af5c:	485a      	ldr	r0, [pc, #360]	; (800b0c8 <Custom_STM_App_Update_Char+0x238>)
 800af5e:	f000 fe53 	bl	800bc08 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 800af62:	e09b      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
 800af64:	4852      	ldr	r0, [pc, #328]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800af66:	f7fd fe6f 	bl	8008c48 <DbgTraceGetFileName>
 800af6a:	4601      	mov	r1, r0
 800af6c:	f240 2359 	movw	r3, #601	; 0x259
 800af70:	4a50      	ldr	r2, [pc, #320]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800af72:	4851      	ldr	r0, [pc, #324]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800af74:	f000 fe48 	bl	800bc08 <iprintf>
 800af78:	4854      	ldr	r0, [pc, #336]	; (800b0cc <Custom_STM_App_Update_Char+0x23c>)
 800af7a:	f000 fe45 	bl	800bc08 <iprintf>
      break;
 800af7e:	e08d      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>

    case CUSTOM_STM_HRS_M:
      ret = aci_gatt_update_char_value(CustomContext.CustomHrsHdle,
 800af80:	4b49      	ldr	r3, [pc, #292]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800af82:	88d8      	ldrh	r0, [r3, #6]
 800af84:	4b48      	ldr	r3, [pc, #288]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800af86:	8919      	ldrh	r1, [r3, #8]
 800af88:	4b51      	ldr	r3, [pc, #324]	; (800b0d0 <Custom_STM_App_Update_Char+0x240>)
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	4613      	mov	r3, r2
 800af92:	2200      	movs	r2, #0
 800af94:	f7fc fc82 	bl	800789c <aci_gatt_update_char_value>
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_MHdle,
                                       0, /* charValOffset */
                                       SizeHrs_M, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00f      	beq.n	800afc2 <Custom_STM_App_Update_Char+0x132>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_M command, result : 0x%x \n\r", ret);
 800afa2:	4843      	ldr	r0, [pc, #268]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800afa4:	f7fd fe50 	bl	8008c48 <DbgTraceGetFileName>
 800afa8:	4601      	mov	r1, r0
 800afaa:	f44f 731a 	mov.w	r3, #616	; 0x268
 800afae:	4a41      	ldr	r2, [pc, #260]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800afb0:	4841      	ldr	r0, [pc, #260]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800afb2:	f000 fe29 	bl	800bc08 <iprintf>
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
 800afb8:	4619      	mov	r1, r3
 800afba:	4846      	ldr	r0, [pc, #280]	; (800b0d4 <Custom_STM_App_Update_Char+0x244>)
 800afbc:	f000 fe24 	bl	800bc08 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_M command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 800afc0:	e06c      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_M command\n\r");
 800afc2:	483b      	ldr	r0, [pc, #236]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800afc4:	f7fd fe40 	bl	8008c48 <DbgTraceGetFileName>
 800afc8:	4601      	mov	r1, r0
 800afca:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800afce:	4a39      	ldr	r2, [pc, #228]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800afd0:	4839      	ldr	r0, [pc, #228]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800afd2:	f000 fe19 	bl	800bc08 <iprintf>
 800afd6:	4840      	ldr	r0, [pc, #256]	; (800b0d8 <Custom_STM_App_Update_Char+0x248>)
 800afd8:	f000 fe16 	bl	800bc08 <iprintf>
      break;
 800afdc:	e05e      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>

    case CUSTOM_STM_HRS_SL:
      ret = aci_gatt_update_char_value(CustomContext.CustomHrsHdle,
 800afde:	4b32      	ldr	r3, [pc, #200]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800afe0:	88d8      	ldrh	r0, [r3, #6]
 800afe2:	4b31      	ldr	r3, [pc, #196]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800afe4:	8959      	ldrh	r1, [r3, #10]
 800afe6:	4b3d      	ldr	r3, [pc, #244]	; (800b0dc <Custom_STM_App_Update_Char+0x24c>)
 800afe8:	781a      	ldrb	r2, [r3, #0]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	4613      	mov	r3, r2
 800aff0:	2200      	movs	r2, #0
 800aff2:	f7fc fc53 	bl	800789c <aci_gatt_update_char_value>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_SlHdle,
                                       0, /* charValOffset */
                                       SizeHrs_Sl, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00f      	beq.n	800b020 <Custom_STM_App_Update_Char+0x190>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_SL command, result : 0x%x \n\r", ret);
 800b000:	482b      	ldr	r0, [pc, #172]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800b002:	f7fd fe21 	bl	8008c48 <DbgTraceGetFileName>
 800b006:	4601      	mov	r1, r0
 800b008:	f240 237b 	movw	r3, #635	; 0x27b
 800b00c:	4a29      	ldr	r2, [pc, #164]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800b00e:	482a      	ldr	r0, [pc, #168]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800b010:	f000 fdfa 	bl	800bc08 <iprintf>
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	4619      	mov	r1, r3
 800b018:	4831      	ldr	r0, [pc, #196]	; (800b0e0 <Custom_STM_App_Update_Char+0x250>)
 800b01a:	f000 fdf5 	bl	800bc08 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_SL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 800b01e:	e03d      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_SL command\n\r");
 800b020:	4823      	ldr	r0, [pc, #140]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800b022:	f7fd fe11 	bl	8008c48 <DbgTraceGetFileName>
 800b026:	4601      	mov	r1, r0
 800b028:	f240 237f 	movw	r3, #639	; 0x27f
 800b02c:	4a21      	ldr	r2, [pc, #132]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800b02e:	4822      	ldr	r0, [pc, #136]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800b030:	f000 fdea 	bl	800bc08 <iprintf>
 800b034:	482b      	ldr	r0, [pc, #172]	; (800b0e4 <Custom_STM_App_Update_Char+0x254>)
 800b036:	f000 fde7 	bl	800bc08 <iprintf>
      break;
 800b03a:	e02f      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>

    case CUSTOM_STM_HRS_CTRL:
      ret = aci_gatt_update_char_value(CustomContext.CustomHrsHdle,
 800b03c:	4b1a      	ldr	r3, [pc, #104]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800b03e:	88d8      	ldrh	r0, [r3, #6]
 800b040:	4b19      	ldr	r3, [pc, #100]	; (800b0a8 <Custom_STM_App_Update_Char+0x218>)
 800b042:	8999      	ldrh	r1, [r3, #12]
 800b044:	4b28      	ldr	r3, [pc, #160]	; (800b0e8 <Custom_STM_App_Update_Char+0x258>)
 800b046:	781a      	ldrb	r2, [r3, #0]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	4613      	mov	r3, r2
 800b04e:	2200      	movs	r2, #0
 800b050:	f7fc fc24 	bl	800789c <aci_gatt_update_char_value>
 800b054:	4603      	mov	r3, r0
 800b056:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_CtrlHdle,
                                       0, /* charValOffset */
                                       SizeHrs_Ctrl, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00f      	beq.n	800b07e <Custom_STM_App_Update_Char+0x1ee>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_CTRL command, result : 0x%x \n\r", ret);
 800b05e:	4814      	ldr	r0, [pc, #80]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800b060:	f7fd fdf2 	bl	8008c48 <DbgTraceGetFileName>
 800b064:	4601      	mov	r1, r0
 800b066:	f240 238e 	movw	r3, #654	; 0x28e
 800b06a:	4a12      	ldr	r2, [pc, #72]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800b06c:	4812      	ldr	r0, [pc, #72]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800b06e:	f000 fdcb 	bl	800bc08 <iprintf>
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	4619      	mov	r1, r3
 800b076:	481d      	ldr	r0, [pc, #116]	; (800b0ec <Custom_STM_App_Update_Char+0x25c>)
 800b078:	f000 fdc6 	bl	800bc08 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_CTRL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 800b07c:	e00e      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_CTRL command\n\r");
 800b07e:	480c      	ldr	r0, [pc, #48]	; (800b0b0 <Custom_STM_App_Update_Char+0x220>)
 800b080:	f7fd fde2 	bl	8008c48 <DbgTraceGetFileName>
 800b084:	4601      	mov	r1, r0
 800b086:	f240 2392 	movw	r3, #658	; 0x292
 800b08a:	4a0a      	ldr	r2, [pc, #40]	; (800b0b4 <Custom_STM_App_Update_Char+0x224>)
 800b08c:	480a      	ldr	r0, [pc, #40]	; (800b0b8 <Custom_STM_App_Update_Char+0x228>)
 800b08e:	f000 fdbb 	bl	800bc08 <iprintf>
 800b092:	4817      	ldr	r0, [pc, #92]	; (800b0f0 <Custom_STM_App_Update_Char+0x260>)
 800b094:	f000 fdb8 	bl	800bc08 <iprintf>
      break;
 800b098:	e000      	b.n	800b09c <Custom_STM_App_Update_Char+0x20c>

    default:
      break;
 800b09a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20001528 	.word	0x20001528
 800b0ac:	20000033 	.word	0x20000033
 800b0b0:	0800db9c 	.word	0x0800db9c
 800b0b4:	0800e4a8 	.word	0x0800e4a8
 800b0b8:	0800dbbc 	.word	0x0800dbbc
 800b0bc:	0800df28 	.word	0x0800df28
 800b0c0:	0800df70 	.word	0x0800df70
 800b0c4:	20000034 	.word	0x20000034
 800b0c8:	0800dfa8 	.word	0x0800dfa8
 800b0cc:	0800dff4 	.word	0x0800dff4
 800b0d0:	20000035 	.word	0x20000035
 800b0d4:	0800e030 	.word	0x0800e030
 800b0d8:	0800e078 	.word	0x0800e078
 800b0dc:	20000036 	.word	0x20000036
 800b0e0:	0800e0b0 	.word	0x0800e0b0
 800b0e4:	0800e0f8 	.word	0x0800e0f8
 800b0e8:	20000037 	.word	0x20000037
 800b0ec:	0800e130 	.word	0x0800e130
 800b0f0:	0800e17c 	.word	0x0800e17c

0800b0f4 <LL_PWR_EnableBootC2>:
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b0f8:	4b05      	ldr	r3, [pc, #20]	; (800b110 <LL_PWR_EnableBootC2+0x1c>)
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	4a04      	ldr	r2, [pc, #16]	; (800b110 <LL_PWR_EnableBootC2+0x1c>)
 800b0fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b102:	60d3      	str	r3, [r2, #12]
}
 800b104:	bf00      	nop
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	58000400 	.word	0x58000400

0800b114 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b11c:	4b06      	ldr	r3, [pc, #24]	; (800b138 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b11e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b122:	4905      	ldr	r1, [pc, #20]	; (800b138 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4313      	orrs	r3, r2
 800b128:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	58000800 	.word	0x58000800

0800b13c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b144:	4b05      	ldr	r3, [pc, #20]	; (800b15c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b146:	6a1a      	ldr	r2, [r3, #32]
 800b148:	4904      	ldr	r1, [pc, #16]	; (800b15c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	620b      	str	r3, [r1, #32]
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	58000800 	.word	0x58000800

0800b160 <LL_AHB3_GRP1_EnableClock>:
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b16c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b16e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4313      	orrs	r3, r2
 800b176:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b17c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4013      	ands	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b184:	68fb      	ldr	r3, [r7, #12]
}
 800b186:	bf00      	nop
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b19a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b19e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b1a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b1ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
}
 800b1be:	bf00      	nop
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <LL_C1_IPCC_EnableIT_TXF>:
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	601a      	str	r2, [r3, #0]
}
 800b1de:	bf00      	nop
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <LL_C1_IPCC_EnableIT_RXO>:
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b083      	sub	sp, #12
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f043 0201 	orr.w	r2, r3, #1
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	601a      	str	r2, [r3, #0]
}
 800b1fe:	bf00      	nop
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685a      	ldr	r2, [r3, #4]
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	041b      	lsls	r3, r3, #16
 800b21c:	43db      	mvns	r3, r3
 800b21e:	401a      	ands	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	605a      	str	r2, [r3, #4]
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	041b      	lsls	r3, r3, #16
 800b242:	431a      	orrs	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	605a      	str	r2, [r3, #4]
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	43db      	mvns	r3, r3
 800b266:	401a      	ands	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	605a      	str	r2, [r3, #4]
}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	609a      	str	r2, [r3, #8]
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <LL_C1_IPCC_SetFlag_CHx>:
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	041a      	lsls	r2, r3, #16
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	609a      	str	r2, [r3, #8]
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68da      	ldr	r2, [r3, #12]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d101      	bne.n	800b2ce <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e000      	b.n	800b2d0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	69da      	ldr	r2, [r3, #28]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d101      	bne.n	800b2f8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e000      	b.n	800b2fa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
	...

0800b308 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b30c:	2102      	movs	r1, #2
 800b30e:	4818      	ldr	r0, [pc, #96]	; (800b370 <HW_IPCC_Rx_Handler+0x68>)
 800b310:	f7ff ffe4 	bl	800b2dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d008      	beq.n	800b32c <HW_IPCC_Rx_Handler+0x24>
 800b31a:	4b15      	ldr	r3, [pc, #84]	; (800b370 <HW_IPCC_Rx_Handler+0x68>)
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f003 0302 	and.w	r3, r3, #2
 800b322:	2b00      	cmp	r3, #0
 800b324:	d102      	bne.n	800b32c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800b326:	f000 f8d5 	bl	800b4d4 <HW_IPCC_SYS_EvtHandler>
 800b32a:	e01e      	b.n	800b36a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b32c:	2101      	movs	r1, #1
 800b32e:	4810      	ldr	r0, [pc, #64]	; (800b370 <HW_IPCC_Rx_Handler+0x68>)
 800b330:	f7ff ffd4 	bl	800b2dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d008      	beq.n	800b34c <HW_IPCC_Rx_Handler+0x44>
 800b33a:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <HW_IPCC_Rx_Handler+0x68>)
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	d102      	bne.n	800b34c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800b346:	f000 f889 	bl	800b45c <HW_IPCC_BLE_EvtHandler>
 800b34a:	e00e      	b.n	800b36a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b34c:	2108      	movs	r1, #8
 800b34e:	4808      	ldr	r0, [pc, #32]	; (800b370 <HW_IPCC_Rx_Handler+0x68>)
 800b350:	f7ff ffc4 	bl	800b2dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d008      	beq.n	800b36c <HW_IPCC_Rx_Handler+0x64>
 800b35a:	4b05      	ldr	r3, [pc, #20]	; (800b370 <HW_IPCC_Rx_Handler+0x68>)
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f003 0308 	and.w	r3, r3, #8
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b366:	f000 f901 	bl	800b56c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b36a:	bf00      	nop
 800b36c:	bf00      	nop
}
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	58000c00 	.word	0x58000c00

0800b374 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b378:	2102      	movs	r1, #2
 800b37a:	4818      	ldr	r0, [pc, #96]	; (800b3dc <HW_IPCC_Tx_Handler+0x68>)
 800b37c:	f7ff ff99 	bl	800b2b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d108      	bne.n	800b398 <HW_IPCC_Tx_Handler+0x24>
 800b386:	4b15      	ldr	r3, [pc, #84]	; (800b3dc <HW_IPCC_Tx_Handler+0x68>)
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d102      	bne.n	800b398 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b392:	f000 f893 	bl	800b4bc <HW_IPCC_SYS_CmdEvtHandler>
 800b396:	e01e      	b.n	800b3d6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b398:	2108      	movs	r1, #8
 800b39a:	4810      	ldr	r0, [pc, #64]	; (800b3dc <HW_IPCC_Tx_Handler+0x68>)
 800b39c:	f7ff ff89 	bl	800b2b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d108      	bne.n	800b3b8 <HW_IPCC_Tx_Handler+0x44>
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	; (800b3dc <HW_IPCC_Tx_Handler+0x68>)
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b3b2:	f000 f8bd 	bl	800b530 <HW_IPCC_MM_FreeBufHandler>
 800b3b6:	e00e      	b.n	800b3d6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b3b8:	2120      	movs	r1, #32
 800b3ba:	4808      	ldr	r0, [pc, #32]	; (800b3dc <HW_IPCC_Tx_Handler+0x68>)
 800b3bc:	f7ff ff79 	bl	800b2b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d108      	bne.n	800b3d8 <HW_IPCC_Tx_Handler+0x64>
 800b3c6:	4b05      	ldr	r3, [pc, #20]	; (800b3dc <HW_IPCC_Tx_Handler+0x68>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d102      	bne.n	800b3d8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b3d2:	f000 f84f 	bl	800b474 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b3d6:	bf00      	nop
 800b3d8:	bf00      	nop
}
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	58000c00 	.word	0x58000c00

0800b3e0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b3e4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b3e8:	f7ff fed3 	bl	800b192 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b3ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b3f0:	f7ff fea4 	bl	800b13c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b3f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b3f8:	f7ff fe8c 	bl	800b114 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b3fc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b3fe:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b400:	f7ff fe78 	bl	800b0f4 <LL_PWR_EnableBootC2>

  return;
 800b404:	bf00      	nop
}
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b40c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b410:	f7ff fea6 	bl	800b160 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b414:	4806      	ldr	r0, [pc, #24]	; (800b430 <HW_IPCC_Init+0x28>)
 800b416:	f7ff fee8 	bl	800b1ea <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b41a:	4805      	ldr	r0, [pc, #20]	; (800b430 <HW_IPCC_Init+0x28>)
 800b41c:	f7ff fed5 	bl	800b1ca <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b420:	202c      	movs	r0, #44	; 0x2c
 800b422:	f7f7 fe86 	bl	8003132 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b426:	202d      	movs	r0, #45	; 0x2d
 800b428:	f7f7 fe83 	bl	8003132 <HAL_NVIC_EnableIRQ>

  return;
 800b42c:	bf00      	nop
}
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	58000c00 	.word	0x58000c00

0800b434 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b438:	2101      	movs	r1, #1
 800b43a:	4802      	ldr	r0, [pc, #8]	; (800b444 <HW_IPCC_BLE_Init+0x10>)
 800b43c:	f7ff ff0a 	bl	800b254 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b440:	bf00      	nop
}
 800b442:	bd80      	pop	{r7, pc}
 800b444:	58000c00 	.word	0x58000c00

0800b448 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 800b44c:	2101      	movs	r1, #1
 800b44e:	4802      	ldr	r0, [pc, #8]	; (800b458 <HW_IPCC_BLE_SendCmd+0x10>)
 800b450:	f7ff ff20 	bl	800b294 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b454:	bf00      	nop
}
 800b456:	bd80      	pop	{r7, pc}
 800b458:	58000c00 	.word	0x58000c00

0800b45c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b460:	f7fd fa3a 	bl	80088d8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b464:	2101      	movs	r1, #1
 800b466:	4802      	ldr	r0, [pc, #8]	; (800b470 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b468:	f7ff ff06 	bl	800b278 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b46c:	bf00      	nop
}
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	58000c00 	.word	0x58000c00

0800b474 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b478:	2120      	movs	r1, #32
 800b47a:	4803      	ldr	r0, [pc, #12]	; (800b488 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b47c:	f7ff fed8 	bl	800b230 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b480:	f7fd fa5a 	bl	8008938 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b484:	bf00      	nop
}
 800b486:	bd80      	pop	{r7, pc}
 800b488:	58000c00 	.word	0x58000c00

0800b48c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b490:	2102      	movs	r1, #2
 800b492:	4802      	ldr	r0, [pc, #8]	; (800b49c <HW_IPCC_SYS_Init+0x10>)
 800b494:	f7ff fede 	bl	800b254 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b498:	bf00      	nop
}
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	58000c00 	.word	0x58000c00

0800b4a0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b4a4:	2102      	movs	r1, #2
 800b4a6:	4804      	ldr	r0, [pc, #16]	; (800b4b8 <HW_IPCC_SYS_SendCmd+0x18>)
 800b4a8:	f7ff fef4 	bl	800b294 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b4ac:	2102      	movs	r1, #2
 800b4ae:	4802      	ldr	r0, [pc, #8]	; (800b4b8 <HW_IPCC_SYS_SendCmd+0x18>)
 800b4b0:	f7ff feab 	bl	800b20a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b4b4:	bf00      	nop
}
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	58000c00 	.word	0x58000c00

0800b4bc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b4c0:	2102      	movs	r1, #2
 800b4c2:	4803      	ldr	r0, [pc, #12]	; (800b4d0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b4c4:	f7ff feb4 	bl	800b230 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b4c8:	f7fd fa86 	bl	80089d8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b4cc:	bf00      	nop
}
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	58000c00 	.word	0x58000c00

0800b4d4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b4d8:	f7fd fa94 	bl	8008a04 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b4dc:	2102      	movs	r1, #2
 800b4de:	4802      	ldr	r0, [pc, #8]	; (800b4e8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b4e0:	f7ff feca 	bl	800b278 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b4e4:	bf00      	nop
}
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	58000c00 	.word	0x58000c00

0800b4ec <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b4f4:	2108      	movs	r1, #8
 800b4f6:	480c      	ldr	r0, [pc, #48]	; (800b528 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b4f8:	f7ff fedb 	bl	800b2b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d007      	beq.n	800b512 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b502:	4a0a      	ldr	r2, [pc, #40]	; (800b52c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b508:	2108      	movs	r1, #8
 800b50a:	4807      	ldr	r0, [pc, #28]	; (800b528 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b50c:	f7ff fe7d 	bl	800b20a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b510:	e006      	b.n	800b520 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b516:	2108      	movs	r1, #8
 800b518:	4803      	ldr	r0, [pc, #12]	; (800b528 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b51a:	f7ff febb 	bl	800b294 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b51e:	bf00      	nop
}
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	58000c00 	.word	0x58000c00
 800b52c:	20001538 	.word	0x20001538

0800b530 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b534:	2108      	movs	r1, #8
 800b536:	4806      	ldr	r0, [pc, #24]	; (800b550 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b538:	f7ff fe7a 	bl	800b230 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b53c:	4b05      	ldr	r3, [pc, #20]	; (800b554 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b542:	2108      	movs	r1, #8
 800b544:	4802      	ldr	r0, [pc, #8]	; (800b550 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b546:	f7ff fea5 	bl	800b294 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b54a:	bf00      	nop
}
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	58000c00 	.word	0x58000c00
 800b554:	20001538 	.word	0x20001538

0800b558 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b55c:	2108      	movs	r1, #8
 800b55e:	4802      	ldr	r0, [pc, #8]	; (800b568 <HW_IPCC_TRACES_Init+0x10>)
 800b560:	f7ff fe78 	bl	800b254 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b564:	bf00      	nop
}
 800b566:	bd80      	pop	{r7, pc}
 800b568:	58000c00 	.word	0x58000c00

0800b56c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b570:	f7fd faf0 	bl	8008b54 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b574:	2108      	movs	r1, #8
 800b576:	4802      	ldr	r0, [pc, #8]	; (800b580 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b578:	f7ff fe7e 	bl	800b278 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b57c:	bf00      	nop
}
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	58000c00 	.word	0x58000c00

0800b584 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <UTIL_LPM_Init+0x1c>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b58e:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <UTIL_LPM_Init+0x20>)
 800b590:	2200      	movs	r2, #0
 800b592:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b594:	bf00      	nop
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	2000153c 	.word	0x2000153c
 800b5a4:	20001540 	.word	0x20001540

0800b5a8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b8:	613b      	str	r3, [r7, #16]
  return(result);
 800b5ba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b5bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5be:	b672      	cpsid	i
}
 800b5c0:	bf00      	nop
  
  switch(state)
 800b5c2:	78fb      	ldrb	r3, [r7, #3]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d008      	beq.n	800b5da <UTIL_LPM_SetOffMode+0x32>
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d10e      	bne.n	800b5ea <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b5cc:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <UTIL_LPM_SetOffMode+0x5c>)
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	4a0b      	ldr	r2, [pc, #44]	; (800b604 <UTIL_LPM_SetOffMode+0x5c>)
 800b5d6:	6013      	str	r3, [r2, #0]
      break;
 800b5d8:	e008      	b.n	800b5ec <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	43da      	mvns	r2, r3
 800b5de:	4b09      	ldr	r3, [pc, #36]	; (800b604 <UTIL_LPM_SetOffMode+0x5c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	4a07      	ldr	r2, [pc, #28]	; (800b604 <UTIL_LPM_SetOffMode+0x5c>)
 800b5e6:	6013      	str	r3, [r2, #0]
      break;
 800b5e8:	e000      	b.n	800b5ec <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b5ea:	bf00      	nop
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f383 8810 	msr	PRIMASK, r3
}
 800b5f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b5f8:	bf00      	nop
 800b5fa:	371c      	adds	r7, #28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	20001540 	.word	0x20001540

0800b608 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b090      	sub	sp, #64	; 0x40
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b610:	4b73      	ldr	r3, [pc, #460]	; (800b7e0 <UTIL_SEQ_Run+0x1d8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b616:	4b72      	ldr	r3, [pc, #456]	; (800b7e0 <UTIL_SEQ_Run+0x1d8>)
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4013      	ands	r3, r2
 800b61e:	4a70      	ldr	r2, [pc, #448]	; (800b7e0 <UTIL_SEQ_Run+0x1d8>)
 800b620:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b622:	4b70      	ldr	r3, [pc, #448]	; (800b7e4 <UTIL_SEQ_Run+0x1dc>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b628:	4b6f      	ldr	r3, [pc, #444]	; (800b7e8 <UTIL_SEQ_Run+0x1e0>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b62e:	4b6f      	ldr	r3, [pc, #444]	; (800b7ec <UTIL_SEQ_Run+0x1e4>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b634:	4b6e      	ldr	r3, [pc, #440]	; (800b7f0 <UTIL_SEQ_Run+0x1e8>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b63a:	e08d      	b.n	800b758 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b640:	e002      	b.n	800b648 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b644:	3301      	adds	r3, #1
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b648:	4a6a      	ldr	r2, [pc, #424]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b64c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	401a      	ands	r2, r3
 800b654:	4b62      	ldr	r3, [pc, #392]	; (800b7e0 <UTIL_SEQ_Run+0x1d8>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4013      	ands	r3, r2
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0f1      	beq.n	800b642 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b65e:	4a65      	ldr	r2, [pc, #404]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b662:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	401a      	ands	r2, r3
 800b66a:	4b5d      	ldr	r3, [pc, #372]	; (800b7e0 <UTIL_SEQ_Run+0x1d8>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4013      	ands	r3, r2
 800b670:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b672:	4a60      	ldr	r2, [pc, #384]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	4413      	add	r3, r2
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	4013      	ands	r3, r2
 800b680:	2b00      	cmp	r3, #0
 800b682:	d106      	bne.n	800b692 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b684:	4a5b      	ldr	r2, [pc, #364]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b688:	00db      	lsls	r3, r3, #3
 800b68a:	4413      	add	r3, r2
 800b68c:	f04f 32ff 	mov.w	r2, #4294967295
 800b690:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b692:	4a58      	ldr	r2, [pc, #352]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	4413      	add	r3, r2
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	4013      	ands	r3, r2
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f9b3 	bl	800ba0c <SEQ_BitPosition>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4b53      	ldr	r3, [pc, #332]	; (800b7f8 <UTIL_SEQ_Run+0x1f0>)
 800b6ac:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b6ae:	4a51      	ldr	r2, [pc, #324]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	4413      	add	r3, r2
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	4b4f      	ldr	r3, [pc, #316]	; (800b7f8 <UTIL_SEQ_Run+0x1f0>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2101      	movs	r1, #1
 800b6be:	fa01 f303 	lsl.w	r3, r1, r3
 800b6c2:	43db      	mvns	r3, r3
 800b6c4:	401a      	ands	r2, r3
 800b6c6:	494b      	ldr	r1, [pc, #300]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	440b      	add	r3, r1
 800b6ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b6d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b6d6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b6d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6da:	b672      	cpsid	i
}
 800b6dc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b6de:	4b46      	ldr	r3, [pc, #280]	; (800b7f8 <UTIL_SEQ_Run+0x1f0>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e8:	43da      	mvns	r2, r3
 800b6ea:	4b3e      	ldr	r3, [pc, #248]	; (800b7e4 <UTIL_SEQ_Run+0x1dc>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	4a3c      	ldr	r2, [pc, #240]	; (800b7e4 <UTIL_SEQ_Run+0x1dc>)
 800b6f2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6f8:	e013      	b.n	800b722 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	4a3d      	ldr	r2, [pc, #244]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b700:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b704:	4b3c      	ldr	r3, [pc, #240]	; (800b7f8 <UTIL_SEQ_Run+0x1f0>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2201      	movs	r2, #1
 800b70a:	fa02 f303 	lsl.w	r3, r2, r3
 800b70e:	43da      	mvns	r2, r3
 800b710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b712:	3b01      	subs	r3, #1
 800b714:	400a      	ands	r2, r1
 800b716:	4937      	ldr	r1, [pc, #220]	; (800b7f4 <UTIL_SEQ_Run+0x1ec>)
 800b718:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71e:	3b01      	subs	r3, #1
 800b720:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e8      	bne.n	800b6fa <UTIL_SEQ_Run+0xf2>
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f383 8810 	msr	PRIMASK, r3
}
 800b732:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b734:	4b30      	ldr	r3, [pc, #192]	; (800b7f8 <UTIL_SEQ_Run+0x1f0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a30      	ldr	r2, [pc, #192]	; (800b7fc <UTIL_SEQ_Run+0x1f4>)
 800b73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b73e:	4798      	blx	r3

    local_taskset = TaskSet;
 800b740:	4b28      	ldr	r3, [pc, #160]	; (800b7e4 <UTIL_SEQ_Run+0x1dc>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b746:	4b28      	ldr	r3, [pc, #160]	; (800b7e8 <UTIL_SEQ_Run+0x1e0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b74c:	4b27      	ldr	r3, [pc, #156]	; (800b7ec <UTIL_SEQ_Run+0x1e4>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b752:	4b27      	ldr	r3, [pc, #156]	; (800b7f0 <UTIL_SEQ_Run+0x1e8>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	401a      	ands	r2, r3
 800b75e:	4b20      	ldr	r3, [pc, #128]	; (800b7e0 <UTIL_SEQ_Run+0x1d8>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4013      	ands	r3, r2
 800b764:	2b00      	cmp	r3, #0
 800b766:	d005      	beq.n	800b774 <UTIL_SEQ_Run+0x16c>
 800b768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76c:	4013      	ands	r3, r2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f43f af64 	beq.w	800b63c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b774:	4b20      	ldr	r3, [pc, #128]	; (800b7f8 <UTIL_SEQ_Run+0x1f0>)
 800b776:	f04f 32ff 	mov.w	r2, #4294967295
 800b77a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b77c:	f000 f938 	bl	800b9f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b780:	f3ef 8310 	mrs	r3, PRIMASK
 800b784:	613b      	str	r3, [r7, #16]
  return(result);
 800b786:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b78a:	b672      	cpsid	i
}
 800b78c:	bf00      	nop
  local_taskset = TaskSet;
 800b78e:	4b15      	ldr	r3, [pc, #84]	; (800b7e4 <UTIL_SEQ_Run+0x1dc>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b794:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <UTIL_SEQ_Run+0x1e0>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b79a:	4b14      	ldr	r3, [pc, #80]	; (800b7ec <UTIL_SEQ_Run+0x1e4>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b7a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	401a      	ands	r2, r3
 800b7a6:	4b0e      	ldr	r3, [pc, #56]	; (800b7e0 <UTIL_SEQ_Run+0x1d8>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d107      	bne.n	800b7c0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b7b0:	4b0f      	ldr	r3, [pc, #60]	; (800b7f0 <UTIL_SEQ_Run+0x1e8>)
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b7bc:	f7f5 ff66 	bl	800168c <UTIL_SEQ_Idle>
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f383 8810 	msr	PRIMASK, r3
}
 800b7ca:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b7cc:	f000 f917 	bl	800b9fe <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b7d0:	4a03      	ldr	r2, [pc, #12]	; (800b7e0 <UTIL_SEQ_Run+0x1d8>)
 800b7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d4:	6013      	str	r3, [r2, #0]

  return;
 800b7d6:	bf00      	nop
}
 800b7d8:	3740      	adds	r7, #64	; 0x40
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	2000003c 	.word	0x2000003c
 800b7e4:	20001544 	.word	0x20001544
 800b7e8:	20001548 	.word	0x20001548
 800b7ec:	20000038 	.word	0x20000038
 800b7f0:	2000154c 	.word	0x2000154c
 800b7f4:	200015d4 	.word	0x200015d4
 800b7f8:	20001550 	.word	0x20001550
 800b7fc:	20001554 	.word	0x20001554

0800b800 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b80c:	f3ef 8310 	mrs	r3, PRIMASK
 800b810:	617b      	str	r3, [r7, #20]
  return(result);
 800b812:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b816:	b672      	cpsid	i
}
 800b818:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 f8f6 	bl	800ba0c <SEQ_BitPosition>
 800b820:	4603      	mov	r3, r0
 800b822:	4619      	mov	r1, r3
 800b824:	4a06      	ldr	r2, [pc, #24]	; (800b840 <UTIL_SEQ_RegTask+0x40>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	f383 8810 	msr	PRIMASK, r3
}
 800b836:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b838:	bf00      	nop
}
 800b83a:	3720      	adds	r7, #32
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20001554 	.word	0x20001554

0800b844 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b844:	b480      	push	{r7}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b84e:	f3ef 8310 	mrs	r3, PRIMASK
 800b852:	60fb      	str	r3, [r7, #12]
  return(result);
 800b854:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b858:	b672      	cpsid	i
}
 800b85a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <UTIL_SEQ_SetTask+0x50>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4313      	orrs	r3, r2
 800b864:	4a0b      	ldr	r2, [pc, #44]	; (800b894 <UTIL_SEQ_SetTask+0x50>)
 800b866:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b868:	4a0b      	ldr	r2, [pc, #44]	; (800b898 <UTIL_SEQ_SetTask+0x54>)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	431a      	orrs	r2, r3
 800b874:	4908      	ldr	r1, [pc, #32]	; (800b898 <UTIL_SEQ_SetTask+0x54>)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f383 8810 	msr	PRIMASK, r3
}
 800b886:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b888:	bf00      	nop
}
 800b88a:	371c      	adds	r7, #28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	20001544 	.word	0x20001544
 800b898:	200015d4 	.word	0x200015d4

0800b89c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b8ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8ae:	b672      	cpsid	i
}
 800b8b0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	43da      	mvns	r2, r3
 800b8b6:	4b08      	ldr	r3, [pc, #32]	; (800b8d8 <UTIL_SEQ_PauseTask+0x3c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	4a06      	ldr	r2, [pc, #24]	; (800b8d8 <UTIL_SEQ_PauseTask+0x3c>)
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	f383 8810 	msr	PRIMASK, r3
}
 800b8ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b8cc:	bf00      	nop
}
 800b8ce:	371c      	adds	r7, #28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	20000038 	.word	0x20000038

0800b8dc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b8ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8ee:	b672      	cpsid	i
}
 800b8f0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b8f2:	4b09      	ldr	r3, [pc, #36]	; (800b918 <UTIL_SEQ_ResumeTask+0x3c>)
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	4a07      	ldr	r2, [pc, #28]	; (800b918 <UTIL_SEQ_ResumeTask+0x3c>)
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f383 8810 	msr	PRIMASK, r3
}
 800b908:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b90a:	bf00      	nop
}
 800b90c:	371c      	adds	r7, #28
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	20000038 	.word	0x20000038

0800b91c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b924:	f3ef 8310 	mrs	r3, PRIMASK
 800b928:	60fb      	str	r3, [r7, #12]
  return(result);
 800b92a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b92c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b92e:	b672      	cpsid	i
}
 800b930:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b932:	4b09      	ldr	r3, [pc, #36]	; (800b958 <UTIL_SEQ_SetEvt+0x3c>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4313      	orrs	r3, r2
 800b93a:	4a07      	ldr	r2, [pc, #28]	; (800b958 <UTIL_SEQ_SetEvt+0x3c>)
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f383 8810 	msr	PRIMASK, r3
}
 800b948:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b94a:	bf00      	nop
}
 800b94c:	371c      	adds	r7, #28
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	20001548 	.word	0x20001548

0800b95c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b964:	4b1f      	ldr	r3, [pc, #124]	; (800b9e4 <UTIL_SEQ_WaitEvt+0x88>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b96a:	4b1e      	ldr	r3, [pc, #120]	; (800b9e4 <UTIL_SEQ_WaitEvt+0x88>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b972:	d102      	bne.n	800b97a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b974:	2300      	movs	r3, #0
 800b976:	61fb      	str	r3, [r7, #28]
 800b978:	e005      	b.n	800b986 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b97a:	4b1a      	ldr	r3, [pc, #104]	; (800b9e4 <UTIL_SEQ_WaitEvt+0x88>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2201      	movs	r2, #1
 800b980:	fa02 f303 	lsl.w	r3, r2, r3
 800b984:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b986:	4b18      	ldr	r3, [pc, #96]	; (800b9e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b98c:	4a16      	ldr	r2, [pc, #88]	; (800b9e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b992:	e003      	b.n	800b99c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b994:	6879      	ldr	r1, [r7, #4]
 800b996:	69f8      	ldr	r0, [r7, #28]
 800b998:	f7f5 fe7f 	bl	800169a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b99c:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <UTIL_SEQ_WaitEvt+0x90>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d0f5      	beq.n	800b994 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b9a8:	4a0e      	ldr	r2, [pc, #56]	; (800b9e4 <UTIL_SEQ_WaitEvt+0x88>)
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9b4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b9b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9b8:	b672      	cpsid	i
}
 800b9ba:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	43da      	mvns	r2, r3
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <UTIL_SEQ_WaitEvt+0x90>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	4a09      	ldr	r2, [pc, #36]	; (800b9ec <UTIL_SEQ_WaitEvt+0x90>)
 800b9c8:	6013      	str	r3, [r2, #0]
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f383 8810 	msr	PRIMASK, r3
}
 800b9d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b9d6:	4a04      	ldr	r2, [pc, #16]	; (800b9e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	6013      	str	r3, [r2, #0]
  return;
 800b9dc:	bf00      	nop
}
 800b9de:	3720      	adds	r7, #32
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20001550 	.word	0x20001550
 800b9e8:	2000154c 	.word	0x2000154c
 800b9ec:	20001548 	.word	0x20001548

0800b9f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b9f4:	bf00      	nop
}
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b9fe:	b480      	push	{r7}
 800ba00:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ba02:	bf00      	nop
}
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	0c1b      	lsrs	r3, r3, #16
 800ba20:	041b      	lsls	r3, r3, #16
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d104      	bne.n	800ba30 <SEQ_BitPosition+0x24>
 800ba26:	2310      	movs	r3, #16
 800ba28:	73fb      	strb	r3, [r7, #15]
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	041b      	lsls	r3, r3, #16
 800ba2e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d105      	bne.n	800ba46 <SEQ_BitPosition+0x3a>
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
 800ba3c:	3308      	adds	r3, #8
 800ba3e:	73fb      	strb	r3, [r7, #15]
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	021b      	lsls	r3, r3, #8
 800ba44:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d105      	bne.n	800ba5c <SEQ_BitPosition+0x50>
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	3304      	adds	r3, #4
 800ba54:	73fb      	strb	r3, [r7, #15]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	011b      	lsls	r3, r3, #4
 800ba5a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	0f1b      	lsrs	r3, r3, #28
 800ba60:	4a07      	ldr	r2, [pc, #28]	; (800ba80 <SEQ_BitPosition+0x74>)
 800ba62:	5cd2      	ldrb	r2, [r2, r3]
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
 800ba66:	4413      	add	r3, r2
 800ba68:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ba6a:	7bfb      	ldrb	r3, [r7, #15]
 800ba6c:	f1c3 031f 	rsb	r3, r3, #31
 800ba70:	b2db      	uxtb	r3, r3
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	0800e4c4 	.word	0x0800e4c4

0800ba84 <std>:
 800ba84:	2300      	movs	r3, #0
 800ba86:	b510      	push	{r4, lr}
 800ba88:	4604      	mov	r4, r0
 800ba8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba92:	6083      	str	r3, [r0, #8]
 800ba94:	8181      	strh	r1, [r0, #12]
 800ba96:	6643      	str	r3, [r0, #100]	; 0x64
 800ba98:	81c2      	strh	r2, [r0, #14]
 800ba9a:	6183      	str	r3, [r0, #24]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	2208      	movs	r2, #8
 800baa0:	305c      	adds	r0, #92	; 0x5c
 800baa2:	f000 f9ff 	bl	800bea4 <memset>
 800baa6:	4b0d      	ldr	r3, [pc, #52]	; (800badc <std+0x58>)
 800baa8:	6263      	str	r3, [r4, #36]	; 0x24
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <std+0x5c>)
 800baac:	62a3      	str	r3, [r4, #40]	; 0x28
 800baae:	4b0d      	ldr	r3, [pc, #52]	; (800bae4 <std+0x60>)
 800bab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bab2:	4b0d      	ldr	r3, [pc, #52]	; (800bae8 <std+0x64>)
 800bab4:	6323      	str	r3, [r4, #48]	; 0x30
 800bab6:	4b0d      	ldr	r3, [pc, #52]	; (800baec <std+0x68>)
 800bab8:	6224      	str	r4, [r4, #32]
 800baba:	429c      	cmp	r4, r3
 800babc:	d006      	beq.n	800bacc <std+0x48>
 800babe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bac2:	4294      	cmp	r4, r2
 800bac4:	d002      	beq.n	800bacc <std+0x48>
 800bac6:	33d0      	adds	r3, #208	; 0xd0
 800bac8:	429c      	cmp	r4, r3
 800baca:	d105      	bne.n	800bad8 <std+0x54>
 800bacc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bad4:	f000 ba76 	b.w	800bfc4 <__retarget_lock_init_recursive>
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	bf00      	nop
 800badc:	0800bcf5 	.word	0x0800bcf5
 800bae0:	0800bd17 	.word	0x0800bd17
 800bae4:	0800bd4f 	.word	0x0800bd4f
 800bae8:	0800bd73 	.word	0x0800bd73
 800baec:	200015e4 	.word	0x200015e4

0800baf0 <stdio_exit_handler>:
 800baf0:	4a02      	ldr	r2, [pc, #8]	; (800bafc <stdio_exit_handler+0xc>)
 800baf2:	4903      	ldr	r1, [pc, #12]	; (800bb00 <stdio_exit_handler+0x10>)
 800baf4:	4803      	ldr	r0, [pc, #12]	; (800bb04 <stdio_exit_handler+0x14>)
 800baf6:	f000 b869 	b.w	800bbcc <_fwalk_sglue>
 800bafa:	bf00      	nop
 800bafc:	20000040 	.word	0x20000040
 800bb00:	0800c88d 	.word	0x0800c88d
 800bb04:	2000004c 	.word	0x2000004c

0800bb08 <cleanup_stdio>:
 800bb08:	6841      	ldr	r1, [r0, #4]
 800bb0a:	4b0c      	ldr	r3, [pc, #48]	; (800bb3c <cleanup_stdio+0x34>)
 800bb0c:	4299      	cmp	r1, r3
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	4604      	mov	r4, r0
 800bb12:	d001      	beq.n	800bb18 <cleanup_stdio+0x10>
 800bb14:	f000 feba 	bl	800c88c <_fflush_r>
 800bb18:	68a1      	ldr	r1, [r4, #8]
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <cleanup_stdio+0x38>)
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	d002      	beq.n	800bb26 <cleanup_stdio+0x1e>
 800bb20:	4620      	mov	r0, r4
 800bb22:	f000 feb3 	bl	800c88c <_fflush_r>
 800bb26:	68e1      	ldr	r1, [r4, #12]
 800bb28:	4b06      	ldr	r3, [pc, #24]	; (800bb44 <cleanup_stdio+0x3c>)
 800bb2a:	4299      	cmp	r1, r3
 800bb2c:	d004      	beq.n	800bb38 <cleanup_stdio+0x30>
 800bb2e:	4620      	mov	r0, r4
 800bb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb34:	f000 beaa 	b.w	800c88c <_fflush_r>
 800bb38:	bd10      	pop	{r4, pc}
 800bb3a:	bf00      	nop
 800bb3c:	200015e4 	.word	0x200015e4
 800bb40:	2000164c 	.word	0x2000164c
 800bb44:	200016b4 	.word	0x200016b4

0800bb48 <global_stdio_init.part.0>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	4b0b      	ldr	r3, [pc, #44]	; (800bb78 <global_stdio_init.part.0+0x30>)
 800bb4c:	4c0b      	ldr	r4, [pc, #44]	; (800bb7c <global_stdio_init.part.0+0x34>)
 800bb4e:	4a0c      	ldr	r2, [pc, #48]	; (800bb80 <global_stdio_init.part.0+0x38>)
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	4620      	mov	r0, r4
 800bb54:	2200      	movs	r2, #0
 800bb56:	2104      	movs	r1, #4
 800bb58:	f7ff ff94 	bl	800ba84 <std>
 800bb5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bb60:	2201      	movs	r2, #1
 800bb62:	2109      	movs	r1, #9
 800bb64:	f7ff ff8e 	bl	800ba84 <std>
 800bb68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb72:	2112      	movs	r1, #18
 800bb74:	f7ff bf86 	b.w	800ba84 <std>
 800bb78:	2000171c 	.word	0x2000171c
 800bb7c:	200015e4 	.word	0x200015e4
 800bb80:	0800baf1 	.word	0x0800baf1

0800bb84 <__sfp_lock_acquire>:
 800bb84:	4801      	ldr	r0, [pc, #4]	; (800bb8c <__sfp_lock_acquire+0x8>)
 800bb86:	f000 ba1e 	b.w	800bfc6 <__retarget_lock_acquire_recursive>
 800bb8a:	bf00      	nop
 800bb8c:	20001725 	.word	0x20001725

0800bb90 <__sfp_lock_release>:
 800bb90:	4801      	ldr	r0, [pc, #4]	; (800bb98 <__sfp_lock_release+0x8>)
 800bb92:	f000 ba19 	b.w	800bfc8 <__retarget_lock_release_recursive>
 800bb96:	bf00      	nop
 800bb98:	20001725 	.word	0x20001725

0800bb9c <__sinit>:
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	4604      	mov	r4, r0
 800bba0:	f7ff fff0 	bl	800bb84 <__sfp_lock_acquire>
 800bba4:	6a23      	ldr	r3, [r4, #32]
 800bba6:	b11b      	cbz	r3, 800bbb0 <__sinit+0x14>
 800bba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbac:	f7ff bff0 	b.w	800bb90 <__sfp_lock_release>
 800bbb0:	4b04      	ldr	r3, [pc, #16]	; (800bbc4 <__sinit+0x28>)
 800bbb2:	6223      	str	r3, [r4, #32]
 800bbb4:	4b04      	ldr	r3, [pc, #16]	; (800bbc8 <__sinit+0x2c>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1f5      	bne.n	800bba8 <__sinit+0xc>
 800bbbc:	f7ff ffc4 	bl	800bb48 <global_stdio_init.part.0>
 800bbc0:	e7f2      	b.n	800bba8 <__sinit+0xc>
 800bbc2:	bf00      	nop
 800bbc4:	0800bb09 	.word	0x0800bb09
 800bbc8:	2000171c 	.word	0x2000171c

0800bbcc <_fwalk_sglue>:
 800bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	4688      	mov	r8, r1
 800bbd4:	4614      	mov	r4, r2
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbdc:	f1b9 0901 	subs.w	r9, r9, #1
 800bbe0:	d505      	bpl.n	800bbee <_fwalk_sglue+0x22>
 800bbe2:	6824      	ldr	r4, [r4, #0]
 800bbe4:	2c00      	cmp	r4, #0
 800bbe6:	d1f7      	bne.n	800bbd8 <_fwalk_sglue+0xc>
 800bbe8:	4630      	mov	r0, r6
 800bbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d907      	bls.n	800bc04 <_fwalk_sglue+0x38>
 800bbf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	d003      	beq.n	800bc04 <_fwalk_sglue+0x38>
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	4638      	mov	r0, r7
 800bc00:	47c0      	blx	r8
 800bc02:	4306      	orrs	r6, r0
 800bc04:	3568      	adds	r5, #104	; 0x68
 800bc06:	e7e9      	b.n	800bbdc <_fwalk_sglue+0x10>

0800bc08 <iprintf>:
 800bc08:	b40f      	push	{r0, r1, r2, r3}
 800bc0a:	b507      	push	{r0, r1, r2, lr}
 800bc0c:	4906      	ldr	r1, [pc, #24]	; (800bc28 <iprintf+0x20>)
 800bc0e:	ab04      	add	r3, sp, #16
 800bc10:	6808      	ldr	r0, [r1, #0]
 800bc12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc16:	6881      	ldr	r1, [r0, #8]
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	f000 fb07 	bl	800c22c <_vfiprintf_r>
 800bc1e:	b003      	add	sp, #12
 800bc20:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc24:	b004      	add	sp, #16
 800bc26:	4770      	bx	lr
 800bc28:	20000098 	.word	0x20000098

0800bc2c <putchar>:
 800bc2c:	4b02      	ldr	r3, [pc, #8]	; (800bc38 <putchar+0xc>)
 800bc2e:	4601      	mov	r1, r0
 800bc30:	6818      	ldr	r0, [r3, #0]
 800bc32:	6882      	ldr	r2, [r0, #8]
 800bc34:	f000 beb4 	b.w	800c9a0 <_putc_r>
 800bc38:	20000098 	.word	0x20000098

0800bc3c <_puts_r>:
 800bc3c:	6a03      	ldr	r3, [r0, #32]
 800bc3e:	b570      	push	{r4, r5, r6, lr}
 800bc40:	6884      	ldr	r4, [r0, #8]
 800bc42:	4605      	mov	r5, r0
 800bc44:	460e      	mov	r6, r1
 800bc46:	b90b      	cbnz	r3, 800bc4c <_puts_r+0x10>
 800bc48:	f7ff ffa8 	bl	800bb9c <__sinit>
 800bc4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc4e:	07db      	lsls	r3, r3, #31
 800bc50:	d405      	bmi.n	800bc5e <_puts_r+0x22>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	0598      	lsls	r0, r3, #22
 800bc56:	d402      	bmi.n	800bc5e <_puts_r+0x22>
 800bc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc5a:	f000 f9b4 	bl	800bfc6 <__retarget_lock_acquire_recursive>
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	0719      	lsls	r1, r3, #28
 800bc62:	d513      	bpl.n	800bc8c <_puts_r+0x50>
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	b18b      	cbz	r3, 800bc8c <_puts_r+0x50>
 800bc68:	3e01      	subs	r6, #1
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc70:	3b01      	subs	r3, #1
 800bc72:	60a3      	str	r3, [r4, #8]
 800bc74:	b9e9      	cbnz	r1, 800bcb2 <_puts_r+0x76>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da2e      	bge.n	800bcd8 <_puts_r+0x9c>
 800bc7a:	4622      	mov	r2, r4
 800bc7c:	210a      	movs	r1, #10
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f87b 	bl	800bd7a <__swbuf_r>
 800bc84:	3001      	adds	r0, #1
 800bc86:	d007      	beq.n	800bc98 <_puts_r+0x5c>
 800bc88:	250a      	movs	r5, #10
 800bc8a:	e007      	b.n	800bc9c <_puts_r+0x60>
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f000 f8b0 	bl	800bdf4 <__swsetup_r>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d0e7      	beq.n	800bc68 <_puts_r+0x2c>
 800bc98:	f04f 35ff 	mov.w	r5, #4294967295
 800bc9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc9e:	07da      	lsls	r2, r3, #31
 800bca0:	d405      	bmi.n	800bcae <_puts_r+0x72>
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	059b      	lsls	r3, r3, #22
 800bca6:	d402      	bmi.n	800bcae <_puts_r+0x72>
 800bca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcaa:	f000 f98d 	bl	800bfc8 <__retarget_lock_release_recursive>
 800bcae:	4628      	mov	r0, r5
 800bcb0:	bd70      	pop	{r4, r5, r6, pc}
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	da04      	bge.n	800bcc0 <_puts_r+0x84>
 800bcb6:	69a2      	ldr	r2, [r4, #24]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	dc06      	bgt.n	800bcca <_puts_r+0x8e>
 800bcbc:	290a      	cmp	r1, #10
 800bcbe:	d004      	beq.n	800bcca <_puts_r+0x8e>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	6022      	str	r2, [r4, #0]
 800bcc6:	7019      	strb	r1, [r3, #0]
 800bcc8:	e7cf      	b.n	800bc6a <_puts_r+0x2e>
 800bcca:	4622      	mov	r2, r4
 800bccc:	4628      	mov	r0, r5
 800bcce:	f000 f854 	bl	800bd7a <__swbuf_r>
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d1c9      	bne.n	800bc6a <_puts_r+0x2e>
 800bcd6:	e7df      	b.n	800bc98 <_puts_r+0x5c>
 800bcd8:	6823      	ldr	r3, [r4, #0]
 800bcda:	250a      	movs	r5, #10
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	701d      	strb	r5, [r3, #0]
 800bce2:	e7db      	b.n	800bc9c <_puts_r+0x60>

0800bce4 <puts>:
 800bce4:	4b02      	ldr	r3, [pc, #8]	; (800bcf0 <puts+0xc>)
 800bce6:	4601      	mov	r1, r0
 800bce8:	6818      	ldr	r0, [r3, #0]
 800bcea:	f7ff bfa7 	b.w	800bc3c <_puts_r>
 800bcee:	bf00      	nop
 800bcf0:	20000098 	.word	0x20000098

0800bcf4 <__sread>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfc:	f000 f914 	bl	800bf28 <_read_r>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	bfab      	itete	ge
 800bd04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd06:	89a3      	ldrhlt	r3, [r4, #12]
 800bd08:	181b      	addge	r3, r3, r0
 800bd0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd0e:	bfac      	ite	ge
 800bd10:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd12:	81a3      	strhlt	r3, [r4, #12]
 800bd14:	bd10      	pop	{r4, pc}

0800bd16 <__swrite>:
 800bd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	898b      	ldrh	r3, [r1, #12]
 800bd1e:	05db      	lsls	r3, r3, #23
 800bd20:	4605      	mov	r5, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	4616      	mov	r6, r2
 800bd26:	d505      	bpl.n	800bd34 <__swrite+0x1e>
 800bd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f000 f8e8 	bl	800bf04 <_lseek_r>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	4632      	mov	r2, r6
 800bd42:	463b      	mov	r3, r7
 800bd44:	4628      	mov	r0, r5
 800bd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4a:	f000 b8ff 	b.w	800bf4c <_write_r>

0800bd4e <__sseek>:
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	460c      	mov	r4, r1
 800bd52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd56:	f000 f8d5 	bl	800bf04 <_lseek_r>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	bf15      	itete	ne
 800bd60:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd6a:	81a3      	strheq	r3, [r4, #12]
 800bd6c:	bf18      	it	ne
 800bd6e:	81a3      	strhne	r3, [r4, #12]
 800bd70:	bd10      	pop	{r4, pc}

0800bd72 <__sclose>:
 800bd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd76:	f000 b8b5 	b.w	800bee4 <_close_r>

0800bd7a <__swbuf_r>:
 800bd7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7c:	460e      	mov	r6, r1
 800bd7e:	4614      	mov	r4, r2
 800bd80:	4605      	mov	r5, r0
 800bd82:	b118      	cbz	r0, 800bd8c <__swbuf_r+0x12>
 800bd84:	6a03      	ldr	r3, [r0, #32]
 800bd86:	b90b      	cbnz	r3, 800bd8c <__swbuf_r+0x12>
 800bd88:	f7ff ff08 	bl	800bb9c <__sinit>
 800bd8c:	69a3      	ldr	r3, [r4, #24]
 800bd8e:	60a3      	str	r3, [r4, #8]
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	071a      	lsls	r2, r3, #28
 800bd94:	d525      	bpl.n	800bde2 <__swbuf_r+0x68>
 800bd96:	6923      	ldr	r3, [r4, #16]
 800bd98:	b31b      	cbz	r3, 800bde2 <__swbuf_r+0x68>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	6922      	ldr	r2, [r4, #16]
 800bd9e:	1a98      	subs	r0, r3, r2
 800bda0:	6963      	ldr	r3, [r4, #20]
 800bda2:	b2f6      	uxtb	r6, r6
 800bda4:	4283      	cmp	r3, r0
 800bda6:	4637      	mov	r7, r6
 800bda8:	dc04      	bgt.n	800bdb4 <__swbuf_r+0x3a>
 800bdaa:	4621      	mov	r1, r4
 800bdac:	4628      	mov	r0, r5
 800bdae:	f000 fd6d 	bl	800c88c <_fflush_r>
 800bdb2:	b9e0      	cbnz	r0, 800bdee <__swbuf_r+0x74>
 800bdb4:	68a3      	ldr	r3, [r4, #8]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	60a3      	str	r3, [r4, #8]
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	6022      	str	r2, [r4, #0]
 800bdc0:	701e      	strb	r6, [r3, #0]
 800bdc2:	6962      	ldr	r2, [r4, #20]
 800bdc4:	1c43      	adds	r3, r0, #1
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d004      	beq.n	800bdd4 <__swbuf_r+0x5a>
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	07db      	lsls	r3, r3, #31
 800bdce:	d506      	bpl.n	800bdde <__swbuf_r+0x64>
 800bdd0:	2e0a      	cmp	r6, #10
 800bdd2:	d104      	bne.n	800bdde <__swbuf_r+0x64>
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f000 fd58 	bl	800c88c <_fflush_r>
 800bddc:	b938      	cbnz	r0, 800bdee <__swbuf_r+0x74>
 800bdde:	4638      	mov	r0, r7
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde2:	4621      	mov	r1, r4
 800bde4:	4628      	mov	r0, r5
 800bde6:	f000 f805 	bl	800bdf4 <__swsetup_r>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d0d5      	beq.n	800bd9a <__swbuf_r+0x20>
 800bdee:	f04f 37ff 	mov.w	r7, #4294967295
 800bdf2:	e7f4      	b.n	800bdde <__swbuf_r+0x64>

0800bdf4 <__swsetup_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4b2a      	ldr	r3, [pc, #168]	; (800bea0 <__swsetup_r+0xac>)
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	b118      	cbz	r0, 800be08 <__swsetup_r+0x14>
 800be00:	6a03      	ldr	r3, [r0, #32]
 800be02:	b90b      	cbnz	r3, 800be08 <__swsetup_r+0x14>
 800be04:	f7ff feca 	bl	800bb9c <__sinit>
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be0e:	0718      	lsls	r0, r3, #28
 800be10:	d422      	bmi.n	800be58 <__swsetup_r+0x64>
 800be12:	06d9      	lsls	r1, r3, #27
 800be14:	d407      	bmi.n	800be26 <__swsetup_r+0x32>
 800be16:	2309      	movs	r3, #9
 800be18:	602b      	str	r3, [r5, #0]
 800be1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be1e:	81a3      	strh	r3, [r4, #12]
 800be20:	f04f 30ff 	mov.w	r0, #4294967295
 800be24:	e034      	b.n	800be90 <__swsetup_r+0x9c>
 800be26:	0758      	lsls	r0, r3, #29
 800be28:	d512      	bpl.n	800be50 <__swsetup_r+0x5c>
 800be2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be2c:	b141      	cbz	r1, 800be40 <__swsetup_r+0x4c>
 800be2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be32:	4299      	cmp	r1, r3
 800be34:	d002      	beq.n	800be3c <__swsetup_r+0x48>
 800be36:	4628      	mov	r0, r5
 800be38:	f000 f8d6 	bl	800bfe8 <_free_r>
 800be3c:	2300      	movs	r3, #0
 800be3e:	6363      	str	r3, [r4, #52]	; 0x34
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be46:	81a3      	strh	r3, [r4, #12]
 800be48:	2300      	movs	r3, #0
 800be4a:	6063      	str	r3, [r4, #4]
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	6023      	str	r3, [r4, #0]
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	f043 0308 	orr.w	r3, r3, #8
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	6923      	ldr	r3, [r4, #16]
 800be5a:	b94b      	cbnz	r3, 800be70 <__swsetup_r+0x7c>
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be66:	d003      	beq.n	800be70 <__swsetup_r+0x7c>
 800be68:	4621      	mov	r1, r4
 800be6a:	4628      	mov	r0, r5
 800be6c:	f000 fd5c 	bl	800c928 <__smakebuf_r>
 800be70:	89a0      	ldrh	r0, [r4, #12]
 800be72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be76:	f010 0301 	ands.w	r3, r0, #1
 800be7a:	d00a      	beq.n	800be92 <__swsetup_r+0x9e>
 800be7c:	2300      	movs	r3, #0
 800be7e:	60a3      	str	r3, [r4, #8]
 800be80:	6963      	ldr	r3, [r4, #20]
 800be82:	425b      	negs	r3, r3
 800be84:	61a3      	str	r3, [r4, #24]
 800be86:	6923      	ldr	r3, [r4, #16]
 800be88:	b943      	cbnz	r3, 800be9c <__swsetup_r+0xa8>
 800be8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be8e:	d1c4      	bne.n	800be1a <__swsetup_r+0x26>
 800be90:	bd38      	pop	{r3, r4, r5, pc}
 800be92:	0781      	lsls	r1, r0, #30
 800be94:	bf58      	it	pl
 800be96:	6963      	ldrpl	r3, [r4, #20]
 800be98:	60a3      	str	r3, [r4, #8]
 800be9a:	e7f4      	b.n	800be86 <__swsetup_r+0x92>
 800be9c:	2000      	movs	r0, #0
 800be9e:	e7f7      	b.n	800be90 <__swsetup_r+0x9c>
 800bea0:	20000098 	.word	0x20000098

0800bea4 <memset>:
 800bea4:	4402      	add	r2, r0
 800bea6:	4603      	mov	r3, r0
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d100      	bne.n	800beae <memset+0xa>
 800beac:	4770      	bx	lr
 800beae:	f803 1b01 	strb.w	r1, [r3], #1
 800beb2:	e7f9      	b.n	800bea8 <memset+0x4>

0800beb4 <strrchr>:
 800beb4:	b513      	push	{r0, r1, r4, lr}
 800beb6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800beba:	4603      	mov	r3, r0
 800bebc:	d110      	bne.n	800bee0 <strrchr+0x2c>
 800bebe:	b002      	add	sp, #8
 800bec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec4:	f000 bda0 	b.w	800ca08 <strchr>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	4604      	mov	r4, r0
 800becc:	4618      	mov	r0, r3
 800bece:	9101      	str	r1, [sp, #4]
 800bed0:	f000 fd9a 	bl	800ca08 <strchr>
 800bed4:	9901      	ldr	r1, [sp, #4]
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d1f6      	bne.n	800bec8 <strrchr+0x14>
 800beda:	4620      	mov	r0, r4
 800bedc:	b002      	add	sp, #8
 800bede:	bd10      	pop	{r4, pc}
 800bee0:	2400      	movs	r4, #0
 800bee2:	e7f3      	b.n	800becc <strrchr+0x18>

0800bee4 <_close_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d06      	ldr	r5, [pc, #24]	; (800bf00 <_close_r+0x1c>)
 800bee8:	2300      	movs	r3, #0
 800beea:	4604      	mov	r4, r0
 800beec:	4608      	mov	r0, r1
 800beee:	602b      	str	r3, [r5, #0]
 800bef0:	f7f6 fe25 	bl	8002b3e <_close>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_close_r+0x1a>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_close_r+0x1a>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	20001720 	.word	0x20001720

0800bf04 <_lseek_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	4d07      	ldr	r5, [pc, #28]	; (800bf24 <_lseek_r+0x20>)
 800bf08:	4604      	mov	r4, r0
 800bf0a:	4608      	mov	r0, r1
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	2200      	movs	r2, #0
 800bf10:	602a      	str	r2, [r5, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	f7f6 fe3a 	bl	8002b8c <_lseek>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_lseek_r+0x1e>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_lseek_r+0x1e>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20001720 	.word	0x20001720

0800bf28 <_read_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4d07      	ldr	r5, [pc, #28]	; (800bf48 <_read_r+0x20>)
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	4608      	mov	r0, r1
 800bf30:	4611      	mov	r1, r2
 800bf32:	2200      	movs	r2, #0
 800bf34:	602a      	str	r2, [r5, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	f7f6 fde4 	bl	8002b04 <_read>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	d102      	bne.n	800bf46 <_read_r+0x1e>
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	b103      	cbz	r3, 800bf46 <_read_r+0x1e>
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	bd38      	pop	{r3, r4, r5, pc}
 800bf48:	20001720 	.word	0x20001720

0800bf4c <_write_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d07      	ldr	r5, [pc, #28]	; (800bf6c <_write_r+0x20>)
 800bf50:	4604      	mov	r4, r0
 800bf52:	4608      	mov	r0, r1
 800bf54:	4611      	mov	r1, r2
 800bf56:	2200      	movs	r2, #0
 800bf58:	602a      	str	r2, [r5, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f7fc feea 	bl	8008d34 <_write>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d102      	bne.n	800bf6a <_write_r+0x1e>
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	b103      	cbz	r3, 800bf6a <_write_r+0x1e>
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	20001720 	.word	0x20001720

0800bf70 <__errno>:
 800bf70:	4b01      	ldr	r3, [pc, #4]	; (800bf78 <__errno+0x8>)
 800bf72:	6818      	ldr	r0, [r3, #0]
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	20000098 	.word	0x20000098

0800bf7c <__libc_init_array>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	4d0d      	ldr	r5, [pc, #52]	; (800bfb4 <__libc_init_array+0x38>)
 800bf80:	4c0d      	ldr	r4, [pc, #52]	; (800bfb8 <__libc_init_array+0x3c>)
 800bf82:	1b64      	subs	r4, r4, r5
 800bf84:	10a4      	asrs	r4, r4, #2
 800bf86:	2600      	movs	r6, #0
 800bf88:	42a6      	cmp	r6, r4
 800bf8a:	d109      	bne.n	800bfa0 <__libc_init_array+0x24>
 800bf8c:	4d0b      	ldr	r5, [pc, #44]	; (800bfbc <__libc_init_array+0x40>)
 800bf8e:	4c0c      	ldr	r4, [pc, #48]	; (800bfc0 <__libc_init_array+0x44>)
 800bf90:	f000 fd7a 	bl	800ca88 <_init>
 800bf94:	1b64      	subs	r4, r4, r5
 800bf96:	10a4      	asrs	r4, r4, #2
 800bf98:	2600      	movs	r6, #0
 800bf9a:	42a6      	cmp	r6, r4
 800bf9c:	d105      	bne.n	800bfaa <__libc_init_array+0x2e>
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa4:	4798      	blx	r3
 800bfa6:	3601      	adds	r6, #1
 800bfa8:	e7ee      	b.n	800bf88 <__libc_init_array+0xc>
 800bfaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfae:	4798      	blx	r3
 800bfb0:	3601      	adds	r6, #1
 800bfb2:	e7f2      	b.n	800bf9a <__libc_init_array+0x1e>
 800bfb4:	0800e510 	.word	0x0800e510
 800bfb8:	0800e510 	.word	0x0800e510
 800bfbc:	0800e510 	.word	0x0800e510
 800bfc0:	0800e514 	.word	0x0800e514

0800bfc4 <__retarget_lock_init_recursive>:
 800bfc4:	4770      	bx	lr

0800bfc6 <__retarget_lock_acquire_recursive>:
 800bfc6:	4770      	bx	lr

0800bfc8 <__retarget_lock_release_recursive>:
 800bfc8:	4770      	bx	lr

0800bfca <memcpy>:
 800bfca:	440a      	add	r2, r1
 800bfcc:	4291      	cmp	r1, r2
 800bfce:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfd2:	d100      	bne.n	800bfd6 <memcpy+0xc>
 800bfd4:	4770      	bx	lr
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfe0:	4291      	cmp	r1, r2
 800bfe2:	d1f9      	bne.n	800bfd8 <memcpy+0xe>
 800bfe4:	bd10      	pop	{r4, pc}
	...

0800bfe8 <_free_r>:
 800bfe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfea:	2900      	cmp	r1, #0
 800bfec:	d044      	beq.n	800c078 <_free_r+0x90>
 800bfee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff2:	9001      	str	r0, [sp, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f1a1 0404 	sub.w	r4, r1, #4
 800bffa:	bfb8      	it	lt
 800bffc:	18e4      	addlt	r4, r4, r3
 800bffe:	f000 f8df 	bl	800c1c0 <__malloc_lock>
 800c002:	4a1e      	ldr	r2, [pc, #120]	; (800c07c <_free_r+0x94>)
 800c004:	9801      	ldr	r0, [sp, #4]
 800c006:	6813      	ldr	r3, [r2, #0]
 800c008:	b933      	cbnz	r3, 800c018 <_free_r+0x30>
 800c00a:	6063      	str	r3, [r4, #4]
 800c00c:	6014      	str	r4, [r2, #0]
 800c00e:	b003      	add	sp, #12
 800c010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c014:	f000 b8da 	b.w	800c1cc <__malloc_unlock>
 800c018:	42a3      	cmp	r3, r4
 800c01a:	d908      	bls.n	800c02e <_free_r+0x46>
 800c01c:	6825      	ldr	r5, [r4, #0]
 800c01e:	1961      	adds	r1, r4, r5
 800c020:	428b      	cmp	r3, r1
 800c022:	bf01      	itttt	eq
 800c024:	6819      	ldreq	r1, [r3, #0]
 800c026:	685b      	ldreq	r3, [r3, #4]
 800c028:	1949      	addeq	r1, r1, r5
 800c02a:	6021      	streq	r1, [r4, #0]
 800c02c:	e7ed      	b.n	800c00a <_free_r+0x22>
 800c02e:	461a      	mov	r2, r3
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	b10b      	cbz	r3, 800c038 <_free_r+0x50>
 800c034:	42a3      	cmp	r3, r4
 800c036:	d9fa      	bls.n	800c02e <_free_r+0x46>
 800c038:	6811      	ldr	r1, [r2, #0]
 800c03a:	1855      	adds	r5, r2, r1
 800c03c:	42a5      	cmp	r5, r4
 800c03e:	d10b      	bne.n	800c058 <_free_r+0x70>
 800c040:	6824      	ldr	r4, [r4, #0]
 800c042:	4421      	add	r1, r4
 800c044:	1854      	adds	r4, r2, r1
 800c046:	42a3      	cmp	r3, r4
 800c048:	6011      	str	r1, [r2, #0]
 800c04a:	d1e0      	bne.n	800c00e <_free_r+0x26>
 800c04c:	681c      	ldr	r4, [r3, #0]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	6053      	str	r3, [r2, #4]
 800c052:	440c      	add	r4, r1
 800c054:	6014      	str	r4, [r2, #0]
 800c056:	e7da      	b.n	800c00e <_free_r+0x26>
 800c058:	d902      	bls.n	800c060 <_free_r+0x78>
 800c05a:	230c      	movs	r3, #12
 800c05c:	6003      	str	r3, [r0, #0]
 800c05e:	e7d6      	b.n	800c00e <_free_r+0x26>
 800c060:	6825      	ldr	r5, [r4, #0]
 800c062:	1961      	adds	r1, r4, r5
 800c064:	428b      	cmp	r3, r1
 800c066:	bf04      	itt	eq
 800c068:	6819      	ldreq	r1, [r3, #0]
 800c06a:	685b      	ldreq	r3, [r3, #4]
 800c06c:	6063      	str	r3, [r4, #4]
 800c06e:	bf04      	itt	eq
 800c070:	1949      	addeq	r1, r1, r5
 800c072:	6021      	streq	r1, [r4, #0]
 800c074:	6054      	str	r4, [r2, #4]
 800c076:	e7ca      	b.n	800c00e <_free_r+0x26>
 800c078:	b003      	add	sp, #12
 800c07a:	bd30      	pop	{r4, r5, pc}
 800c07c:	20001728 	.word	0x20001728

0800c080 <sbrk_aligned>:
 800c080:	b570      	push	{r4, r5, r6, lr}
 800c082:	4e0e      	ldr	r6, [pc, #56]	; (800c0bc <sbrk_aligned+0x3c>)
 800c084:	460c      	mov	r4, r1
 800c086:	6831      	ldr	r1, [r6, #0]
 800c088:	4605      	mov	r5, r0
 800c08a:	b911      	cbnz	r1, 800c092 <sbrk_aligned+0x12>
 800c08c:	f000 fcec 	bl	800ca68 <_sbrk_r>
 800c090:	6030      	str	r0, [r6, #0]
 800c092:	4621      	mov	r1, r4
 800c094:	4628      	mov	r0, r5
 800c096:	f000 fce7 	bl	800ca68 <_sbrk_r>
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	d00a      	beq.n	800c0b4 <sbrk_aligned+0x34>
 800c09e:	1cc4      	adds	r4, r0, #3
 800c0a0:	f024 0403 	bic.w	r4, r4, #3
 800c0a4:	42a0      	cmp	r0, r4
 800c0a6:	d007      	beq.n	800c0b8 <sbrk_aligned+0x38>
 800c0a8:	1a21      	subs	r1, r4, r0
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f000 fcdc 	bl	800ca68 <_sbrk_r>
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d101      	bne.n	800c0b8 <sbrk_aligned+0x38>
 800c0b4:	f04f 34ff 	mov.w	r4, #4294967295
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}
 800c0bc:	2000172c 	.word	0x2000172c

0800c0c0 <_malloc_r>:
 800c0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	1ccd      	adds	r5, r1, #3
 800c0c6:	f025 0503 	bic.w	r5, r5, #3
 800c0ca:	3508      	adds	r5, #8
 800c0cc:	2d0c      	cmp	r5, #12
 800c0ce:	bf38      	it	cc
 800c0d0:	250c      	movcc	r5, #12
 800c0d2:	2d00      	cmp	r5, #0
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	db01      	blt.n	800c0dc <_malloc_r+0x1c>
 800c0d8:	42a9      	cmp	r1, r5
 800c0da:	d905      	bls.n	800c0e8 <_malloc_r+0x28>
 800c0dc:	230c      	movs	r3, #12
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	2600      	movs	r6, #0
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1bc <_malloc_r+0xfc>
 800c0ec:	f000 f868 	bl	800c1c0 <__malloc_lock>
 800c0f0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0f4:	461c      	mov	r4, r3
 800c0f6:	bb5c      	cbnz	r4, 800c150 <_malloc_r+0x90>
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	f7ff ffc0 	bl	800c080 <sbrk_aligned>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	4604      	mov	r4, r0
 800c104:	d155      	bne.n	800c1b2 <_malloc_r+0xf2>
 800c106:	f8d8 4000 	ldr.w	r4, [r8]
 800c10a:	4626      	mov	r6, r4
 800c10c:	2e00      	cmp	r6, #0
 800c10e:	d145      	bne.n	800c19c <_malloc_r+0xdc>
 800c110:	2c00      	cmp	r4, #0
 800c112:	d048      	beq.n	800c1a6 <_malloc_r+0xe6>
 800c114:	6823      	ldr	r3, [r4, #0]
 800c116:	4631      	mov	r1, r6
 800c118:	4638      	mov	r0, r7
 800c11a:	eb04 0903 	add.w	r9, r4, r3
 800c11e:	f000 fca3 	bl	800ca68 <_sbrk_r>
 800c122:	4581      	cmp	r9, r0
 800c124:	d13f      	bne.n	800c1a6 <_malloc_r+0xe6>
 800c126:	6821      	ldr	r1, [r4, #0]
 800c128:	1a6d      	subs	r5, r5, r1
 800c12a:	4629      	mov	r1, r5
 800c12c:	4638      	mov	r0, r7
 800c12e:	f7ff ffa7 	bl	800c080 <sbrk_aligned>
 800c132:	3001      	adds	r0, #1
 800c134:	d037      	beq.n	800c1a6 <_malloc_r+0xe6>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	442b      	add	r3, r5
 800c13a:	6023      	str	r3, [r4, #0]
 800c13c:	f8d8 3000 	ldr.w	r3, [r8]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d038      	beq.n	800c1b6 <_malloc_r+0xf6>
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	42a2      	cmp	r2, r4
 800c148:	d12b      	bne.n	800c1a2 <_malloc_r+0xe2>
 800c14a:	2200      	movs	r2, #0
 800c14c:	605a      	str	r2, [r3, #4]
 800c14e:	e00f      	b.n	800c170 <_malloc_r+0xb0>
 800c150:	6822      	ldr	r2, [r4, #0]
 800c152:	1b52      	subs	r2, r2, r5
 800c154:	d41f      	bmi.n	800c196 <_malloc_r+0xd6>
 800c156:	2a0b      	cmp	r2, #11
 800c158:	d917      	bls.n	800c18a <_malloc_r+0xca>
 800c15a:	1961      	adds	r1, r4, r5
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	6025      	str	r5, [r4, #0]
 800c160:	bf18      	it	ne
 800c162:	6059      	strne	r1, [r3, #4]
 800c164:	6863      	ldr	r3, [r4, #4]
 800c166:	bf08      	it	eq
 800c168:	f8c8 1000 	streq.w	r1, [r8]
 800c16c:	5162      	str	r2, [r4, r5]
 800c16e:	604b      	str	r3, [r1, #4]
 800c170:	4638      	mov	r0, r7
 800c172:	f104 060b 	add.w	r6, r4, #11
 800c176:	f000 f829 	bl	800c1cc <__malloc_unlock>
 800c17a:	f026 0607 	bic.w	r6, r6, #7
 800c17e:	1d23      	adds	r3, r4, #4
 800c180:	1af2      	subs	r2, r6, r3
 800c182:	d0ae      	beq.n	800c0e2 <_malloc_r+0x22>
 800c184:	1b9b      	subs	r3, r3, r6
 800c186:	50a3      	str	r3, [r4, r2]
 800c188:	e7ab      	b.n	800c0e2 <_malloc_r+0x22>
 800c18a:	42a3      	cmp	r3, r4
 800c18c:	6862      	ldr	r2, [r4, #4]
 800c18e:	d1dd      	bne.n	800c14c <_malloc_r+0x8c>
 800c190:	f8c8 2000 	str.w	r2, [r8]
 800c194:	e7ec      	b.n	800c170 <_malloc_r+0xb0>
 800c196:	4623      	mov	r3, r4
 800c198:	6864      	ldr	r4, [r4, #4]
 800c19a:	e7ac      	b.n	800c0f6 <_malloc_r+0x36>
 800c19c:	4634      	mov	r4, r6
 800c19e:	6876      	ldr	r6, [r6, #4]
 800c1a0:	e7b4      	b.n	800c10c <_malloc_r+0x4c>
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	e7cc      	b.n	800c140 <_malloc_r+0x80>
 800c1a6:	230c      	movs	r3, #12
 800c1a8:	603b      	str	r3, [r7, #0]
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	f000 f80e 	bl	800c1cc <__malloc_unlock>
 800c1b0:	e797      	b.n	800c0e2 <_malloc_r+0x22>
 800c1b2:	6025      	str	r5, [r4, #0]
 800c1b4:	e7dc      	b.n	800c170 <_malloc_r+0xb0>
 800c1b6:	605b      	str	r3, [r3, #4]
 800c1b8:	deff      	udf	#255	; 0xff
 800c1ba:	bf00      	nop
 800c1bc:	20001728 	.word	0x20001728

0800c1c0 <__malloc_lock>:
 800c1c0:	4801      	ldr	r0, [pc, #4]	; (800c1c8 <__malloc_lock+0x8>)
 800c1c2:	f7ff bf00 	b.w	800bfc6 <__retarget_lock_acquire_recursive>
 800c1c6:	bf00      	nop
 800c1c8:	20001724 	.word	0x20001724

0800c1cc <__malloc_unlock>:
 800c1cc:	4801      	ldr	r0, [pc, #4]	; (800c1d4 <__malloc_unlock+0x8>)
 800c1ce:	f7ff befb 	b.w	800bfc8 <__retarget_lock_release_recursive>
 800c1d2:	bf00      	nop
 800c1d4:	20001724 	.word	0x20001724

0800c1d8 <__sfputc_r>:
 800c1d8:	6893      	ldr	r3, [r2, #8]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	b410      	push	{r4}
 800c1e0:	6093      	str	r3, [r2, #8]
 800c1e2:	da08      	bge.n	800c1f6 <__sfputc_r+0x1e>
 800c1e4:	6994      	ldr	r4, [r2, #24]
 800c1e6:	42a3      	cmp	r3, r4
 800c1e8:	db01      	blt.n	800c1ee <__sfputc_r+0x16>
 800c1ea:	290a      	cmp	r1, #10
 800c1ec:	d103      	bne.n	800c1f6 <__sfputc_r+0x1e>
 800c1ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1f2:	f7ff bdc2 	b.w	800bd7a <__swbuf_r>
 800c1f6:	6813      	ldr	r3, [r2, #0]
 800c1f8:	1c58      	adds	r0, r3, #1
 800c1fa:	6010      	str	r0, [r2, #0]
 800c1fc:	7019      	strb	r1, [r3, #0]
 800c1fe:	4608      	mov	r0, r1
 800c200:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <__sfputs_r>:
 800c206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c208:	4606      	mov	r6, r0
 800c20a:	460f      	mov	r7, r1
 800c20c:	4614      	mov	r4, r2
 800c20e:	18d5      	adds	r5, r2, r3
 800c210:	42ac      	cmp	r4, r5
 800c212:	d101      	bne.n	800c218 <__sfputs_r+0x12>
 800c214:	2000      	movs	r0, #0
 800c216:	e007      	b.n	800c228 <__sfputs_r+0x22>
 800c218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21c:	463a      	mov	r2, r7
 800c21e:	4630      	mov	r0, r6
 800c220:	f7ff ffda 	bl	800c1d8 <__sfputc_r>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d1f3      	bne.n	800c210 <__sfputs_r+0xa>
 800c228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c22c <_vfiprintf_r>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	460d      	mov	r5, r1
 800c232:	b09d      	sub	sp, #116	; 0x74
 800c234:	4614      	mov	r4, r2
 800c236:	4698      	mov	r8, r3
 800c238:	4606      	mov	r6, r0
 800c23a:	b118      	cbz	r0, 800c244 <_vfiprintf_r+0x18>
 800c23c:	6a03      	ldr	r3, [r0, #32]
 800c23e:	b90b      	cbnz	r3, 800c244 <_vfiprintf_r+0x18>
 800c240:	f7ff fcac 	bl	800bb9c <__sinit>
 800c244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c246:	07d9      	lsls	r1, r3, #31
 800c248:	d405      	bmi.n	800c256 <_vfiprintf_r+0x2a>
 800c24a:	89ab      	ldrh	r3, [r5, #12]
 800c24c:	059a      	lsls	r2, r3, #22
 800c24e:	d402      	bmi.n	800c256 <_vfiprintf_r+0x2a>
 800c250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c252:	f7ff feb8 	bl	800bfc6 <__retarget_lock_acquire_recursive>
 800c256:	89ab      	ldrh	r3, [r5, #12]
 800c258:	071b      	lsls	r3, r3, #28
 800c25a:	d501      	bpl.n	800c260 <_vfiprintf_r+0x34>
 800c25c:	692b      	ldr	r3, [r5, #16]
 800c25e:	b99b      	cbnz	r3, 800c288 <_vfiprintf_r+0x5c>
 800c260:	4629      	mov	r1, r5
 800c262:	4630      	mov	r0, r6
 800c264:	f7ff fdc6 	bl	800bdf4 <__swsetup_r>
 800c268:	b170      	cbz	r0, 800c288 <_vfiprintf_r+0x5c>
 800c26a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c26c:	07dc      	lsls	r4, r3, #31
 800c26e:	d504      	bpl.n	800c27a <_vfiprintf_r+0x4e>
 800c270:	f04f 30ff 	mov.w	r0, #4294967295
 800c274:	b01d      	add	sp, #116	; 0x74
 800c276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	0598      	lsls	r0, r3, #22
 800c27e:	d4f7      	bmi.n	800c270 <_vfiprintf_r+0x44>
 800c280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c282:	f7ff fea1 	bl	800bfc8 <__retarget_lock_release_recursive>
 800c286:	e7f3      	b.n	800c270 <_vfiprintf_r+0x44>
 800c288:	2300      	movs	r3, #0
 800c28a:	9309      	str	r3, [sp, #36]	; 0x24
 800c28c:	2320      	movs	r3, #32
 800c28e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c292:	f8cd 800c 	str.w	r8, [sp, #12]
 800c296:	2330      	movs	r3, #48	; 0x30
 800c298:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c44c <_vfiprintf_r+0x220>
 800c29c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2a0:	f04f 0901 	mov.w	r9, #1
 800c2a4:	4623      	mov	r3, r4
 800c2a6:	469a      	mov	sl, r3
 800c2a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2ac:	b10a      	cbz	r2, 800c2b2 <_vfiprintf_r+0x86>
 800c2ae:	2a25      	cmp	r2, #37	; 0x25
 800c2b0:	d1f9      	bne.n	800c2a6 <_vfiprintf_r+0x7a>
 800c2b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c2b6:	d00b      	beq.n	800c2d0 <_vfiprintf_r+0xa4>
 800c2b8:	465b      	mov	r3, fp
 800c2ba:	4622      	mov	r2, r4
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f7ff ffa1 	bl	800c206 <__sfputs_r>
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	f000 80a9 	beq.w	800c41c <_vfiprintf_r+0x1f0>
 800c2ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2cc:	445a      	add	r2, fp
 800c2ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c2d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 80a1 	beq.w	800c41c <_vfiprintf_r+0x1f0>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2e4:	f10a 0a01 	add.w	sl, sl, #1
 800c2e8:	9304      	str	r3, [sp, #16]
 800c2ea:	9307      	str	r3, [sp, #28]
 800c2ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c2f2:	4654      	mov	r4, sl
 800c2f4:	2205      	movs	r2, #5
 800c2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2fa:	4854      	ldr	r0, [pc, #336]	; (800c44c <_vfiprintf_r+0x220>)
 800c2fc:	f7f3 ff48 	bl	8000190 <memchr>
 800c300:	9a04      	ldr	r2, [sp, #16]
 800c302:	b9d8      	cbnz	r0, 800c33c <_vfiprintf_r+0x110>
 800c304:	06d1      	lsls	r1, r2, #27
 800c306:	bf44      	itt	mi
 800c308:	2320      	movmi	r3, #32
 800c30a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c30e:	0713      	lsls	r3, r2, #28
 800c310:	bf44      	itt	mi
 800c312:	232b      	movmi	r3, #43	; 0x2b
 800c314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c318:	f89a 3000 	ldrb.w	r3, [sl]
 800c31c:	2b2a      	cmp	r3, #42	; 0x2a
 800c31e:	d015      	beq.n	800c34c <_vfiprintf_r+0x120>
 800c320:	9a07      	ldr	r2, [sp, #28]
 800c322:	4654      	mov	r4, sl
 800c324:	2000      	movs	r0, #0
 800c326:	f04f 0c0a 	mov.w	ip, #10
 800c32a:	4621      	mov	r1, r4
 800c32c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c330:	3b30      	subs	r3, #48	; 0x30
 800c332:	2b09      	cmp	r3, #9
 800c334:	d94d      	bls.n	800c3d2 <_vfiprintf_r+0x1a6>
 800c336:	b1b0      	cbz	r0, 800c366 <_vfiprintf_r+0x13a>
 800c338:	9207      	str	r2, [sp, #28]
 800c33a:	e014      	b.n	800c366 <_vfiprintf_r+0x13a>
 800c33c:	eba0 0308 	sub.w	r3, r0, r8
 800c340:	fa09 f303 	lsl.w	r3, r9, r3
 800c344:	4313      	orrs	r3, r2
 800c346:	9304      	str	r3, [sp, #16]
 800c348:	46a2      	mov	sl, r4
 800c34a:	e7d2      	b.n	800c2f2 <_vfiprintf_r+0xc6>
 800c34c:	9b03      	ldr	r3, [sp, #12]
 800c34e:	1d19      	adds	r1, r3, #4
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	9103      	str	r1, [sp, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	bfbb      	ittet	lt
 800c358:	425b      	neglt	r3, r3
 800c35a:	f042 0202 	orrlt.w	r2, r2, #2
 800c35e:	9307      	strge	r3, [sp, #28]
 800c360:	9307      	strlt	r3, [sp, #28]
 800c362:	bfb8      	it	lt
 800c364:	9204      	strlt	r2, [sp, #16]
 800c366:	7823      	ldrb	r3, [r4, #0]
 800c368:	2b2e      	cmp	r3, #46	; 0x2e
 800c36a:	d10c      	bne.n	800c386 <_vfiprintf_r+0x15a>
 800c36c:	7863      	ldrb	r3, [r4, #1]
 800c36e:	2b2a      	cmp	r3, #42	; 0x2a
 800c370:	d134      	bne.n	800c3dc <_vfiprintf_r+0x1b0>
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	1d1a      	adds	r2, r3, #4
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	9203      	str	r2, [sp, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	bfb8      	it	lt
 800c37e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c382:	3402      	adds	r4, #2
 800c384:	9305      	str	r3, [sp, #20]
 800c386:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c45c <_vfiprintf_r+0x230>
 800c38a:	7821      	ldrb	r1, [r4, #0]
 800c38c:	2203      	movs	r2, #3
 800c38e:	4650      	mov	r0, sl
 800c390:	f7f3 fefe 	bl	8000190 <memchr>
 800c394:	b138      	cbz	r0, 800c3a6 <_vfiprintf_r+0x17a>
 800c396:	9b04      	ldr	r3, [sp, #16]
 800c398:	eba0 000a 	sub.w	r0, r0, sl
 800c39c:	2240      	movs	r2, #64	; 0x40
 800c39e:	4082      	lsls	r2, r0
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	3401      	adds	r4, #1
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3aa:	4829      	ldr	r0, [pc, #164]	; (800c450 <_vfiprintf_r+0x224>)
 800c3ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3b0:	2206      	movs	r2, #6
 800c3b2:	f7f3 feed 	bl	8000190 <memchr>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d03f      	beq.n	800c43a <_vfiprintf_r+0x20e>
 800c3ba:	4b26      	ldr	r3, [pc, #152]	; (800c454 <_vfiprintf_r+0x228>)
 800c3bc:	bb1b      	cbnz	r3, 800c406 <_vfiprintf_r+0x1da>
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	3307      	adds	r3, #7
 800c3c2:	f023 0307 	bic.w	r3, r3, #7
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	9303      	str	r3, [sp, #12]
 800c3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3cc:	443b      	add	r3, r7
 800c3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d0:	e768      	b.n	800c2a4 <_vfiprintf_r+0x78>
 800c3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	2001      	movs	r0, #1
 800c3da:	e7a6      	b.n	800c32a <_vfiprintf_r+0xfe>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	3401      	adds	r4, #1
 800c3e0:	9305      	str	r3, [sp, #20]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	f04f 0c0a 	mov.w	ip, #10
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ee:	3a30      	subs	r2, #48	; 0x30
 800c3f0:	2a09      	cmp	r2, #9
 800c3f2:	d903      	bls.n	800c3fc <_vfiprintf_r+0x1d0>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0c6      	beq.n	800c386 <_vfiprintf_r+0x15a>
 800c3f8:	9105      	str	r1, [sp, #20]
 800c3fa:	e7c4      	b.n	800c386 <_vfiprintf_r+0x15a>
 800c3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c400:	4604      	mov	r4, r0
 800c402:	2301      	movs	r3, #1
 800c404:	e7f0      	b.n	800c3e8 <_vfiprintf_r+0x1bc>
 800c406:	ab03      	add	r3, sp, #12
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	462a      	mov	r2, r5
 800c40c:	4b12      	ldr	r3, [pc, #72]	; (800c458 <_vfiprintf_r+0x22c>)
 800c40e:	a904      	add	r1, sp, #16
 800c410:	4630      	mov	r0, r6
 800c412:	f3af 8000 	nop.w
 800c416:	4607      	mov	r7, r0
 800c418:	1c78      	adds	r0, r7, #1
 800c41a:	d1d6      	bne.n	800c3ca <_vfiprintf_r+0x19e>
 800c41c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c41e:	07d9      	lsls	r1, r3, #31
 800c420:	d405      	bmi.n	800c42e <_vfiprintf_r+0x202>
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	059a      	lsls	r2, r3, #22
 800c426:	d402      	bmi.n	800c42e <_vfiprintf_r+0x202>
 800c428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c42a:	f7ff fdcd 	bl	800bfc8 <__retarget_lock_release_recursive>
 800c42e:	89ab      	ldrh	r3, [r5, #12]
 800c430:	065b      	lsls	r3, r3, #25
 800c432:	f53f af1d 	bmi.w	800c270 <_vfiprintf_r+0x44>
 800c436:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c438:	e71c      	b.n	800c274 <_vfiprintf_r+0x48>
 800c43a:	ab03      	add	r3, sp, #12
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	462a      	mov	r2, r5
 800c440:	4b05      	ldr	r3, [pc, #20]	; (800c458 <_vfiprintf_r+0x22c>)
 800c442:	a904      	add	r1, sp, #16
 800c444:	4630      	mov	r0, r6
 800c446:	f000 f879 	bl	800c53c <_printf_i>
 800c44a:	e7e4      	b.n	800c416 <_vfiprintf_r+0x1ea>
 800c44c:	0800e4d4 	.word	0x0800e4d4
 800c450:	0800e4de 	.word	0x0800e4de
 800c454:	00000000 	.word	0x00000000
 800c458:	0800c207 	.word	0x0800c207
 800c45c:	0800e4da 	.word	0x0800e4da

0800c460 <_printf_common>:
 800c460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c464:	4616      	mov	r6, r2
 800c466:	4699      	mov	r9, r3
 800c468:	688a      	ldr	r2, [r1, #8]
 800c46a:	690b      	ldr	r3, [r1, #16]
 800c46c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c470:	4293      	cmp	r3, r2
 800c472:	bfb8      	it	lt
 800c474:	4613      	movlt	r3, r2
 800c476:	6033      	str	r3, [r6, #0]
 800c478:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c47c:	4607      	mov	r7, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	b10a      	cbz	r2, 800c486 <_printf_common+0x26>
 800c482:	3301      	adds	r3, #1
 800c484:	6033      	str	r3, [r6, #0]
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	0699      	lsls	r1, r3, #26
 800c48a:	bf42      	ittt	mi
 800c48c:	6833      	ldrmi	r3, [r6, #0]
 800c48e:	3302      	addmi	r3, #2
 800c490:	6033      	strmi	r3, [r6, #0]
 800c492:	6825      	ldr	r5, [r4, #0]
 800c494:	f015 0506 	ands.w	r5, r5, #6
 800c498:	d106      	bne.n	800c4a8 <_printf_common+0x48>
 800c49a:	f104 0a19 	add.w	sl, r4, #25
 800c49e:	68e3      	ldr	r3, [r4, #12]
 800c4a0:	6832      	ldr	r2, [r6, #0]
 800c4a2:	1a9b      	subs	r3, r3, r2
 800c4a4:	42ab      	cmp	r3, r5
 800c4a6:	dc26      	bgt.n	800c4f6 <_printf_common+0x96>
 800c4a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4ac:	1e13      	subs	r3, r2, #0
 800c4ae:	6822      	ldr	r2, [r4, #0]
 800c4b0:	bf18      	it	ne
 800c4b2:	2301      	movne	r3, #1
 800c4b4:	0692      	lsls	r2, r2, #26
 800c4b6:	d42b      	bmi.n	800c510 <_printf_common+0xb0>
 800c4b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4bc:	4649      	mov	r1, r9
 800c4be:	4638      	mov	r0, r7
 800c4c0:	47c0      	blx	r8
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	d01e      	beq.n	800c504 <_printf_common+0xa4>
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	6922      	ldr	r2, [r4, #16]
 800c4ca:	f003 0306 	and.w	r3, r3, #6
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	bf02      	ittt	eq
 800c4d2:	68e5      	ldreq	r5, [r4, #12]
 800c4d4:	6833      	ldreq	r3, [r6, #0]
 800c4d6:	1aed      	subeq	r5, r5, r3
 800c4d8:	68a3      	ldr	r3, [r4, #8]
 800c4da:	bf0c      	ite	eq
 800c4dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4e0:	2500      	movne	r5, #0
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	bfc4      	itt	gt
 800c4e6:	1a9b      	subgt	r3, r3, r2
 800c4e8:	18ed      	addgt	r5, r5, r3
 800c4ea:	2600      	movs	r6, #0
 800c4ec:	341a      	adds	r4, #26
 800c4ee:	42b5      	cmp	r5, r6
 800c4f0:	d11a      	bne.n	800c528 <_printf_common+0xc8>
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	e008      	b.n	800c508 <_printf_common+0xa8>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	4652      	mov	r2, sl
 800c4fa:	4649      	mov	r1, r9
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	47c0      	blx	r8
 800c500:	3001      	adds	r0, #1
 800c502:	d103      	bne.n	800c50c <_printf_common+0xac>
 800c504:	f04f 30ff 	mov.w	r0, #4294967295
 800c508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50c:	3501      	adds	r5, #1
 800c50e:	e7c6      	b.n	800c49e <_printf_common+0x3e>
 800c510:	18e1      	adds	r1, r4, r3
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	2030      	movs	r0, #48	; 0x30
 800c516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c51a:	4422      	add	r2, r4
 800c51c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c524:	3302      	adds	r3, #2
 800c526:	e7c7      	b.n	800c4b8 <_printf_common+0x58>
 800c528:	2301      	movs	r3, #1
 800c52a:	4622      	mov	r2, r4
 800c52c:	4649      	mov	r1, r9
 800c52e:	4638      	mov	r0, r7
 800c530:	47c0      	blx	r8
 800c532:	3001      	adds	r0, #1
 800c534:	d0e6      	beq.n	800c504 <_printf_common+0xa4>
 800c536:	3601      	adds	r6, #1
 800c538:	e7d9      	b.n	800c4ee <_printf_common+0x8e>
	...

0800c53c <_printf_i>:
 800c53c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c540:	7e0f      	ldrb	r7, [r1, #24]
 800c542:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c544:	2f78      	cmp	r7, #120	; 0x78
 800c546:	4691      	mov	r9, r2
 800c548:	4680      	mov	r8, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	469a      	mov	sl, r3
 800c54e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c552:	d807      	bhi.n	800c564 <_printf_i+0x28>
 800c554:	2f62      	cmp	r7, #98	; 0x62
 800c556:	d80a      	bhi.n	800c56e <_printf_i+0x32>
 800c558:	2f00      	cmp	r7, #0
 800c55a:	f000 80d4 	beq.w	800c706 <_printf_i+0x1ca>
 800c55e:	2f58      	cmp	r7, #88	; 0x58
 800c560:	f000 80c0 	beq.w	800c6e4 <_printf_i+0x1a8>
 800c564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c568:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c56c:	e03a      	b.n	800c5e4 <_printf_i+0xa8>
 800c56e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c572:	2b15      	cmp	r3, #21
 800c574:	d8f6      	bhi.n	800c564 <_printf_i+0x28>
 800c576:	a101      	add	r1, pc, #4	; (adr r1, 800c57c <_printf_i+0x40>)
 800c578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c57c:	0800c5d5 	.word	0x0800c5d5
 800c580:	0800c5e9 	.word	0x0800c5e9
 800c584:	0800c565 	.word	0x0800c565
 800c588:	0800c565 	.word	0x0800c565
 800c58c:	0800c565 	.word	0x0800c565
 800c590:	0800c565 	.word	0x0800c565
 800c594:	0800c5e9 	.word	0x0800c5e9
 800c598:	0800c565 	.word	0x0800c565
 800c59c:	0800c565 	.word	0x0800c565
 800c5a0:	0800c565 	.word	0x0800c565
 800c5a4:	0800c565 	.word	0x0800c565
 800c5a8:	0800c6ed 	.word	0x0800c6ed
 800c5ac:	0800c615 	.word	0x0800c615
 800c5b0:	0800c6a7 	.word	0x0800c6a7
 800c5b4:	0800c565 	.word	0x0800c565
 800c5b8:	0800c565 	.word	0x0800c565
 800c5bc:	0800c70f 	.word	0x0800c70f
 800c5c0:	0800c565 	.word	0x0800c565
 800c5c4:	0800c615 	.word	0x0800c615
 800c5c8:	0800c565 	.word	0x0800c565
 800c5cc:	0800c565 	.word	0x0800c565
 800c5d0:	0800c6af 	.word	0x0800c6af
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	1d1a      	adds	r2, r3, #4
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	602a      	str	r2, [r5, #0]
 800c5dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e09f      	b.n	800c728 <_printf_i+0x1ec>
 800c5e8:	6820      	ldr	r0, [r4, #0]
 800c5ea:	682b      	ldr	r3, [r5, #0]
 800c5ec:	0607      	lsls	r7, r0, #24
 800c5ee:	f103 0104 	add.w	r1, r3, #4
 800c5f2:	6029      	str	r1, [r5, #0]
 800c5f4:	d501      	bpl.n	800c5fa <_printf_i+0xbe>
 800c5f6:	681e      	ldr	r6, [r3, #0]
 800c5f8:	e003      	b.n	800c602 <_printf_i+0xc6>
 800c5fa:	0646      	lsls	r6, r0, #25
 800c5fc:	d5fb      	bpl.n	800c5f6 <_printf_i+0xba>
 800c5fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c602:	2e00      	cmp	r6, #0
 800c604:	da03      	bge.n	800c60e <_printf_i+0xd2>
 800c606:	232d      	movs	r3, #45	; 0x2d
 800c608:	4276      	negs	r6, r6
 800c60a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c60e:	485a      	ldr	r0, [pc, #360]	; (800c778 <_printf_i+0x23c>)
 800c610:	230a      	movs	r3, #10
 800c612:	e012      	b.n	800c63a <_printf_i+0xfe>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	6820      	ldr	r0, [r4, #0]
 800c618:	1d19      	adds	r1, r3, #4
 800c61a:	6029      	str	r1, [r5, #0]
 800c61c:	0605      	lsls	r5, r0, #24
 800c61e:	d501      	bpl.n	800c624 <_printf_i+0xe8>
 800c620:	681e      	ldr	r6, [r3, #0]
 800c622:	e002      	b.n	800c62a <_printf_i+0xee>
 800c624:	0641      	lsls	r1, r0, #25
 800c626:	d5fb      	bpl.n	800c620 <_printf_i+0xe4>
 800c628:	881e      	ldrh	r6, [r3, #0]
 800c62a:	4853      	ldr	r0, [pc, #332]	; (800c778 <_printf_i+0x23c>)
 800c62c:	2f6f      	cmp	r7, #111	; 0x6f
 800c62e:	bf0c      	ite	eq
 800c630:	2308      	moveq	r3, #8
 800c632:	230a      	movne	r3, #10
 800c634:	2100      	movs	r1, #0
 800c636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c63a:	6865      	ldr	r5, [r4, #4]
 800c63c:	60a5      	str	r5, [r4, #8]
 800c63e:	2d00      	cmp	r5, #0
 800c640:	bfa2      	ittt	ge
 800c642:	6821      	ldrge	r1, [r4, #0]
 800c644:	f021 0104 	bicge.w	r1, r1, #4
 800c648:	6021      	strge	r1, [r4, #0]
 800c64a:	b90e      	cbnz	r6, 800c650 <_printf_i+0x114>
 800c64c:	2d00      	cmp	r5, #0
 800c64e:	d04b      	beq.n	800c6e8 <_printf_i+0x1ac>
 800c650:	4615      	mov	r5, r2
 800c652:	fbb6 f1f3 	udiv	r1, r6, r3
 800c656:	fb03 6711 	mls	r7, r3, r1, r6
 800c65a:	5dc7      	ldrb	r7, [r0, r7]
 800c65c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c660:	4637      	mov	r7, r6
 800c662:	42bb      	cmp	r3, r7
 800c664:	460e      	mov	r6, r1
 800c666:	d9f4      	bls.n	800c652 <_printf_i+0x116>
 800c668:	2b08      	cmp	r3, #8
 800c66a:	d10b      	bne.n	800c684 <_printf_i+0x148>
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	07de      	lsls	r6, r3, #31
 800c670:	d508      	bpl.n	800c684 <_printf_i+0x148>
 800c672:	6923      	ldr	r3, [r4, #16]
 800c674:	6861      	ldr	r1, [r4, #4]
 800c676:	4299      	cmp	r1, r3
 800c678:	bfde      	ittt	le
 800c67a:	2330      	movle	r3, #48	; 0x30
 800c67c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c680:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c684:	1b52      	subs	r2, r2, r5
 800c686:	6122      	str	r2, [r4, #16]
 800c688:	f8cd a000 	str.w	sl, [sp]
 800c68c:	464b      	mov	r3, r9
 800c68e:	aa03      	add	r2, sp, #12
 800c690:	4621      	mov	r1, r4
 800c692:	4640      	mov	r0, r8
 800c694:	f7ff fee4 	bl	800c460 <_printf_common>
 800c698:	3001      	adds	r0, #1
 800c69a:	d14a      	bne.n	800c732 <_printf_i+0x1f6>
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	b004      	add	sp, #16
 800c6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	f043 0320 	orr.w	r3, r3, #32
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	4833      	ldr	r0, [pc, #204]	; (800c77c <_printf_i+0x240>)
 800c6b0:	2778      	movs	r7, #120	; 0x78
 800c6b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	6829      	ldr	r1, [r5, #0]
 800c6ba:	061f      	lsls	r7, r3, #24
 800c6bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6c0:	d402      	bmi.n	800c6c8 <_printf_i+0x18c>
 800c6c2:	065f      	lsls	r7, r3, #25
 800c6c4:	bf48      	it	mi
 800c6c6:	b2b6      	uxthmi	r6, r6
 800c6c8:	07df      	lsls	r7, r3, #31
 800c6ca:	bf48      	it	mi
 800c6cc:	f043 0320 	orrmi.w	r3, r3, #32
 800c6d0:	6029      	str	r1, [r5, #0]
 800c6d2:	bf48      	it	mi
 800c6d4:	6023      	strmi	r3, [r4, #0]
 800c6d6:	b91e      	cbnz	r6, 800c6e0 <_printf_i+0x1a4>
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	f023 0320 	bic.w	r3, r3, #32
 800c6de:	6023      	str	r3, [r4, #0]
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	e7a7      	b.n	800c634 <_printf_i+0xf8>
 800c6e4:	4824      	ldr	r0, [pc, #144]	; (800c778 <_printf_i+0x23c>)
 800c6e6:	e7e4      	b.n	800c6b2 <_printf_i+0x176>
 800c6e8:	4615      	mov	r5, r2
 800c6ea:	e7bd      	b.n	800c668 <_printf_i+0x12c>
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	6826      	ldr	r6, [r4, #0]
 800c6f0:	6961      	ldr	r1, [r4, #20]
 800c6f2:	1d18      	adds	r0, r3, #4
 800c6f4:	6028      	str	r0, [r5, #0]
 800c6f6:	0635      	lsls	r5, r6, #24
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	d501      	bpl.n	800c700 <_printf_i+0x1c4>
 800c6fc:	6019      	str	r1, [r3, #0]
 800c6fe:	e002      	b.n	800c706 <_printf_i+0x1ca>
 800c700:	0670      	lsls	r0, r6, #25
 800c702:	d5fb      	bpl.n	800c6fc <_printf_i+0x1c0>
 800c704:	8019      	strh	r1, [r3, #0]
 800c706:	2300      	movs	r3, #0
 800c708:	6123      	str	r3, [r4, #16]
 800c70a:	4615      	mov	r5, r2
 800c70c:	e7bc      	b.n	800c688 <_printf_i+0x14c>
 800c70e:	682b      	ldr	r3, [r5, #0]
 800c710:	1d1a      	adds	r2, r3, #4
 800c712:	602a      	str	r2, [r5, #0]
 800c714:	681d      	ldr	r5, [r3, #0]
 800c716:	6862      	ldr	r2, [r4, #4]
 800c718:	2100      	movs	r1, #0
 800c71a:	4628      	mov	r0, r5
 800c71c:	f7f3 fd38 	bl	8000190 <memchr>
 800c720:	b108      	cbz	r0, 800c726 <_printf_i+0x1ea>
 800c722:	1b40      	subs	r0, r0, r5
 800c724:	6060      	str	r0, [r4, #4]
 800c726:	6863      	ldr	r3, [r4, #4]
 800c728:	6123      	str	r3, [r4, #16]
 800c72a:	2300      	movs	r3, #0
 800c72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c730:	e7aa      	b.n	800c688 <_printf_i+0x14c>
 800c732:	6923      	ldr	r3, [r4, #16]
 800c734:	462a      	mov	r2, r5
 800c736:	4649      	mov	r1, r9
 800c738:	4640      	mov	r0, r8
 800c73a:	47d0      	blx	sl
 800c73c:	3001      	adds	r0, #1
 800c73e:	d0ad      	beq.n	800c69c <_printf_i+0x160>
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	079b      	lsls	r3, r3, #30
 800c744:	d413      	bmi.n	800c76e <_printf_i+0x232>
 800c746:	68e0      	ldr	r0, [r4, #12]
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	4298      	cmp	r0, r3
 800c74c:	bfb8      	it	lt
 800c74e:	4618      	movlt	r0, r3
 800c750:	e7a6      	b.n	800c6a0 <_printf_i+0x164>
 800c752:	2301      	movs	r3, #1
 800c754:	4632      	mov	r2, r6
 800c756:	4649      	mov	r1, r9
 800c758:	4640      	mov	r0, r8
 800c75a:	47d0      	blx	sl
 800c75c:	3001      	adds	r0, #1
 800c75e:	d09d      	beq.n	800c69c <_printf_i+0x160>
 800c760:	3501      	adds	r5, #1
 800c762:	68e3      	ldr	r3, [r4, #12]
 800c764:	9903      	ldr	r1, [sp, #12]
 800c766:	1a5b      	subs	r3, r3, r1
 800c768:	42ab      	cmp	r3, r5
 800c76a:	dcf2      	bgt.n	800c752 <_printf_i+0x216>
 800c76c:	e7eb      	b.n	800c746 <_printf_i+0x20a>
 800c76e:	2500      	movs	r5, #0
 800c770:	f104 0619 	add.w	r6, r4, #25
 800c774:	e7f5      	b.n	800c762 <_printf_i+0x226>
 800c776:	bf00      	nop
 800c778:	0800e4e5 	.word	0x0800e4e5
 800c77c:	0800e4f6 	.word	0x0800e4f6

0800c780 <__sflush_r>:
 800c780:	898a      	ldrh	r2, [r1, #12]
 800c782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	4605      	mov	r5, r0
 800c788:	0710      	lsls	r0, r2, #28
 800c78a:	460c      	mov	r4, r1
 800c78c:	d458      	bmi.n	800c840 <__sflush_r+0xc0>
 800c78e:	684b      	ldr	r3, [r1, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	dc05      	bgt.n	800c7a0 <__sflush_r+0x20>
 800c794:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c796:	2b00      	cmp	r3, #0
 800c798:	dc02      	bgt.n	800c7a0 <__sflush_r+0x20>
 800c79a:	2000      	movs	r0, #0
 800c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7a2:	2e00      	cmp	r6, #0
 800c7a4:	d0f9      	beq.n	800c79a <__sflush_r+0x1a>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7ac:	682f      	ldr	r7, [r5, #0]
 800c7ae:	6a21      	ldr	r1, [r4, #32]
 800c7b0:	602b      	str	r3, [r5, #0]
 800c7b2:	d032      	beq.n	800c81a <__sflush_r+0x9a>
 800c7b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	075a      	lsls	r2, r3, #29
 800c7ba:	d505      	bpl.n	800c7c8 <__sflush_r+0x48>
 800c7bc:	6863      	ldr	r3, [r4, #4]
 800c7be:	1ac0      	subs	r0, r0, r3
 800c7c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7c2:	b10b      	cbz	r3, 800c7c8 <__sflush_r+0x48>
 800c7c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7c6:	1ac0      	subs	r0, r0, r3
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ce:	6a21      	ldr	r1, [r4, #32]
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	47b0      	blx	r6
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	d106      	bne.n	800c7e8 <__sflush_r+0x68>
 800c7da:	6829      	ldr	r1, [r5, #0]
 800c7dc:	291d      	cmp	r1, #29
 800c7de:	d82b      	bhi.n	800c838 <__sflush_r+0xb8>
 800c7e0:	4a29      	ldr	r2, [pc, #164]	; (800c888 <__sflush_r+0x108>)
 800c7e2:	410a      	asrs	r2, r1
 800c7e4:	07d6      	lsls	r6, r2, #31
 800c7e6:	d427      	bmi.n	800c838 <__sflush_r+0xb8>
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	6062      	str	r2, [r4, #4]
 800c7ec:	04d9      	lsls	r1, r3, #19
 800c7ee:	6922      	ldr	r2, [r4, #16]
 800c7f0:	6022      	str	r2, [r4, #0]
 800c7f2:	d504      	bpl.n	800c7fe <__sflush_r+0x7e>
 800c7f4:	1c42      	adds	r2, r0, #1
 800c7f6:	d101      	bne.n	800c7fc <__sflush_r+0x7c>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	b903      	cbnz	r3, 800c7fe <__sflush_r+0x7e>
 800c7fc:	6560      	str	r0, [r4, #84]	; 0x54
 800c7fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c800:	602f      	str	r7, [r5, #0]
 800c802:	2900      	cmp	r1, #0
 800c804:	d0c9      	beq.n	800c79a <__sflush_r+0x1a>
 800c806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c80a:	4299      	cmp	r1, r3
 800c80c:	d002      	beq.n	800c814 <__sflush_r+0x94>
 800c80e:	4628      	mov	r0, r5
 800c810:	f7ff fbea 	bl	800bfe8 <_free_r>
 800c814:	2000      	movs	r0, #0
 800c816:	6360      	str	r0, [r4, #52]	; 0x34
 800c818:	e7c0      	b.n	800c79c <__sflush_r+0x1c>
 800c81a:	2301      	movs	r3, #1
 800c81c:	4628      	mov	r0, r5
 800c81e:	47b0      	blx	r6
 800c820:	1c41      	adds	r1, r0, #1
 800c822:	d1c8      	bne.n	800c7b6 <__sflush_r+0x36>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0c5      	beq.n	800c7b6 <__sflush_r+0x36>
 800c82a:	2b1d      	cmp	r3, #29
 800c82c:	d001      	beq.n	800c832 <__sflush_r+0xb2>
 800c82e:	2b16      	cmp	r3, #22
 800c830:	d101      	bne.n	800c836 <__sflush_r+0xb6>
 800c832:	602f      	str	r7, [r5, #0]
 800c834:	e7b1      	b.n	800c79a <__sflush_r+0x1a>
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c83c:	81a3      	strh	r3, [r4, #12]
 800c83e:	e7ad      	b.n	800c79c <__sflush_r+0x1c>
 800c840:	690f      	ldr	r7, [r1, #16]
 800c842:	2f00      	cmp	r7, #0
 800c844:	d0a9      	beq.n	800c79a <__sflush_r+0x1a>
 800c846:	0793      	lsls	r3, r2, #30
 800c848:	680e      	ldr	r6, [r1, #0]
 800c84a:	bf08      	it	eq
 800c84c:	694b      	ldreq	r3, [r1, #20]
 800c84e:	600f      	str	r7, [r1, #0]
 800c850:	bf18      	it	ne
 800c852:	2300      	movne	r3, #0
 800c854:	eba6 0807 	sub.w	r8, r6, r7
 800c858:	608b      	str	r3, [r1, #8]
 800c85a:	f1b8 0f00 	cmp.w	r8, #0
 800c85e:	dd9c      	ble.n	800c79a <__sflush_r+0x1a>
 800c860:	6a21      	ldr	r1, [r4, #32]
 800c862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c864:	4643      	mov	r3, r8
 800c866:	463a      	mov	r2, r7
 800c868:	4628      	mov	r0, r5
 800c86a:	47b0      	blx	r6
 800c86c:	2800      	cmp	r0, #0
 800c86e:	dc06      	bgt.n	800c87e <__sflush_r+0xfe>
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c876:	81a3      	strh	r3, [r4, #12]
 800c878:	f04f 30ff 	mov.w	r0, #4294967295
 800c87c:	e78e      	b.n	800c79c <__sflush_r+0x1c>
 800c87e:	4407      	add	r7, r0
 800c880:	eba8 0800 	sub.w	r8, r8, r0
 800c884:	e7e9      	b.n	800c85a <__sflush_r+0xda>
 800c886:	bf00      	nop
 800c888:	dfbffffe 	.word	0xdfbffffe

0800c88c <_fflush_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	690b      	ldr	r3, [r1, #16]
 800c890:	4605      	mov	r5, r0
 800c892:	460c      	mov	r4, r1
 800c894:	b913      	cbnz	r3, 800c89c <_fflush_r+0x10>
 800c896:	2500      	movs	r5, #0
 800c898:	4628      	mov	r0, r5
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	b118      	cbz	r0, 800c8a6 <_fflush_r+0x1a>
 800c89e:	6a03      	ldr	r3, [r0, #32]
 800c8a0:	b90b      	cbnz	r3, 800c8a6 <_fflush_r+0x1a>
 800c8a2:	f7ff f97b 	bl	800bb9c <__sinit>
 800c8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0f3      	beq.n	800c896 <_fflush_r+0xa>
 800c8ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8b0:	07d0      	lsls	r0, r2, #31
 800c8b2:	d404      	bmi.n	800c8be <_fflush_r+0x32>
 800c8b4:	0599      	lsls	r1, r3, #22
 800c8b6:	d402      	bmi.n	800c8be <_fflush_r+0x32>
 800c8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ba:	f7ff fb84 	bl	800bfc6 <__retarget_lock_acquire_recursive>
 800c8be:	4628      	mov	r0, r5
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	f7ff ff5d 	bl	800c780 <__sflush_r>
 800c8c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8c8:	07da      	lsls	r2, r3, #31
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	d4e4      	bmi.n	800c898 <_fflush_r+0xc>
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	059b      	lsls	r3, r3, #22
 800c8d2:	d4e1      	bmi.n	800c898 <_fflush_r+0xc>
 800c8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8d6:	f7ff fb77 	bl	800bfc8 <__retarget_lock_release_recursive>
 800c8da:	e7dd      	b.n	800c898 <_fflush_r+0xc>

0800c8dc <__swhatbuf_r>:
 800c8dc:	b570      	push	{r4, r5, r6, lr}
 800c8de:	460c      	mov	r4, r1
 800c8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e4:	2900      	cmp	r1, #0
 800c8e6:	b096      	sub	sp, #88	; 0x58
 800c8e8:	4615      	mov	r5, r2
 800c8ea:	461e      	mov	r6, r3
 800c8ec:	da0d      	bge.n	800c90a <__swhatbuf_r+0x2e>
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8f4:	f04f 0100 	mov.w	r1, #0
 800c8f8:	bf0c      	ite	eq
 800c8fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c8fe:	2340      	movne	r3, #64	; 0x40
 800c900:	2000      	movs	r0, #0
 800c902:	6031      	str	r1, [r6, #0]
 800c904:	602b      	str	r3, [r5, #0]
 800c906:	b016      	add	sp, #88	; 0x58
 800c908:	bd70      	pop	{r4, r5, r6, pc}
 800c90a:	466a      	mov	r2, sp
 800c90c:	f000 f88a 	bl	800ca24 <_fstat_r>
 800c910:	2800      	cmp	r0, #0
 800c912:	dbec      	blt.n	800c8ee <__swhatbuf_r+0x12>
 800c914:	9901      	ldr	r1, [sp, #4]
 800c916:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c91a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c91e:	4259      	negs	r1, r3
 800c920:	4159      	adcs	r1, r3
 800c922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c926:	e7eb      	b.n	800c900 <__swhatbuf_r+0x24>

0800c928 <__smakebuf_r>:
 800c928:	898b      	ldrh	r3, [r1, #12]
 800c92a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c92c:	079d      	lsls	r5, r3, #30
 800c92e:	4606      	mov	r6, r0
 800c930:	460c      	mov	r4, r1
 800c932:	d507      	bpl.n	800c944 <__smakebuf_r+0x1c>
 800c934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	6123      	str	r3, [r4, #16]
 800c93c:	2301      	movs	r3, #1
 800c93e:	6163      	str	r3, [r4, #20]
 800c940:	b002      	add	sp, #8
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	ab01      	add	r3, sp, #4
 800c946:	466a      	mov	r2, sp
 800c948:	f7ff ffc8 	bl	800c8dc <__swhatbuf_r>
 800c94c:	9900      	ldr	r1, [sp, #0]
 800c94e:	4605      	mov	r5, r0
 800c950:	4630      	mov	r0, r6
 800c952:	f7ff fbb5 	bl	800c0c0 <_malloc_r>
 800c956:	b948      	cbnz	r0, 800c96c <__smakebuf_r+0x44>
 800c958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c95c:	059a      	lsls	r2, r3, #22
 800c95e:	d4ef      	bmi.n	800c940 <__smakebuf_r+0x18>
 800c960:	f023 0303 	bic.w	r3, r3, #3
 800c964:	f043 0302 	orr.w	r3, r3, #2
 800c968:	81a3      	strh	r3, [r4, #12]
 800c96a:	e7e3      	b.n	800c934 <__smakebuf_r+0xc>
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	6020      	str	r0, [r4, #0]
 800c970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c974:	81a3      	strh	r3, [r4, #12]
 800c976:	9b00      	ldr	r3, [sp, #0]
 800c978:	6163      	str	r3, [r4, #20]
 800c97a:	9b01      	ldr	r3, [sp, #4]
 800c97c:	6120      	str	r0, [r4, #16]
 800c97e:	b15b      	cbz	r3, 800c998 <__smakebuf_r+0x70>
 800c980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c984:	4630      	mov	r0, r6
 800c986:	f000 f85f 	bl	800ca48 <_isatty_r>
 800c98a:	b128      	cbz	r0, 800c998 <__smakebuf_r+0x70>
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	f023 0303 	bic.w	r3, r3, #3
 800c992:	f043 0301 	orr.w	r3, r3, #1
 800c996:	81a3      	strh	r3, [r4, #12]
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	431d      	orrs	r5, r3
 800c99c:	81a5      	strh	r5, [r4, #12]
 800c99e:	e7cf      	b.n	800c940 <__smakebuf_r+0x18>

0800c9a0 <_putc_r>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	b118      	cbz	r0, 800c9b2 <_putc_r+0x12>
 800c9aa:	6a03      	ldr	r3, [r0, #32]
 800c9ac:	b90b      	cbnz	r3, 800c9b2 <_putc_r+0x12>
 800c9ae:	f7ff f8f5 	bl	800bb9c <__sinit>
 800c9b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9b4:	07d8      	lsls	r0, r3, #31
 800c9b6:	d405      	bmi.n	800c9c4 <_putc_r+0x24>
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	0599      	lsls	r1, r3, #22
 800c9bc:	d402      	bmi.n	800c9c4 <_putc_r+0x24>
 800c9be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c0:	f7ff fb01 	bl	800bfc6 <__retarget_lock_acquire_recursive>
 800c9c4:	68a3      	ldr	r3, [r4, #8]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	60a3      	str	r3, [r4, #8]
 800c9cc:	da05      	bge.n	800c9da <_putc_r+0x3a>
 800c9ce:	69a2      	ldr	r2, [r4, #24]
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	db12      	blt.n	800c9fa <_putc_r+0x5a>
 800c9d4:	b2eb      	uxtb	r3, r5
 800c9d6:	2b0a      	cmp	r3, #10
 800c9d8:	d00f      	beq.n	800c9fa <_putc_r+0x5a>
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	1c5a      	adds	r2, r3, #1
 800c9de:	6022      	str	r2, [r4, #0]
 800c9e0:	701d      	strb	r5, [r3, #0]
 800c9e2:	b2ed      	uxtb	r5, r5
 800c9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9e6:	07da      	lsls	r2, r3, #31
 800c9e8:	d405      	bmi.n	800c9f6 <_putc_r+0x56>
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	059b      	lsls	r3, r3, #22
 800c9ee:	d402      	bmi.n	800c9f6 <_putc_r+0x56>
 800c9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9f2:	f7ff fae9 	bl	800bfc8 <__retarget_lock_release_recursive>
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	bd70      	pop	{r4, r5, r6, pc}
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7ff f9bb 	bl	800bd7a <__swbuf_r>
 800ca04:	4605      	mov	r5, r0
 800ca06:	e7ed      	b.n	800c9e4 <_putc_r+0x44>

0800ca08 <strchr>:
 800ca08:	b2c9      	uxtb	r1, r1
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca10:	b11a      	cbz	r2, 800ca1a <strchr+0x12>
 800ca12:	428a      	cmp	r2, r1
 800ca14:	d1f9      	bne.n	800ca0a <strchr+0x2>
 800ca16:	4618      	mov	r0, r3
 800ca18:	4770      	bx	lr
 800ca1a:	2900      	cmp	r1, #0
 800ca1c:	bf18      	it	ne
 800ca1e:	2300      	movne	r3, #0
 800ca20:	e7f9      	b.n	800ca16 <strchr+0xe>
	...

0800ca24 <_fstat_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d07      	ldr	r5, [pc, #28]	; (800ca44 <_fstat_r+0x20>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	4611      	mov	r1, r2
 800ca30:	602b      	str	r3, [r5, #0]
 800ca32:	f7f6 f890 	bl	8002b56 <_fstat>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	d102      	bne.n	800ca40 <_fstat_r+0x1c>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b103      	cbz	r3, 800ca40 <_fstat_r+0x1c>
 800ca3e:	6023      	str	r3, [r4, #0]
 800ca40:	bd38      	pop	{r3, r4, r5, pc}
 800ca42:	bf00      	nop
 800ca44:	20001720 	.word	0x20001720

0800ca48 <_isatty_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4d06      	ldr	r5, [pc, #24]	; (800ca64 <_isatty_r+0x1c>)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4604      	mov	r4, r0
 800ca50:	4608      	mov	r0, r1
 800ca52:	602b      	str	r3, [r5, #0]
 800ca54:	f7f6 f88f 	bl	8002b76 <_isatty>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d102      	bne.n	800ca62 <_isatty_r+0x1a>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	b103      	cbz	r3, 800ca62 <_isatty_r+0x1a>
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	20001720 	.word	0x20001720

0800ca68 <_sbrk_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4d06      	ldr	r5, [pc, #24]	; (800ca84 <_sbrk_r+0x1c>)
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4604      	mov	r4, r0
 800ca70:	4608      	mov	r0, r1
 800ca72:	602b      	str	r3, [r5, #0]
 800ca74:	f7f6 f898 	bl	8002ba8 <_sbrk>
 800ca78:	1c43      	adds	r3, r0, #1
 800ca7a:	d102      	bne.n	800ca82 <_sbrk_r+0x1a>
 800ca7c:	682b      	ldr	r3, [r5, #0]
 800ca7e:	b103      	cbz	r3, 800ca82 <_sbrk_r+0x1a>
 800ca80:	6023      	str	r3, [r4, #0]
 800ca82:	bd38      	pop	{r3, r4, r5, pc}
 800ca84:	20001720 	.word	0x20001720

0800ca88 <_init>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	bf00      	nop
 800ca8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca8e:	bc08      	pop	{r3}
 800ca90:	469e      	mov	lr, r3
 800ca92:	4770      	bx	lr

0800ca94 <_fini>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	bf00      	nop
 800ca98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9a:	bc08      	pop	{r3}
 800ca9c:	469e      	mov	lr, r3
 800ca9e:	4770      	bx	lr
